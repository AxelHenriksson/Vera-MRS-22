
G031.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081cc  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000504  08008288  08008288  00018288  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800878c  0800878c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800878c  0800878c  0001878c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008794  08008794  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008794  08008794  00018794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008798  08008798  00018798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800879c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  200001e0  08008978  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003a0  08008978  000203a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011853  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002703  00000000  00000000  00031a57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00034160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00035070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178db  00000000  00000000  00035e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001221e  00000000  00000000  0004d753  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093a3a  00000000  00000000  0005f971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f33ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004724  00000000  00000000  000f33fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	200001e0 	.word	0x200001e0
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08008270 	.word	0x08008270

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200001e4 	.word	0x200001e4
 8000100:	08008270 	.word	0x08008270

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_uqi>:
 8000114:	b402      	push	{r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	5c09      	ldrb	r1, [r1, r0]
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	448e      	add	lr, r1
 8000122:	bc02      	pop	{r1}
 8000124:	4770      	bx	lr
 8000126:	46c0      	nop			; (mov r8, r8)

08000128 <__gnu_thumb1_case_shi>:
 8000128:	b403      	push	{r0, r1}
 800012a:	4671      	mov	r1, lr
 800012c:	0849      	lsrs	r1, r1, #1
 800012e:	0040      	lsls	r0, r0, #1
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	5e09      	ldrsh	r1, [r1, r0]
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	448e      	add	lr, r1
 8000138:	bc03      	pop	{r0, r1}
 800013a:	4770      	bx	lr

0800013c <__udivsi3>:
 800013c:	2200      	movs	r2, #0
 800013e:	0843      	lsrs	r3, r0, #1
 8000140:	428b      	cmp	r3, r1
 8000142:	d374      	bcc.n	800022e <__udivsi3+0xf2>
 8000144:	0903      	lsrs	r3, r0, #4
 8000146:	428b      	cmp	r3, r1
 8000148:	d35f      	bcc.n	800020a <__udivsi3+0xce>
 800014a:	0a03      	lsrs	r3, r0, #8
 800014c:	428b      	cmp	r3, r1
 800014e:	d344      	bcc.n	80001da <__udivsi3+0x9e>
 8000150:	0b03      	lsrs	r3, r0, #12
 8000152:	428b      	cmp	r3, r1
 8000154:	d328      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000156:	0c03      	lsrs	r3, r0, #16
 8000158:	428b      	cmp	r3, r1
 800015a:	d30d      	bcc.n	8000178 <__udivsi3+0x3c>
 800015c:	22ff      	movs	r2, #255	; 0xff
 800015e:	0209      	lsls	r1, r1, #8
 8000160:	ba12      	rev	r2, r2
 8000162:	0c03      	lsrs	r3, r0, #16
 8000164:	428b      	cmp	r3, r1
 8000166:	d302      	bcc.n	800016e <__udivsi3+0x32>
 8000168:	1212      	asrs	r2, r2, #8
 800016a:	0209      	lsls	r1, r1, #8
 800016c:	d065      	beq.n	800023a <__udivsi3+0xfe>
 800016e:	0b03      	lsrs	r3, r0, #12
 8000170:	428b      	cmp	r3, r1
 8000172:	d319      	bcc.n	80001a8 <__udivsi3+0x6c>
 8000174:	e000      	b.n	8000178 <__udivsi3+0x3c>
 8000176:	0a09      	lsrs	r1, r1, #8
 8000178:	0bc3      	lsrs	r3, r0, #15
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x46>
 800017e:	03cb      	lsls	r3, r1, #15
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b83      	lsrs	r3, r0, #14
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x52>
 800018a:	038b      	lsls	r3, r1, #14
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0b43      	lsrs	r3, r0, #13
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x5e>
 8000196:	034b      	lsls	r3, r1, #13
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b03      	lsrs	r3, r0, #12
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x6a>
 80001a2:	030b      	lsls	r3, r1, #12
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0ac3      	lsrs	r3, r0, #11
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x76>
 80001ae:	02cb      	lsls	r3, r1, #11
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a83      	lsrs	r3, r0, #10
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x82>
 80001ba:	028b      	lsls	r3, r1, #10
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0a43      	lsrs	r3, r0, #9
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x8e>
 80001c6:	024b      	lsls	r3, r1, #9
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a03      	lsrs	r3, r0, #8
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x9a>
 80001d2:	020b      	lsls	r3, r1, #8
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	d2cd      	bcs.n	8000176 <__udivsi3+0x3a>
 80001da:	09c3      	lsrs	r3, r0, #7
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xa8>
 80001e0:	01cb      	lsls	r3, r1, #7
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0983      	lsrs	r3, r0, #6
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xb4>
 80001ec:	018b      	lsls	r3, r1, #6
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0943      	lsrs	r3, r0, #5
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xc0>
 80001f8:	014b      	lsls	r3, r1, #5
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0903      	lsrs	r3, r0, #4
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xcc>
 8000204:	010b      	lsls	r3, r1, #4
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	08c3      	lsrs	r3, r0, #3
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xd8>
 8000210:	00cb      	lsls	r3, r1, #3
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0883      	lsrs	r3, r0, #2
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xe4>
 800021c:	008b      	lsls	r3, r1, #2
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	0843      	lsrs	r3, r0, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xf0>
 8000228:	004b      	lsls	r3, r1, #1
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	1a41      	subs	r1, r0, r1
 8000230:	d200      	bcs.n	8000234 <__udivsi3+0xf8>
 8000232:	4601      	mov	r1, r0
 8000234:	4152      	adcs	r2, r2
 8000236:	4610      	mov	r0, r2
 8000238:	4770      	bx	lr
 800023a:	e7ff      	b.n	800023c <__udivsi3+0x100>
 800023c:	b501      	push	{r0, lr}
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f8f0 	bl	8000424 <__aeabi_idiv0>
 8000244:	bd02      	pop	{r1, pc}
 8000246:	46c0      	nop			; (mov r8, r8)

08000248 <__aeabi_uidivmod>:
 8000248:	2900      	cmp	r1, #0
 800024a:	d0f7      	beq.n	800023c <__udivsi3+0x100>
 800024c:	e776      	b.n	800013c <__udivsi3>
 800024e:	4770      	bx	lr

08000250 <__divsi3>:
 8000250:	4603      	mov	r3, r0
 8000252:	430b      	orrs	r3, r1
 8000254:	d47f      	bmi.n	8000356 <__divsi3+0x106>
 8000256:	2200      	movs	r2, #0
 8000258:	0843      	lsrs	r3, r0, #1
 800025a:	428b      	cmp	r3, r1
 800025c:	d374      	bcc.n	8000348 <__divsi3+0xf8>
 800025e:	0903      	lsrs	r3, r0, #4
 8000260:	428b      	cmp	r3, r1
 8000262:	d35f      	bcc.n	8000324 <__divsi3+0xd4>
 8000264:	0a03      	lsrs	r3, r0, #8
 8000266:	428b      	cmp	r3, r1
 8000268:	d344      	bcc.n	80002f4 <__divsi3+0xa4>
 800026a:	0b03      	lsrs	r3, r0, #12
 800026c:	428b      	cmp	r3, r1
 800026e:	d328      	bcc.n	80002c2 <__divsi3+0x72>
 8000270:	0c03      	lsrs	r3, r0, #16
 8000272:	428b      	cmp	r3, r1
 8000274:	d30d      	bcc.n	8000292 <__divsi3+0x42>
 8000276:	22ff      	movs	r2, #255	; 0xff
 8000278:	0209      	lsls	r1, r1, #8
 800027a:	ba12      	rev	r2, r2
 800027c:	0c03      	lsrs	r3, r0, #16
 800027e:	428b      	cmp	r3, r1
 8000280:	d302      	bcc.n	8000288 <__divsi3+0x38>
 8000282:	1212      	asrs	r2, r2, #8
 8000284:	0209      	lsls	r1, r1, #8
 8000286:	d065      	beq.n	8000354 <__divsi3+0x104>
 8000288:	0b03      	lsrs	r3, r0, #12
 800028a:	428b      	cmp	r3, r1
 800028c:	d319      	bcc.n	80002c2 <__divsi3+0x72>
 800028e:	e000      	b.n	8000292 <__divsi3+0x42>
 8000290:	0a09      	lsrs	r1, r1, #8
 8000292:	0bc3      	lsrs	r3, r0, #15
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x4c>
 8000298:	03cb      	lsls	r3, r1, #15
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0b83      	lsrs	r3, r0, #14
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x58>
 80002a4:	038b      	lsls	r3, r1, #14
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0b43      	lsrs	r3, r0, #13
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x64>
 80002b0:	034b      	lsls	r3, r1, #13
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b03      	lsrs	r3, r0, #12
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x70>
 80002bc:	030b      	lsls	r3, r1, #12
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0ac3      	lsrs	r3, r0, #11
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x7c>
 80002c8:	02cb      	lsls	r3, r1, #11
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0a83      	lsrs	r3, r0, #10
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x88>
 80002d4:	028b      	lsls	r3, r1, #10
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0a43      	lsrs	r3, r0, #9
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x94>
 80002e0:	024b      	lsls	r3, r1, #9
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a03      	lsrs	r3, r0, #8
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0xa0>
 80002ec:	020b      	lsls	r3, r1, #8
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	d2cd      	bcs.n	8000290 <__divsi3+0x40>
 80002f4:	09c3      	lsrs	r3, r0, #7
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xae>
 80002fa:	01cb      	lsls	r3, r1, #7
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0983      	lsrs	r3, r0, #6
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xba>
 8000306:	018b      	lsls	r3, r1, #6
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0943      	lsrs	r3, r0, #5
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xc6>
 8000312:	014b      	lsls	r3, r1, #5
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0903      	lsrs	r3, r0, #4
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xd2>
 800031e:	010b      	lsls	r3, r1, #4
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	08c3      	lsrs	r3, r0, #3
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xde>
 800032a:	00cb      	lsls	r3, r1, #3
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0883      	lsrs	r3, r0, #2
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xea>
 8000336:	008b      	lsls	r3, r1, #2
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	0843      	lsrs	r3, r0, #1
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xf6>
 8000342:	004b      	lsls	r3, r1, #1
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	1a41      	subs	r1, r0, r1
 800034a:	d200      	bcs.n	800034e <__divsi3+0xfe>
 800034c:	4601      	mov	r1, r0
 800034e:	4152      	adcs	r2, r2
 8000350:	4610      	mov	r0, r2
 8000352:	4770      	bx	lr
 8000354:	e05d      	b.n	8000412 <__divsi3+0x1c2>
 8000356:	0fca      	lsrs	r2, r1, #31
 8000358:	d000      	beq.n	800035c <__divsi3+0x10c>
 800035a:	4249      	negs	r1, r1
 800035c:	1003      	asrs	r3, r0, #32
 800035e:	d300      	bcc.n	8000362 <__divsi3+0x112>
 8000360:	4240      	negs	r0, r0
 8000362:	4053      	eors	r3, r2
 8000364:	2200      	movs	r2, #0
 8000366:	469c      	mov	ip, r3
 8000368:	0903      	lsrs	r3, r0, #4
 800036a:	428b      	cmp	r3, r1
 800036c:	d32d      	bcc.n	80003ca <__divsi3+0x17a>
 800036e:	0a03      	lsrs	r3, r0, #8
 8000370:	428b      	cmp	r3, r1
 8000372:	d312      	bcc.n	800039a <__divsi3+0x14a>
 8000374:	22fc      	movs	r2, #252	; 0xfc
 8000376:	0189      	lsls	r1, r1, #6
 8000378:	ba12      	rev	r2, r2
 800037a:	0a03      	lsrs	r3, r0, #8
 800037c:	428b      	cmp	r3, r1
 800037e:	d30c      	bcc.n	800039a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	1192      	asrs	r2, r2, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d308      	bcc.n	800039a <__divsi3+0x14a>
 8000388:	0189      	lsls	r1, r1, #6
 800038a:	1192      	asrs	r2, r2, #6
 800038c:	428b      	cmp	r3, r1
 800038e:	d304      	bcc.n	800039a <__divsi3+0x14a>
 8000390:	0189      	lsls	r1, r1, #6
 8000392:	d03a      	beq.n	800040a <__divsi3+0x1ba>
 8000394:	1192      	asrs	r2, r2, #6
 8000396:	e000      	b.n	800039a <__divsi3+0x14a>
 8000398:	0989      	lsrs	r1, r1, #6
 800039a:	09c3      	lsrs	r3, r0, #7
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x154>
 80003a0:	01cb      	lsls	r3, r1, #7
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	0983      	lsrs	r3, r0, #6
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x160>
 80003ac:	018b      	lsls	r3, r1, #6
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0943      	lsrs	r3, r0, #5
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x16c>
 80003b8:	014b      	lsls	r3, r1, #5
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0903      	lsrs	r3, r0, #4
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x178>
 80003c4:	010b      	lsls	r3, r1, #4
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	08c3      	lsrs	r3, r0, #3
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x184>
 80003d0:	00cb      	lsls	r3, r1, #3
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0883      	lsrs	r3, r0, #2
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x190>
 80003dc:	008b      	lsls	r3, r1, #2
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	d2d9      	bcs.n	8000398 <__divsi3+0x148>
 80003e4:	0843      	lsrs	r3, r0, #1
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d301      	bcc.n	80003ee <__divsi3+0x19e>
 80003ea:	004b      	lsls	r3, r1, #1
 80003ec:	1ac0      	subs	r0, r0, r3
 80003ee:	4152      	adcs	r2, r2
 80003f0:	1a41      	subs	r1, r0, r1
 80003f2:	d200      	bcs.n	80003f6 <__divsi3+0x1a6>
 80003f4:	4601      	mov	r1, r0
 80003f6:	4663      	mov	r3, ip
 80003f8:	4152      	adcs	r2, r2
 80003fa:	105b      	asrs	r3, r3, #1
 80003fc:	4610      	mov	r0, r2
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x1b4>
 8000400:	4240      	negs	r0, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d500      	bpl.n	8000408 <__divsi3+0x1b8>
 8000406:	4249      	negs	r1, r1
 8000408:	4770      	bx	lr
 800040a:	4663      	mov	r3, ip
 800040c:	105b      	asrs	r3, r3, #1
 800040e:	d300      	bcc.n	8000412 <__divsi3+0x1c2>
 8000410:	4240      	negs	r0, r0
 8000412:	b501      	push	{r0, lr}
 8000414:	2000      	movs	r0, #0
 8000416:	f000 f805 	bl	8000424 <__aeabi_idiv0>
 800041a:	bd02      	pop	{r1, pc}

0800041c <__aeabi_idivmod>:
 800041c:	2900      	cmp	r1, #0
 800041e:	d0f8      	beq.n	8000412 <__divsi3+0x1c2>
 8000420:	e716      	b.n	8000250 <__divsi3>
 8000422:	4770      	bx	lr

08000424 <__aeabi_idiv0>:
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdrcmple>:
 8000428:	4684      	mov	ip, r0
 800042a:	0010      	movs	r0, r2
 800042c:	4662      	mov	r2, ip
 800042e:	468c      	mov	ip, r1
 8000430:	0019      	movs	r1, r3
 8000432:	4663      	mov	r3, ip
 8000434:	e000      	b.n	8000438 <__aeabi_cdcmpeq>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__aeabi_cdcmpeq>:
 8000438:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043a:	f000 fff9 	bl	8001430 <__ledf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	d401      	bmi.n	8000446 <__aeabi_cdcmpeq+0xe>
 8000442:	2100      	movs	r1, #0
 8000444:	42c8      	cmn	r0, r1
 8000446:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000448 <__aeabi_dcmpeq>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 ff49 	bl	80012e0 <__eqdf2>
 800044e:	4240      	negs	r0, r0
 8000450:	3001      	adds	r0, #1
 8000452:	bd10      	pop	{r4, pc}

08000454 <__aeabi_dcmplt>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 ffeb 	bl	8001430 <__ledf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	db01      	blt.n	8000462 <__aeabi_dcmplt+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dcmple>:
 8000468:	b510      	push	{r4, lr}
 800046a:	f000 ffe1 	bl	8001430 <__ledf2>
 800046e:	2800      	cmp	r0, #0
 8000470:	dd01      	ble.n	8000476 <__aeabi_dcmple+0xe>
 8000472:	2000      	movs	r0, #0
 8000474:	bd10      	pop	{r4, pc}
 8000476:	2001      	movs	r0, #1
 8000478:	bd10      	pop	{r4, pc}
 800047a:	46c0      	nop			; (mov r8, r8)

0800047c <__aeabi_dcmpgt>:
 800047c:	b510      	push	{r4, lr}
 800047e:	f000 ff71 	bl	8001364 <__gedf2>
 8000482:	2800      	cmp	r0, #0
 8000484:	dc01      	bgt.n	800048a <__aeabi_dcmpgt+0xe>
 8000486:	2000      	movs	r0, #0
 8000488:	bd10      	pop	{r4, pc}
 800048a:	2001      	movs	r0, #1
 800048c:	bd10      	pop	{r4, pc}
 800048e:	46c0      	nop			; (mov r8, r8)

08000490 <__aeabi_dcmpge>:
 8000490:	b510      	push	{r4, lr}
 8000492:	f000 ff67 	bl	8001364 <__gedf2>
 8000496:	2800      	cmp	r0, #0
 8000498:	da01      	bge.n	800049e <__aeabi_dcmpge+0xe>
 800049a:	2000      	movs	r0, #0
 800049c:	bd10      	pop	{r4, pc}
 800049e:	2001      	movs	r0, #1
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	46c0      	nop			; (mov r8, r8)

080004a4 <__aeabi_uldivmod>:
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d111      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d10f      	bne.n	80004cc <__aeabi_uldivmod+0x28>
 80004ac:	2900      	cmp	r1, #0
 80004ae:	d100      	bne.n	80004b2 <__aeabi_uldivmod+0xe>
 80004b0:	2800      	cmp	r0, #0
 80004b2:	d002      	beq.n	80004ba <__aeabi_uldivmod+0x16>
 80004b4:	2100      	movs	r1, #0
 80004b6:	43c9      	mvns	r1, r1
 80004b8:	0008      	movs	r0, r1
 80004ba:	b407      	push	{r0, r1, r2}
 80004bc:	4802      	ldr	r0, [pc, #8]	; (80004c8 <__aeabi_uldivmod+0x24>)
 80004be:	a102      	add	r1, pc, #8	; (adr r1, 80004c8 <__aeabi_uldivmod+0x24>)
 80004c0:	1840      	adds	r0, r0, r1
 80004c2:	9002      	str	r0, [sp, #8]
 80004c4:	bd03      	pop	{r0, r1, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	ffffff5d 	.word	0xffffff5d
 80004cc:	b403      	push	{r0, r1}
 80004ce:	4668      	mov	r0, sp
 80004d0:	b501      	push	{r0, lr}
 80004d2:	9802      	ldr	r0, [sp, #8]
 80004d4:	f000 f806 	bl	80004e4 <__udivmoddi4>
 80004d8:	9b01      	ldr	r3, [sp, #4]
 80004da:	469e      	mov	lr, r3
 80004dc:	b002      	add	sp, #8
 80004de:	bc0c      	pop	{r2, r3}
 80004e0:	4770      	bx	lr
 80004e2:	46c0      	nop			; (mov r8, r8)

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f001 febe 	bl	8002284 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f001 feb9 	bl	8002284 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	469b      	mov	fp, r3
 800051a:	d433      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051c:	465a      	mov	r2, fp
 800051e:	4653      	mov	r3, sl
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83a      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e078      	b.n	8000628 <__udivmoddi4+0x144>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e075      	b.n	800062e <__udivmoddi4+0x14a>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e028      	b.n	80005ae <__udivmoddi4+0xca>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	2320      	movs	r3, #32
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	4652      	mov	r2, sl
 800058c:	40da      	lsrs	r2, r3
 800058e:	4641      	mov	r1, r8
 8000590:	0013      	movs	r3, r2
 8000592:	464a      	mov	r2, r9
 8000594:	408a      	lsls	r2, r1
 8000596:	0017      	movs	r7, r2
 8000598:	4642      	mov	r2, r8
 800059a:	431f      	orrs	r7, r3
 800059c:	4653      	mov	r3, sl
 800059e:	4093      	lsls	r3, r2
 80005a0:	001e      	movs	r6, r3
 80005a2:	42af      	cmp	r7, r5
 80005a4:	d9c4      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	4643      	mov	r3, r8
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0d9      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b4:	07fb      	lsls	r3, r7, #31
 80005b6:	0872      	lsrs	r2, r6, #1
 80005b8:	431a      	orrs	r2, r3
 80005ba:	4646      	mov	r6, r8
 80005bc:	087b      	lsrs	r3, r7, #1
 80005be:	e00e      	b.n	80005de <__udivmoddi4+0xfa>
 80005c0:	42ab      	cmp	r3, r5
 80005c2:	d101      	bne.n	80005c8 <__udivmoddi4+0xe4>
 80005c4:	42a2      	cmp	r2, r4
 80005c6:	d80c      	bhi.n	80005e2 <__udivmoddi4+0xfe>
 80005c8:	1aa4      	subs	r4, r4, r2
 80005ca:	419d      	sbcs	r5, r3
 80005cc:	2001      	movs	r0, #1
 80005ce:	1924      	adds	r4, r4, r4
 80005d0:	416d      	adcs	r5, r5
 80005d2:	2100      	movs	r1, #0
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1824      	adds	r4, r4, r0
 80005d8:	414d      	adcs	r5, r1
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d006      	beq.n	80005ec <__udivmoddi4+0x108>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d9ee      	bls.n	80005c0 <__udivmoddi4+0xdc>
 80005e2:	3e01      	subs	r6, #1
 80005e4:	1924      	adds	r4, r4, r4
 80005e6:	416d      	adcs	r5, r5
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d1f8      	bne.n	80005de <__udivmoddi4+0xfa>
 80005ec:	9800      	ldr	r0, [sp, #0]
 80005ee:	9901      	ldr	r1, [sp, #4]
 80005f0:	465b      	mov	r3, fp
 80005f2:	1900      	adds	r0, r0, r4
 80005f4:	4169      	adcs	r1, r5
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db24      	blt.n	8000644 <__udivmoddi4+0x160>
 80005fa:	002b      	movs	r3, r5
 80005fc:	465a      	mov	r2, fp
 80005fe:	4644      	mov	r4, r8
 8000600:	40d3      	lsrs	r3, r2
 8000602:	002a      	movs	r2, r5
 8000604:	40e2      	lsrs	r2, r4
 8000606:	001c      	movs	r4, r3
 8000608:	465b      	mov	r3, fp
 800060a:	0015      	movs	r5, r2
 800060c:	2b00      	cmp	r3, #0
 800060e:	db2a      	blt.n	8000666 <__udivmoddi4+0x182>
 8000610:	0026      	movs	r6, r4
 8000612:	409e      	lsls	r6, r3
 8000614:	0033      	movs	r3, r6
 8000616:	0026      	movs	r6, r4
 8000618:	4647      	mov	r7, r8
 800061a:	40be      	lsls	r6, r7
 800061c:	0032      	movs	r2, r6
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	4199      	sbcs	r1, r3
 8000622:	9000      	str	r0, [sp, #0]
 8000624:	9101      	str	r1, [sp, #4]
 8000626:	e79f      	b.n	8000568 <__udivmoddi4+0x84>
 8000628:	42a3      	cmp	r3, r4
 800062a:	d8bc      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 800062c:	e783      	b.n	8000536 <__udivmoddi4+0x52>
 800062e:	4642      	mov	r2, r8
 8000630:	2320      	movs	r3, #32
 8000632:	2100      	movs	r1, #0
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	2200      	movs	r2, #0
 8000638:	9100      	str	r1, [sp, #0]
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	40da      	lsrs	r2, r3
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	e786      	b.n	8000552 <__udivmoddi4+0x6e>
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	4646      	mov	r6, r8
 800064e:	409a      	lsls	r2, r3
 8000650:	0023      	movs	r3, r4
 8000652:	40f3      	lsrs	r3, r6
 8000654:	4644      	mov	r4, r8
 8000656:	4313      	orrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	dad4      	bge.n	8000610 <__udivmoddi4+0x12c>
 8000666:	4642      	mov	r2, r8
 8000668:	002f      	movs	r7, r5
 800066a:	2320      	movs	r3, #32
 800066c:	0026      	movs	r6, r4
 800066e:	4097      	lsls	r7, r2
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	40de      	lsrs	r6, r3
 8000674:	003b      	movs	r3, r7
 8000676:	4333      	orrs	r3, r6
 8000678:	e7cd      	b.n	8000616 <__udivmoddi4+0x132>
 800067a:	46c0      	nop			; (mov r8, r8)

0800067c <__aeabi_dadd>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	4646      	mov	r6, r8
 8000682:	46d6      	mov	lr, sl
 8000684:	000d      	movs	r5, r1
 8000686:	0004      	movs	r4, r0
 8000688:	b5c0      	push	{r6, r7, lr}
 800068a:	001f      	movs	r7, r3
 800068c:	0011      	movs	r1, r2
 800068e:	0328      	lsls	r0, r5, #12
 8000690:	0f62      	lsrs	r2, r4, #29
 8000692:	0a40      	lsrs	r0, r0, #9
 8000694:	4310      	orrs	r0, r2
 8000696:	007a      	lsls	r2, r7, #1
 8000698:	0d52      	lsrs	r2, r2, #21
 800069a:	00e3      	lsls	r3, r4, #3
 800069c:	033c      	lsls	r4, r7, #12
 800069e:	4691      	mov	r9, r2
 80006a0:	0a64      	lsrs	r4, r4, #9
 80006a2:	0ffa      	lsrs	r2, r7, #31
 80006a4:	0f4f      	lsrs	r7, r1, #29
 80006a6:	006e      	lsls	r6, r5, #1
 80006a8:	4327      	orrs	r7, r4
 80006aa:	4692      	mov	sl, r2
 80006ac:	46b8      	mov	r8, r7
 80006ae:	0d76      	lsrs	r6, r6, #21
 80006b0:	0fed      	lsrs	r5, r5, #31
 80006b2:	00c9      	lsls	r1, r1, #3
 80006b4:	4295      	cmp	r5, r2
 80006b6:	d100      	bne.n	80006ba <__aeabi_dadd+0x3e>
 80006b8:	e099      	b.n	80007ee <__aeabi_dadd+0x172>
 80006ba:	464c      	mov	r4, r9
 80006bc:	1b34      	subs	r4, r6, r4
 80006be:	46a4      	mov	ip, r4
 80006c0:	2c00      	cmp	r4, #0
 80006c2:	dc00      	bgt.n	80006c6 <__aeabi_dadd+0x4a>
 80006c4:	e07c      	b.n	80007c0 <__aeabi_dadd+0x144>
 80006c6:	464a      	mov	r2, r9
 80006c8:	2a00      	cmp	r2, #0
 80006ca:	d100      	bne.n	80006ce <__aeabi_dadd+0x52>
 80006cc:	e0b8      	b.n	8000840 <__aeabi_dadd+0x1c4>
 80006ce:	4ac5      	ldr	r2, [pc, #788]	; (80009e4 <__aeabi_dadd+0x368>)
 80006d0:	4296      	cmp	r6, r2
 80006d2:	d100      	bne.n	80006d6 <__aeabi_dadd+0x5a>
 80006d4:	e11c      	b.n	8000910 <__aeabi_dadd+0x294>
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	003c      	movs	r4, r7
 80006da:	0412      	lsls	r2, r2, #16
 80006dc:	4314      	orrs	r4, r2
 80006de:	46a0      	mov	r8, r4
 80006e0:	4662      	mov	r2, ip
 80006e2:	2a38      	cmp	r2, #56	; 0x38
 80006e4:	dd00      	ble.n	80006e8 <__aeabi_dadd+0x6c>
 80006e6:	e161      	b.n	80009ac <__aeabi_dadd+0x330>
 80006e8:	2a1f      	cmp	r2, #31
 80006ea:	dd00      	ble.n	80006ee <__aeabi_dadd+0x72>
 80006ec:	e1cc      	b.n	8000a88 <__aeabi_dadd+0x40c>
 80006ee:	4664      	mov	r4, ip
 80006f0:	2220      	movs	r2, #32
 80006f2:	1b12      	subs	r2, r2, r4
 80006f4:	4644      	mov	r4, r8
 80006f6:	4094      	lsls	r4, r2
 80006f8:	000f      	movs	r7, r1
 80006fa:	46a1      	mov	r9, r4
 80006fc:	4664      	mov	r4, ip
 80006fe:	4091      	lsls	r1, r2
 8000700:	40e7      	lsrs	r7, r4
 8000702:	464c      	mov	r4, r9
 8000704:	1e4a      	subs	r2, r1, #1
 8000706:	4191      	sbcs	r1, r2
 8000708:	433c      	orrs	r4, r7
 800070a:	4642      	mov	r2, r8
 800070c:	4321      	orrs	r1, r4
 800070e:	4664      	mov	r4, ip
 8000710:	40e2      	lsrs	r2, r4
 8000712:	1a80      	subs	r0, r0, r2
 8000714:	1a5c      	subs	r4, r3, r1
 8000716:	42a3      	cmp	r3, r4
 8000718:	419b      	sbcs	r3, r3
 800071a:	425f      	negs	r7, r3
 800071c:	1bc7      	subs	r7, r0, r7
 800071e:	023b      	lsls	r3, r7, #8
 8000720:	d400      	bmi.n	8000724 <__aeabi_dadd+0xa8>
 8000722:	e0d0      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000724:	027f      	lsls	r7, r7, #9
 8000726:	0a7f      	lsrs	r7, r7, #9
 8000728:	2f00      	cmp	r7, #0
 800072a:	d100      	bne.n	800072e <__aeabi_dadd+0xb2>
 800072c:	e0ff      	b.n	800092e <__aeabi_dadd+0x2b2>
 800072e:	0038      	movs	r0, r7
 8000730:	f001 fd8a 	bl	8002248 <__clzsi2>
 8000734:	0001      	movs	r1, r0
 8000736:	3908      	subs	r1, #8
 8000738:	2320      	movs	r3, #32
 800073a:	0022      	movs	r2, r4
 800073c:	1a5b      	subs	r3, r3, r1
 800073e:	408f      	lsls	r7, r1
 8000740:	40da      	lsrs	r2, r3
 8000742:	408c      	lsls	r4, r1
 8000744:	4317      	orrs	r7, r2
 8000746:	42b1      	cmp	r1, r6
 8000748:	da00      	bge.n	800074c <__aeabi_dadd+0xd0>
 800074a:	e0ff      	b.n	800094c <__aeabi_dadd+0x2d0>
 800074c:	1b89      	subs	r1, r1, r6
 800074e:	1c4b      	adds	r3, r1, #1
 8000750:	2b1f      	cmp	r3, #31
 8000752:	dd00      	ble.n	8000756 <__aeabi_dadd+0xda>
 8000754:	e0a8      	b.n	80008a8 <__aeabi_dadd+0x22c>
 8000756:	2220      	movs	r2, #32
 8000758:	0039      	movs	r1, r7
 800075a:	1ad2      	subs	r2, r2, r3
 800075c:	0020      	movs	r0, r4
 800075e:	4094      	lsls	r4, r2
 8000760:	4091      	lsls	r1, r2
 8000762:	40d8      	lsrs	r0, r3
 8000764:	1e62      	subs	r2, r4, #1
 8000766:	4194      	sbcs	r4, r2
 8000768:	40df      	lsrs	r7, r3
 800076a:	2600      	movs	r6, #0
 800076c:	4301      	orrs	r1, r0
 800076e:	430c      	orrs	r4, r1
 8000770:	0763      	lsls	r3, r4, #29
 8000772:	d009      	beq.n	8000788 <__aeabi_dadd+0x10c>
 8000774:	230f      	movs	r3, #15
 8000776:	4023      	ands	r3, r4
 8000778:	2b04      	cmp	r3, #4
 800077a:	d005      	beq.n	8000788 <__aeabi_dadd+0x10c>
 800077c:	1d23      	adds	r3, r4, #4
 800077e:	42a3      	cmp	r3, r4
 8000780:	41a4      	sbcs	r4, r4
 8000782:	4264      	negs	r4, r4
 8000784:	193f      	adds	r7, r7, r4
 8000786:	001c      	movs	r4, r3
 8000788:	023b      	lsls	r3, r7, #8
 800078a:	d400      	bmi.n	800078e <__aeabi_dadd+0x112>
 800078c:	e09e      	b.n	80008cc <__aeabi_dadd+0x250>
 800078e:	4b95      	ldr	r3, [pc, #596]	; (80009e4 <__aeabi_dadd+0x368>)
 8000790:	3601      	adds	r6, #1
 8000792:	429e      	cmp	r6, r3
 8000794:	d100      	bne.n	8000798 <__aeabi_dadd+0x11c>
 8000796:	e0b7      	b.n	8000908 <__aeabi_dadd+0x28c>
 8000798:	4a93      	ldr	r2, [pc, #588]	; (80009e8 <__aeabi_dadd+0x36c>)
 800079a:	08e4      	lsrs	r4, r4, #3
 800079c:	4017      	ands	r7, r2
 800079e:	077b      	lsls	r3, r7, #29
 80007a0:	0571      	lsls	r1, r6, #21
 80007a2:	027f      	lsls	r7, r7, #9
 80007a4:	4323      	orrs	r3, r4
 80007a6:	0b3f      	lsrs	r7, r7, #12
 80007a8:	0d4a      	lsrs	r2, r1, #21
 80007aa:	0512      	lsls	r2, r2, #20
 80007ac:	433a      	orrs	r2, r7
 80007ae:	07ed      	lsls	r5, r5, #31
 80007b0:	432a      	orrs	r2, r5
 80007b2:	0018      	movs	r0, r3
 80007b4:	0011      	movs	r1, r2
 80007b6:	bce0      	pop	{r5, r6, r7}
 80007b8:	46ba      	mov	sl, r7
 80007ba:	46b1      	mov	r9, r6
 80007bc:	46a8      	mov	r8, r5
 80007be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c0:	2c00      	cmp	r4, #0
 80007c2:	d04b      	beq.n	800085c <__aeabi_dadd+0x1e0>
 80007c4:	464c      	mov	r4, r9
 80007c6:	1ba4      	subs	r4, r4, r6
 80007c8:	46a4      	mov	ip, r4
 80007ca:	2e00      	cmp	r6, #0
 80007cc:	d000      	beq.n	80007d0 <__aeabi_dadd+0x154>
 80007ce:	e123      	b.n	8000a18 <__aeabi_dadd+0x39c>
 80007d0:	0004      	movs	r4, r0
 80007d2:	431c      	orrs	r4, r3
 80007d4:	d100      	bne.n	80007d8 <__aeabi_dadd+0x15c>
 80007d6:	e1af      	b.n	8000b38 <__aeabi_dadd+0x4bc>
 80007d8:	4662      	mov	r2, ip
 80007da:	1e54      	subs	r4, r2, #1
 80007dc:	2a01      	cmp	r2, #1
 80007de:	d100      	bne.n	80007e2 <__aeabi_dadd+0x166>
 80007e0:	e215      	b.n	8000c0e <__aeabi_dadd+0x592>
 80007e2:	4d80      	ldr	r5, [pc, #512]	; (80009e4 <__aeabi_dadd+0x368>)
 80007e4:	45ac      	cmp	ip, r5
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x16e>
 80007e8:	e1c8      	b.n	8000b7c <__aeabi_dadd+0x500>
 80007ea:	46a4      	mov	ip, r4
 80007ec:	e11b      	b.n	8000a26 <__aeabi_dadd+0x3aa>
 80007ee:	464a      	mov	r2, r9
 80007f0:	1ab2      	subs	r2, r6, r2
 80007f2:	4694      	mov	ip, r2
 80007f4:	2a00      	cmp	r2, #0
 80007f6:	dc00      	bgt.n	80007fa <__aeabi_dadd+0x17e>
 80007f8:	e0ac      	b.n	8000954 <__aeabi_dadd+0x2d8>
 80007fa:	464a      	mov	r2, r9
 80007fc:	2a00      	cmp	r2, #0
 80007fe:	d043      	beq.n	8000888 <__aeabi_dadd+0x20c>
 8000800:	4a78      	ldr	r2, [pc, #480]	; (80009e4 <__aeabi_dadd+0x368>)
 8000802:	4296      	cmp	r6, r2
 8000804:	d100      	bne.n	8000808 <__aeabi_dadd+0x18c>
 8000806:	e1af      	b.n	8000b68 <__aeabi_dadd+0x4ec>
 8000808:	2280      	movs	r2, #128	; 0x80
 800080a:	003c      	movs	r4, r7
 800080c:	0412      	lsls	r2, r2, #16
 800080e:	4314      	orrs	r4, r2
 8000810:	46a0      	mov	r8, r4
 8000812:	4662      	mov	r2, ip
 8000814:	2a38      	cmp	r2, #56	; 0x38
 8000816:	dc67      	bgt.n	80008e8 <__aeabi_dadd+0x26c>
 8000818:	2a1f      	cmp	r2, #31
 800081a:	dc00      	bgt.n	800081e <__aeabi_dadd+0x1a2>
 800081c:	e15f      	b.n	8000ade <__aeabi_dadd+0x462>
 800081e:	4647      	mov	r7, r8
 8000820:	3a20      	subs	r2, #32
 8000822:	40d7      	lsrs	r7, r2
 8000824:	4662      	mov	r2, ip
 8000826:	2a20      	cmp	r2, #32
 8000828:	d005      	beq.n	8000836 <__aeabi_dadd+0x1ba>
 800082a:	4664      	mov	r4, ip
 800082c:	2240      	movs	r2, #64	; 0x40
 800082e:	1b12      	subs	r2, r2, r4
 8000830:	4644      	mov	r4, r8
 8000832:	4094      	lsls	r4, r2
 8000834:	4321      	orrs	r1, r4
 8000836:	1e4a      	subs	r2, r1, #1
 8000838:	4191      	sbcs	r1, r2
 800083a:	000c      	movs	r4, r1
 800083c:	433c      	orrs	r4, r7
 800083e:	e057      	b.n	80008f0 <__aeabi_dadd+0x274>
 8000840:	003a      	movs	r2, r7
 8000842:	430a      	orrs	r2, r1
 8000844:	d100      	bne.n	8000848 <__aeabi_dadd+0x1cc>
 8000846:	e105      	b.n	8000a54 <__aeabi_dadd+0x3d8>
 8000848:	0022      	movs	r2, r4
 800084a:	3a01      	subs	r2, #1
 800084c:	2c01      	cmp	r4, #1
 800084e:	d100      	bne.n	8000852 <__aeabi_dadd+0x1d6>
 8000850:	e182      	b.n	8000b58 <__aeabi_dadd+0x4dc>
 8000852:	4c64      	ldr	r4, [pc, #400]	; (80009e4 <__aeabi_dadd+0x368>)
 8000854:	45a4      	cmp	ip, r4
 8000856:	d05b      	beq.n	8000910 <__aeabi_dadd+0x294>
 8000858:	4694      	mov	ip, r2
 800085a:	e741      	b.n	80006e0 <__aeabi_dadd+0x64>
 800085c:	4c63      	ldr	r4, [pc, #396]	; (80009ec <__aeabi_dadd+0x370>)
 800085e:	1c77      	adds	r7, r6, #1
 8000860:	4227      	tst	r7, r4
 8000862:	d000      	beq.n	8000866 <__aeabi_dadd+0x1ea>
 8000864:	e0c4      	b.n	80009f0 <__aeabi_dadd+0x374>
 8000866:	0004      	movs	r4, r0
 8000868:	431c      	orrs	r4, r3
 800086a:	2e00      	cmp	r6, #0
 800086c:	d000      	beq.n	8000870 <__aeabi_dadd+0x1f4>
 800086e:	e169      	b.n	8000b44 <__aeabi_dadd+0x4c8>
 8000870:	2c00      	cmp	r4, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_dadd+0x1fa>
 8000874:	e1bf      	b.n	8000bf6 <__aeabi_dadd+0x57a>
 8000876:	4644      	mov	r4, r8
 8000878:	430c      	orrs	r4, r1
 800087a:	d000      	beq.n	800087e <__aeabi_dadd+0x202>
 800087c:	e1d0      	b.n	8000c20 <__aeabi_dadd+0x5a4>
 800087e:	0742      	lsls	r2, r0, #29
 8000880:	08db      	lsrs	r3, r3, #3
 8000882:	4313      	orrs	r3, r2
 8000884:	08c0      	lsrs	r0, r0, #3
 8000886:	e029      	b.n	80008dc <__aeabi_dadd+0x260>
 8000888:	003a      	movs	r2, r7
 800088a:	430a      	orrs	r2, r1
 800088c:	d100      	bne.n	8000890 <__aeabi_dadd+0x214>
 800088e:	e170      	b.n	8000b72 <__aeabi_dadd+0x4f6>
 8000890:	4662      	mov	r2, ip
 8000892:	4664      	mov	r4, ip
 8000894:	3a01      	subs	r2, #1
 8000896:	2c01      	cmp	r4, #1
 8000898:	d100      	bne.n	800089c <__aeabi_dadd+0x220>
 800089a:	e0e0      	b.n	8000a5e <__aeabi_dadd+0x3e2>
 800089c:	4c51      	ldr	r4, [pc, #324]	; (80009e4 <__aeabi_dadd+0x368>)
 800089e:	45a4      	cmp	ip, r4
 80008a0:	d100      	bne.n	80008a4 <__aeabi_dadd+0x228>
 80008a2:	e161      	b.n	8000b68 <__aeabi_dadd+0x4ec>
 80008a4:	4694      	mov	ip, r2
 80008a6:	e7b4      	b.n	8000812 <__aeabi_dadd+0x196>
 80008a8:	003a      	movs	r2, r7
 80008aa:	391f      	subs	r1, #31
 80008ac:	40ca      	lsrs	r2, r1
 80008ae:	0011      	movs	r1, r2
 80008b0:	2b20      	cmp	r3, #32
 80008b2:	d003      	beq.n	80008bc <__aeabi_dadd+0x240>
 80008b4:	2240      	movs	r2, #64	; 0x40
 80008b6:	1ad3      	subs	r3, r2, r3
 80008b8:	409f      	lsls	r7, r3
 80008ba:	433c      	orrs	r4, r7
 80008bc:	1e63      	subs	r3, r4, #1
 80008be:	419c      	sbcs	r4, r3
 80008c0:	2700      	movs	r7, #0
 80008c2:	2600      	movs	r6, #0
 80008c4:	430c      	orrs	r4, r1
 80008c6:	0763      	lsls	r3, r4, #29
 80008c8:	d000      	beq.n	80008cc <__aeabi_dadd+0x250>
 80008ca:	e753      	b.n	8000774 <__aeabi_dadd+0xf8>
 80008cc:	46b4      	mov	ip, r6
 80008ce:	08e4      	lsrs	r4, r4, #3
 80008d0:	077b      	lsls	r3, r7, #29
 80008d2:	4323      	orrs	r3, r4
 80008d4:	08f8      	lsrs	r0, r7, #3
 80008d6:	4a43      	ldr	r2, [pc, #268]	; (80009e4 <__aeabi_dadd+0x368>)
 80008d8:	4594      	cmp	ip, r2
 80008da:	d01d      	beq.n	8000918 <__aeabi_dadd+0x29c>
 80008dc:	4662      	mov	r2, ip
 80008de:	0307      	lsls	r7, r0, #12
 80008e0:	0552      	lsls	r2, r2, #21
 80008e2:	0b3f      	lsrs	r7, r7, #12
 80008e4:	0d52      	lsrs	r2, r2, #21
 80008e6:	e760      	b.n	80007aa <__aeabi_dadd+0x12e>
 80008e8:	4644      	mov	r4, r8
 80008ea:	430c      	orrs	r4, r1
 80008ec:	1e62      	subs	r2, r4, #1
 80008ee:	4194      	sbcs	r4, r2
 80008f0:	18e4      	adds	r4, r4, r3
 80008f2:	429c      	cmp	r4, r3
 80008f4:	419b      	sbcs	r3, r3
 80008f6:	425f      	negs	r7, r3
 80008f8:	183f      	adds	r7, r7, r0
 80008fa:	023b      	lsls	r3, r7, #8
 80008fc:	d5e3      	bpl.n	80008c6 <__aeabi_dadd+0x24a>
 80008fe:	4b39      	ldr	r3, [pc, #228]	; (80009e4 <__aeabi_dadd+0x368>)
 8000900:	3601      	adds	r6, #1
 8000902:	429e      	cmp	r6, r3
 8000904:	d000      	beq.n	8000908 <__aeabi_dadd+0x28c>
 8000906:	e0b5      	b.n	8000a74 <__aeabi_dadd+0x3f8>
 8000908:	0032      	movs	r2, r6
 800090a:	2700      	movs	r7, #0
 800090c:	2300      	movs	r3, #0
 800090e:	e74c      	b.n	80007aa <__aeabi_dadd+0x12e>
 8000910:	0742      	lsls	r2, r0, #29
 8000912:	08db      	lsrs	r3, r3, #3
 8000914:	4313      	orrs	r3, r2
 8000916:	08c0      	lsrs	r0, r0, #3
 8000918:	001a      	movs	r2, r3
 800091a:	4302      	orrs	r2, r0
 800091c:	d100      	bne.n	8000920 <__aeabi_dadd+0x2a4>
 800091e:	e1e1      	b.n	8000ce4 <__aeabi_dadd+0x668>
 8000920:	2780      	movs	r7, #128	; 0x80
 8000922:	033f      	lsls	r7, r7, #12
 8000924:	4307      	orrs	r7, r0
 8000926:	033f      	lsls	r7, r7, #12
 8000928:	4a2e      	ldr	r2, [pc, #184]	; (80009e4 <__aeabi_dadd+0x368>)
 800092a:	0b3f      	lsrs	r7, r7, #12
 800092c:	e73d      	b.n	80007aa <__aeabi_dadd+0x12e>
 800092e:	0020      	movs	r0, r4
 8000930:	f001 fc8a 	bl	8002248 <__clzsi2>
 8000934:	0001      	movs	r1, r0
 8000936:	3118      	adds	r1, #24
 8000938:	291f      	cmp	r1, #31
 800093a:	dc00      	bgt.n	800093e <__aeabi_dadd+0x2c2>
 800093c:	e6fc      	b.n	8000738 <__aeabi_dadd+0xbc>
 800093e:	3808      	subs	r0, #8
 8000940:	4084      	lsls	r4, r0
 8000942:	0027      	movs	r7, r4
 8000944:	2400      	movs	r4, #0
 8000946:	42b1      	cmp	r1, r6
 8000948:	db00      	blt.n	800094c <__aeabi_dadd+0x2d0>
 800094a:	e6ff      	b.n	800074c <__aeabi_dadd+0xd0>
 800094c:	4a26      	ldr	r2, [pc, #152]	; (80009e8 <__aeabi_dadd+0x36c>)
 800094e:	1a76      	subs	r6, r6, r1
 8000950:	4017      	ands	r7, r2
 8000952:	e70d      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000954:	2a00      	cmp	r2, #0
 8000956:	d02f      	beq.n	80009b8 <__aeabi_dadd+0x33c>
 8000958:	464a      	mov	r2, r9
 800095a:	1b92      	subs	r2, r2, r6
 800095c:	4694      	mov	ip, r2
 800095e:	2e00      	cmp	r6, #0
 8000960:	d100      	bne.n	8000964 <__aeabi_dadd+0x2e8>
 8000962:	e0ad      	b.n	8000ac0 <__aeabi_dadd+0x444>
 8000964:	4a1f      	ldr	r2, [pc, #124]	; (80009e4 <__aeabi_dadd+0x368>)
 8000966:	4591      	cmp	r9, r2
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x2f0>
 800096a:	e10f      	b.n	8000b8c <__aeabi_dadd+0x510>
 800096c:	2280      	movs	r2, #128	; 0x80
 800096e:	0412      	lsls	r2, r2, #16
 8000970:	4310      	orrs	r0, r2
 8000972:	4662      	mov	r2, ip
 8000974:	2a38      	cmp	r2, #56	; 0x38
 8000976:	dd00      	ble.n	800097a <__aeabi_dadd+0x2fe>
 8000978:	e10f      	b.n	8000b9a <__aeabi_dadd+0x51e>
 800097a:	2a1f      	cmp	r2, #31
 800097c:	dd00      	ble.n	8000980 <__aeabi_dadd+0x304>
 800097e:	e180      	b.n	8000c82 <__aeabi_dadd+0x606>
 8000980:	4664      	mov	r4, ip
 8000982:	2220      	movs	r2, #32
 8000984:	001e      	movs	r6, r3
 8000986:	1b12      	subs	r2, r2, r4
 8000988:	4667      	mov	r7, ip
 800098a:	0004      	movs	r4, r0
 800098c:	4093      	lsls	r3, r2
 800098e:	4094      	lsls	r4, r2
 8000990:	40fe      	lsrs	r6, r7
 8000992:	1e5a      	subs	r2, r3, #1
 8000994:	4193      	sbcs	r3, r2
 8000996:	40f8      	lsrs	r0, r7
 8000998:	4334      	orrs	r4, r6
 800099a:	431c      	orrs	r4, r3
 800099c:	4480      	add	r8, r0
 800099e:	1864      	adds	r4, r4, r1
 80009a0:	428c      	cmp	r4, r1
 80009a2:	41bf      	sbcs	r7, r7
 80009a4:	427f      	negs	r7, r7
 80009a6:	464e      	mov	r6, r9
 80009a8:	4447      	add	r7, r8
 80009aa:	e7a6      	b.n	80008fa <__aeabi_dadd+0x27e>
 80009ac:	4642      	mov	r2, r8
 80009ae:	430a      	orrs	r2, r1
 80009b0:	0011      	movs	r1, r2
 80009b2:	1e4a      	subs	r2, r1, #1
 80009b4:	4191      	sbcs	r1, r2
 80009b6:	e6ad      	b.n	8000714 <__aeabi_dadd+0x98>
 80009b8:	4c0c      	ldr	r4, [pc, #48]	; (80009ec <__aeabi_dadd+0x370>)
 80009ba:	1c72      	adds	r2, r6, #1
 80009bc:	4222      	tst	r2, r4
 80009be:	d000      	beq.n	80009c2 <__aeabi_dadd+0x346>
 80009c0:	e0a1      	b.n	8000b06 <__aeabi_dadd+0x48a>
 80009c2:	0002      	movs	r2, r0
 80009c4:	431a      	orrs	r2, r3
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d000      	beq.n	80009cc <__aeabi_dadd+0x350>
 80009ca:	e0fa      	b.n	8000bc2 <__aeabi_dadd+0x546>
 80009cc:	2a00      	cmp	r2, #0
 80009ce:	d100      	bne.n	80009d2 <__aeabi_dadd+0x356>
 80009d0:	e145      	b.n	8000c5e <__aeabi_dadd+0x5e2>
 80009d2:	003a      	movs	r2, r7
 80009d4:	430a      	orrs	r2, r1
 80009d6:	d000      	beq.n	80009da <__aeabi_dadd+0x35e>
 80009d8:	e146      	b.n	8000c68 <__aeabi_dadd+0x5ec>
 80009da:	0742      	lsls	r2, r0, #29
 80009dc:	08db      	lsrs	r3, r3, #3
 80009de:	4313      	orrs	r3, r2
 80009e0:	08c0      	lsrs	r0, r0, #3
 80009e2:	e77b      	b.n	80008dc <__aeabi_dadd+0x260>
 80009e4:	000007ff 	.word	0x000007ff
 80009e8:	ff7fffff 	.word	0xff7fffff
 80009ec:	000007fe 	.word	0x000007fe
 80009f0:	4647      	mov	r7, r8
 80009f2:	1a5c      	subs	r4, r3, r1
 80009f4:	1bc2      	subs	r2, r0, r7
 80009f6:	42a3      	cmp	r3, r4
 80009f8:	41bf      	sbcs	r7, r7
 80009fa:	427f      	negs	r7, r7
 80009fc:	46b9      	mov	r9, r7
 80009fe:	0017      	movs	r7, r2
 8000a00:	464a      	mov	r2, r9
 8000a02:	1abf      	subs	r7, r7, r2
 8000a04:	023a      	lsls	r2, r7, #8
 8000a06:	d500      	bpl.n	8000a0a <__aeabi_dadd+0x38e>
 8000a08:	e08d      	b.n	8000b26 <__aeabi_dadd+0x4aa>
 8000a0a:	0023      	movs	r3, r4
 8000a0c:	433b      	orrs	r3, r7
 8000a0e:	d000      	beq.n	8000a12 <__aeabi_dadd+0x396>
 8000a10:	e68a      	b.n	8000728 <__aeabi_dadd+0xac>
 8000a12:	2000      	movs	r0, #0
 8000a14:	2500      	movs	r5, #0
 8000a16:	e761      	b.n	80008dc <__aeabi_dadd+0x260>
 8000a18:	4cb4      	ldr	r4, [pc, #720]	; (8000cec <__aeabi_dadd+0x670>)
 8000a1a:	45a1      	cmp	r9, r4
 8000a1c:	d100      	bne.n	8000a20 <__aeabi_dadd+0x3a4>
 8000a1e:	e0ad      	b.n	8000b7c <__aeabi_dadd+0x500>
 8000a20:	2480      	movs	r4, #128	; 0x80
 8000a22:	0424      	lsls	r4, r4, #16
 8000a24:	4320      	orrs	r0, r4
 8000a26:	4664      	mov	r4, ip
 8000a28:	2c38      	cmp	r4, #56	; 0x38
 8000a2a:	dc3d      	bgt.n	8000aa8 <__aeabi_dadd+0x42c>
 8000a2c:	4662      	mov	r2, ip
 8000a2e:	2c1f      	cmp	r4, #31
 8000a30:	dd00      	ble.n	8000a34 <__aeabi_dadd+0x3b8>
 8000a32:	e0b7      	b.n	8000ba4 <__aeabi_dadd+0x528>
 8000a34:	2520      	movs	r5, #32
 8000a36:	001e      	movs	r6, r3
 8000a38:	1b2d      	subs	r5, r5, r4
 8000a3a:	0004      	movs	r4, r0
 8000a3c:	40ab      	lsls	r3, r5
 8000a3e:	40ac      	lsls	r4, r5
 8000a40:	40d6      	lsrs	r6, r2
 8000a42:	40d0      	lsrs	r0, r2
 8000a44:	4642      	mov	r2, r8
 8000a46:	1e5d      	subs	r5, r3, #1
 8000a48:	41ab      	sbcs	r3, r5
 8000a4a:	4334      	orrs	r4, r6
 8000a4c:	1a12      	subs	r2, r2, r0
 8000a4e:	4690      	mov	r8, r2
 8000a50:	4323      	orrs	r3, r4
 8000a52:	e02c      	b.n	8000aae <__aeabi_dadd+0x432>
 8000a54:	0742      	lsls	r2, r0, #29
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	08c0      	lsrs	r0, r0, #3
 8000a5c:	e73b      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000a5e:	185c      	adds	r4, r3, r1
 8000a60:	429c      	cmp	r4, r3
 8000a62:	419b      	sbcs	r3, r3
 8000a64:	4440      	add	r0, r8
 8000a66:	425b      	negs	r3, r3
 8000a68:	18c7      	adds	r7, r0, r3
 8000a6a:	2601      	movs	r6, #1
 8000a6c:	023b      	lsls	r3, r7, #8
 8000a6e:	d400      	bmi.n	8000a72 <__aeabi_dadd+0x3f6>
 8000a70:	e729      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000a72:	2602      	movs	r6, #2
 8000a74:	4a9e      	ldr	r2, [pc, #632]	; (8000cf0 <__aeabi_dadd+0x674>)
 8000a76:	0863      	lsrs	r3, r4, #1
 8000a78:	4017      	ands	r7, r2
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4014      	ands	r4, r2
 8000a7e:	431c      	orrs	r4, r3
 8000a80:	07fb      	lsls	r3, r7, #31
 8000a82:	431c      	orrs	r4, r3
 8000a84:	087f      	lsrs	r7, r7, #1
 8000a86:	e673      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000a88:	4644      	mov	r4, r8
 8000a8a:	3a20      	subs	r2, #32
 8000a8c:	40d4      	lsrs	r4, r2
 8000a8e:	4662      	mov	r2, ip
 8000a90:	2a20      	cmp	r2, #32
 8000a92:	d005      	beq.n	8000aa0 <__aeabi_dadd+0x424>
 8000a94:	4667      	mov	r7, ip
 8000a96:	2240      	movs	r2, #64	; 0x40
 8000a98:	1bd2      	subs	r2, r2, r7
 8000a9a:	4647      	mov	r7, r8
 8000a9c:	4097      	lsls	r7, r2
 8000a9e:	4339      	orrs	r1, r7
 8000aa0:	1e4a      	subs	r2, r1, #1
 8000aa2:	4191      	sbcs	r1, r2
 8000aa4:	4321      	orrs	r1, r4
 8000aa6:	e635      	b.n	8000714 <__aeabi_dadd+0x98>
 8000aa8:	4303      	orrs	r3, r0
 8000aaa:	1e58      	subs	r0, r3, #1
 8000aac:	4183      	sbcs	r3, r0
 8000aae:	1acc      	subs	r4, r1, r3
 8000ab0:	42a1      	cmp	r1, r4
 8000ab2:	41bf      	sbcs	r7, r7
 8000ab4:	4643      	mov	r3, r8
 8000ab6:	427f      	negs	r7, r7
 8000ab8:	4655      	mov	r5, sl
 8000aba:	464e      	mov	r6, r9
 8000abc:	1bdf      	subs	r7, r3, r7
 8000abe:	e62e      	b.n	800071e <__aeabi_dadd+0xa2>
 8000ac0:	0002      	movs	r2, r0
 8000ac2:	431a      	orrs	r2, r3
 8000ac4:	d100      	bne.n	8000ac8 <__aeabi_dadd+0x44c>
 8000ac6:	e0bd      	b.n	8000c44 <__aeabi_dadd+0x5c8>
 8000ac8:	4662      	mov	r2, ip
 8000aca:	4664      	mov	r4, ip
 8000acc:	3a01      	subs	r2, #1
 8000ace:	2c01      	cmp	r4, #1
 8000ad0:	d100      	bne.n	8000ad4 <__aeabi_dadd+0x458>
 8000ad2:	e0e5      	b.n	8000ca0 <__aeabi_dadd+0x624>
 8000ad4:	4c85      	ldr	r4, [pc, #532]	; (8000cec <__aeabi_dadd+0x670>)
 8000ad6:	45a4      	cmp	ip, r4
 8000ad8:	d058      	beq.n	8000b8c <__aeabi_dadd+0x510>
 8000ada:	4694      	mov	ip, r2
 8000adc:	e749      	b.n	8000972 <__aeabi_dadd+0x2f6>
 8000ade:	4664      	mov	r4, ip
 8000ae0:	2220      	movs	r2, #32
 8000ae2:	1b12      	subs	r2, r2, r4
 8000ae4:	4644      	mov	r4, r8
 8000ae6:	4094      	lsls	r4, r2
 8000ae8:	000f      	movs	r7, r1
 8000aea:	46a1      	mov	r9, r4
 8000aec:	4664      	mov	r4, ip
 8000aee:	4091      	lsls	r1, r2
 8000af0:	40e7      	lsrs	r7, r4
 8000af2:	464c      	mov	r4, r9
 8000af4:	1e4a      	subs	r2, r1, #1
 8000af6:	4191      	sbcs	r1, r2
 8000af8:	433c      	orrs	r4, r7
 8000afa:	4642      	mov	r2, r8
 8000afc:	430c      	orrs	r4, r1
 8000afe:	4661      	mov	r1, ip
 8000b00:	40ca      	lsrs	r2, r1
 8000b02:	1880      	adds	r0, r0, r2
 8000b04:	e6f4      	b.n	80008f0 <__aeabi_dadd+0x274>
 8000b06:	4c79      	ldr	r4, [pc, #484]	; (8000cec <__aeabi_dadd+0x670>)
 8000b08:	42a2      	cmp	r2, r4
 8000b0a:	d100      	bne.n	8000b0e <__aeabi_dadd+0x492>
 8000b0c:	e6fd      	b.n	800090a <__aeabi_dadd+0x28e>
 8000b0e:	1859      	adds	r1, r3, r1
 8000b10:	4299      	cmp	r1, r3
 8000b12:	419b      	sbcs	r3, r3
 8000b14:	4440      	add	r0, r8
 8000b16:	425f      	negs	r7, r3
 8000b18:	19c7      	adds	r7, r0, r7
 8000b1a:	07fc      	lsls	r4, r7, #31
 8000b1c:	0849      	lsrs	r1, r1, #1
 8000b1e:	0016      	movs	r6, r2
 8000b20:	430c      	orrs	r4, r1
 8000b22:	087f      	lsrs	r7, r7, #1
 8000b24:	e6cf      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000b26:	1acc      	subs	r4, r1, r3
 8000b28:	42a1      	cmp	r1, r4
 8000b2a:	41bf      	sbcs	r7, r7
 8000b2c:	4643      	mov	r3, r8
 8000b2e:	427f      	negs	r7, r7
 8000b30:	1a18      	subs	r0, r3, r0
 8000b32:	4655      	mov	r5, sl
 8000b34:	1bc7      	subs	r7, r0, r7
 8000b36:	e5f7      	b.n	8000728 <__aeabi_dadd+0xac>
 8000b38:	08c9      	lsrs	r1, r1, #3
 8000b3a:	077b      	lsls	r3, r7, #29
 8000b3c:	4655      	mov	r5, sl
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	08f8      	lsrs	r0, r7, #3
 8000b42:	e6c8      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000b44:	2c00      	cmp	r4, #0
 8000b46:	d000      	beq.n	8000b4a <__aeabi_dadd+0x4ce>
 8000b48:	e081      	b.n	8000c4e <__aeabi_dadd+0x5d2>
 8000b4a:	4643      	mov	r3, r8
 8000b4c:	430b      	orrs	r3, r1
 8000b4e:	d115      	bne.n	8000b7c <__aeabi_dadd+0x500>
 8000b50:	2080      	movs	r0, #128	; 0x80
 8000b52:	2500      	movs	r5, #0
 8000b54:	0300      	lsls	r0, r0, #12
 8000b56:	e6e3      	b.n	8000920 <__aeabi_dadd+0x2a4>
 8000b58:	1a5c      	subs	r4, r3, r1
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	419b      	sbcs	r3, r3
 8000b5e:	1bc7      	subs	r7, r0, r7
 8000b60:	425b      	negs	r3, r3
 8000b62:	2601      	movs	r6, #1
 8000b64:	1aff      	subs	r7, r7, r3
 8000b66:	e5da      	b.n	800071e <__aeabi_dadd+0xa2>
 8000b68:	0742      	lsls	r2, r0, #29
 8000b6a:	08db      	lsrs	r3, r3, #3
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	08c0      	lsrs	r0, r0, #3
 8000b70:	e6d2      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000b72:	0742      	lsls	r2, r0, #29
 8000b74:	08db      	lsrs	r3, r3, #3
 8000b76:	4313      	orrs	r3, r2
 8000b78:	08c0      	lsrs	r0, r0, #3
 8000b7a:	e6ac      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000b7c:	4643      	mov	r3, r8
 8000b7e:	4642      	mov	r2, r8
 8000b80:	08c9      	lsrs	r1, r1, #3
 8000b82:	075b      	lsls	r3, r3, #29
 8000b84:	4655      	mov	r5, sl
 8000b86:	430b      	orrs	r3, r1
 8000b88:	08d0      	lsrs	r0, r2, #3
 8000b8a:	e6c5      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000b8c:	4643      	mov	r3, r8
 8000b8e:	4642      	mov	r2, r8
 8000b90:	075b      	lsls	r3, r3, #29
 8000b92:	08c9      	lsrs	r1, r1, #3
 8000b94:	430b      	orrs	r3, r1
 8000b96:	08d0      	lsrs	r0, r2, #3
 8000b98:	e6be      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000b9a:	4303      	orrs	r3, r0
 8000b9c:	001c      	movs	r4, r3
 8000b9e:	1e63      	subs	r3, r4, #1
 8000ba0:	419c      	sbcs	r4, r3
 8000ba2:	e6fc      	b.n	800099e <__aeabi_dadd+0x322>
 8000ba4:	0002      	movs	r2, r0
 8000ba6:	3c20      	subs	r4, #32
 8000ba8:	40e2      	lsrs	r2, r4
 8000baa:	0014      	movs	r4, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	2a20      	cmp	r2, #32
 8000bb0:	d003      	beq.n	8000bba <__aeabi_dadd+0x53e>
 8000bb2:	2540      	movs	r5, #64	; 0x40
 8000bb4:	1aad      	subs	r5, r5, r2
 8000bb6:	40a8      	lsls	r0, r5
 8000bb8:	4303      	orrs	r3, r0
 8000bba:	1e58      	subs	r0, r3, #1
 8000bbc:	4183      	sbcs	r3, r0
 8000bbe:	4323      	orrs	r3, r4
 8000bc0:	e775      	b.n	8000aae <__aeabi_dadd+0x432>
 8000bc2:	2a00      	cmp	r2, #0
 8000bc4:	d0e2      	beq.n	8000b8c <__aeabi_dadd+0x510>
 8000bc6:	003a      	movs	r2, r7
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	d0cd      	beq.n	8000b68 <__aeabi_dadd+0x4ec>
 8000bcc:	0742      	lsls	r2, r0, #29
 8000bce:	08db      	lsrs	r3, r3, #3
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	08c0      	lsrs	r0, r0, #3
 8000bd6:	0312      	lsls	r2, r2, #12
 8000bd8:	4210      	tst	r0, r2
 8000bda:	d006      	beq.n	8000bea <__aeabi_dadd+0x56e>
 8000bdc:	08fc      	lsrs	r4, r7, #3
 8000bde:	4214      	tst	r4, r2
 8000be0:	d103      	bne.n	8000bea <__aeabi_dadd+0x56e>
 8000be2:	0020      	movs	r0, r4
 8000be4:	08cb      	lsrs	r3, r1, #3
 8000be6:	077a      	lsls	r2, r7, #29
 8000be8:	4313      	orrs	r3, r2
 8000bea:	0f5a      	lsrs	r2, r3, #29
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	0752      	lsls	r2, r2, #29
 8000bf0:	08db      	lsrs	r3, r3, #3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	e690      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	430b      	orrs	r3, r1
 8000bfa:	d100      	bne.n	8000bfe <__aeabi_dadd+0x582>
 8000bfc:	e709      	b.n	8000a12 <__aeabi_dadd+0x396>
 8000bfe:	4643      	mov	r3, r8
 8000c00:	4642      	mov	r2, r8
 8000c02:	08c9      	lsrs	r1, r1, #3
 8000c04:	075b      	lsls	r3, r3, #29
 8000c06:	4655      	mov	r5, sl
 8000c08:	430b      	orrs	r3, r1
 8000c0a:	08d0      	lsrs	r0, r2, #3
 8000c0c:	e666      	b.n	80008dc <__aeabi_dadd+0x260>
 8000c0e:	1acc      	subs	r4, r1, r3
 8000c10:	42a1      	cmp	r1, r4
 8000c12:	4189      	sbcs	r1, r1
 8000c14:	1a3f      	subs	r7, r7, r0
 8000c16:	4249      	negs	r1, r1
 8000c18:	4655      	mov	r5, sl
 8000c1a:	2601      	movs	r6, #1
 8000c1c:	1a7f      	subs	r7, r7, r1
 8000c1e:	e57e      	b.n	800071e <__aeabi_dadd+0xa2>
 8000c20:	4642      	mov	r2, r8
 8000c22:	1a5c      	subs	r4, r3, r1
 8000c24:	1a87      	subs	r7, r0, r2
 8000c26:	42a3      	cmp	r3, r4
 8000c28:	4192      	sbcs	r2, r2
 8000c2a:	4252      	negs	r2, r2
 8000c2c:	1abf      	subs	r7, r7, r2
 8000c2e:	023a      	lsls	r2, r7, #8
 8000c30:	d53d      	bpl.n	8000cae <__aeabi_dadd+0x632>
 8000c32:	1acc      	subs	r4, r1, r3
 8000c34:	42a1      	cmp	r1, r4
 8000c36:	4189      	sbcs	r1, r1
 8000c38:	4643      	mov	r3, r8
 8000c3a:	4249      	negs	r1, r1
 8000c3c:	1a1f      	subs	r7, r3, r0
 8000c3e:	4655      	mov	r5, sl
 8000c40:	1a7f      	subs	r7, r7, r1
 8000c42:	e595      	b.n	8000770 <__aeabi_dadd+0xf4>
 8000c44:	077b      	lsls	r3, r7, #29
 8000c46:	08c9      	lsrs	r1, r1, #3
 8000c48:	430b      	orrs	r3, r1
 8000c4a:	08f8      	lsrs	r0, r7, #3
 8000c4c:	e643      	b.n	80008d6 <__aeabi_dadd+0x25a>
 8000c4e:	4644      	mov	r4, r8
 8000c50:	08db      	lsrs	r3, r3, #3
 8000c52:	430c      	orrs	r4, r1
 8000c54:	d130      	bne.n	8000cb8 <__aeabi_dadd+0x63c>
 8000c56:	0742      	lsls	r2, r0, #29
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	08c0      	lsrs	r0, r0, #3
 8000c5c:	e65c      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000c5e:	077b      	lsls	r3, r7, #29
 8000c60:	08c9      	lsrs	r1, r1, #3
 8000c62:	430b      	orrs	r3, r1
 8000c64:	08f8      	lsrs	r0, r7, #3
 8000c66:	e639      	b.n	80008dc <__aeabi_dadd+0x260>
 8000c68:	185c      	adds	r4, r3, r1
 8000c6a:	429c      	cmp	r4, r3
 8000c6c:	419b      	sbcs	r3, r3
 8000c6e:	4440      	add	r0, r8
 8000c70:	425b      	negs	r3, r3
 8000c72:	18c7      	adds	r7, r0, r3
 8000c74:	023b      	lsls	r3, r7, #8
 8000c76:	d400      	bmi.n	8000c7a <__aeabi_dadd+0x5fe>
 8000c78:	e625      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <__aeabi_dadd+0x674>)
 8000c7c:	2601      	movs	r6, #1
 8000c7e:	401f      	ands	r7, r3
 8000c80:	e621      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000c82:	0004      	movs	r4, r0
 8000c84:	3a20      	subs	r2, #32
 8000c86:	40d4      	lsrs	r4, r2
 8000c88:	4662      	mov	r2, ip
 8000c8a:	2a20      	cmp	r2, #32
 8000c8c:	d004      	beq.n	8000c98 <__aeabi_dadd+0x61c>
 8000c8e:	2240      	movs	r2, #64	; 0x40
 8000c90:	4666      	mov	r6, ip
 8000c92:	1b92      	subs	r2, r2, r6
 8000c94:	4090      	lsls	r0, r2
 8000c96:	4303      	orrs	r3, r0
 8000c98:	1e5a      	subs	r2, r3, #1
 8000c9a:	4193      	sbcs	r3, r2
 8000c9c:	431c      	orrs	r4, r3
 8000c9e:	e67e      	b.n	800099e <__aeabi_dadd+0x322>
 8000ca0:	185c      	adds	r4, r3, r1
 8000ca2:	428c      	cmp	r4, r1
 8000ca4:	4189      	sbcs	r1, r1
 8000ca6:	4440      	add	r0, r8
 8000ca8:	4249      	negs	r1, r1
 8000caa:	1847      	adds	r7, r0, r1
 8000cac:	e6dd      	b.n	8000a6a <__aeabi_dadd+0x3ee>
 8000cae:	0023      	movs	r3, r4
 8000cb0:	433b      	orrs	r3, r7
 8000cb2:	d100      	bne.n	8000cb6 <__aeabi_dadd+0x63a>
 8000cb4:	e6ad      	b.n	8000a12 <__aeabi_dadd+0x396>
 8000cb6:	e606      	b.n	80008c6 <__aeabi_dadd+0x24a>
 8000cb8:	0744      	lsls	r4, r0, #29
 8000cba:	4323      	orrs	r3, r4
 8000cbc:	2480      	movs	r4, #128	; 0x80
 8000cbe:	08c0      	lsrs	r0, r0, #3
 8000cc0:	0324      	lsls	r4, r4, #12
 8000cc2:	4220      	tst	r0, r4
 8000cc4:	d008      	beq.n	8000cd8 <__aeabi_dadd+0x65c>
 8000cc6:	4642      	mov	r2, r8
 8000cc8:	08d6      	lsrs	r6, r2, #3
 8000cca:	4226      	tst	r6, r4
 8000ccc:	d104      	bne.n	8000cd8 <__aeabi_dadd+0x65c>
 8000cce:	4655      	mov	r5, sl
 8000cd0:	0030      	movs	r0, r6
 8000cd2:	08cb      	lsrs	r3, r1, #3
 8000cd4:	0751      	lsls	r1, r2, #29
 8000cd6:	430b      	orrs	r3, r1
 8000cd8:	0f5a      	lsrs	r2, r3, #29
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	08db      	lsrs	r3, r3, #3
 8000cde:	0752      	lsls	r2, r2, #29
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	e619      	b.n	8000918 <__aeabi_dadd+0x29c>
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	4a01      	ldr	r2, [pc, #4]	; (8000cec <__aeabi_dadd+0x670>)
 8000ce8:	001f      	movs	r7, r3
 8000cea:	e55e      	b.n	80007aa <__aeabi_dadd+0x12e>
 8000cec:	000007ff 	.word	0x000007ff
 8000cf0:	ff7fffff 	.word	0xff7fffff

08000cf4 <__aeabi_ddiv>:
 8000cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cf6:	4657      	mov	r7, sl
 8000cf8:	464e      	mov	r6, r9
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	46de      	mov	lr, fp
 8000cfe:	b5e0      	push	{r5, r6, r7, lr}
 8000d00:	4681      	mov	r9, r0
 8000d02:	0005      	movs	r5, r0
 8000d04:	030c      	lsls	r4, r1, #12
 8000d06:	0048      	lsls	r0, r1, #1
 8000d08:	4692      	mov	sl, r2
 8000d0a:	001f      	movs	r7, r3
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	0b24      	lsrs	r4, r4, #12
 8000d10:	0d40      	lsrs	r0, r0, #21
 8000d12:	0fce      	lsrs	r6, r1, #31
 8000d14:	2800      	cmp	r0, #0
 8000d16:	d100      	bne.n	8000d1a <__aeabi_ddiv+0x26>
 8000d18:	e156      	b.n	8000fc8 <__aeabi_ddiv+0x2d4>
 8000d1a:	4bd4      	ldr	r3, [pc, #848]	; (800106c <__aeabi_ddiv+0x378>)
 8000d1c:	4298      	cmp	r0, r3
 8000d1e:	d100      	bne.n	8000d22 <__aeabi_ddiv+0x2e>
 8000d20:	e172      	b.n	8001008 <__aeabi_ddiv+0x314>
 8000d22:	0f6b      	lsrs	r3, r5, #29
 8000d24:	00e4      	lsls	r4, r4, #3
 8000d26:	431c      	orrs	r4, r3
 8000d28:	2380      	movs	r3, #128	; 0x80
 8000d2a:	041b      	lsls	r3, r3, #16
 8000d2c:	4323      	orrs	r3, r4
 8000d2e:	4698      	mov	r8, r3
 8000d30:	4bcf      	ldr	r3, [pc, #828]	; (8001070 <__aeabi_ddiv+0x37c>)
 8000d32:	00ed      	lsls	r5, r5, #3
 8000d34:	469b      	mov	fp, r3
 8000d36:	2300      	movs	r3, #0
 8000d38:	4699      	mov	r9, r3
 8000d3a:	4483      	add	fp, r0
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	033c      	lsls	r4, r7, #12
 8000d40:	007b      	lsls	r3, r7, #1
 8000d42:	4650      	mov	r0, sl
 8000d44:	0b24      	lsrs	r4, r4, #12
 8000d46:	0d5b      	lsrs	r3, r3, #21
 8000d48:	0fff      	lsrs	r7, r7, #31
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_ddiv+0x5c>
 8000d4e:	e11f      	b.n	8000f90 <__aeabi_ddiv+0x29c>
 8000d50:	4ac6      	ldr	r2, [pc, #792]	; (800106c <__aeabi_ddiv+0x378>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d100      	bne.n	8000d58 <__aeabi_ddiv+0x64>
 8000d56:	e162      	b.n	800101e <__aeabi_ddiv+0x32a>
 8000d58:	49c5      	ldr	r1, [pc, #788]	; (8001070 <__aeabi_ddiv+0x37c>)
 8000d5a:	0f42      	lsrs	r2, r0, #29
 8000d5c:	468c      	mov	ip, r1
 8000d5e:	00e4      	lsls	r4, r4, #3
 8000d60:	4659      	mov	r1, fp
 8000d62:	4314      	orrs	r4, r2
 8000d64:	2280      	movs	r2, #128	; 0x80
 8000d66:	4463      	add	r3, ip
 8000d68:	0412      	lsls	r2, r2, #16
 8000d6a:	1acb      	subs	r3, r1, r3
 8000d6c:	4314      	orrs	r4, r2
 8000d6e:	469b      	mov	fp, r3
 8000d70:	00c2      	lsls	r2, r0, #3
 8000d72:	2000      	movs	r0, #0
 8000d74:	0033      	movs	r3, r6
 8000d76:	407b      	eors	r3, r7
 8000d78:	469a      	mov	sl, r3
 8000d7a:	464b      	mov	r3, r9
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d827      	bhi.n	8000dd0 <__aeabi_ddiv+0xdc>
 8000d80:	49bc      	ldr	r1, [pc, #752]	; (8001074 <__aeabi_ddiv+0x380>)
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	58cb      	ldr	r3, [r1, r3]
 8000d86:	469f      	mov	pc, r3
 8000d88:	46b2      	mov	sl, r6
 8000d8a:	9b00      	ldr	r3, [sp, #0]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d016      	beq.n	8000dbe <__aeabi_ddiv+0xca>
 8000d90:	2b03      	cmp	r3, #3
 8000d92:	d100      	bne.n	8000d96 <__aeabi_ddiv+0xa2>
 8000d94:	e28e      	b.n	80012b4 <__aeabi_ddiv+0x5c0>
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d000      	beq.n	8000d9c <__aeabi_ddiv+0xa8>
 8000d9a:	e0d9      	b.n	8000f50 <__aeabi_ddiv+0x25c>
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	2400      	movs	r4, #0
 8000da0:	2500      	movs	r5, #0
 8000da2:	4652      	mov	r2, sl
 8000da4:	051b      	lsls	r3, r3, #20
 8000da6:	4323      	orrs	r3, r4
 8000da8:	07d2      	lsls	r2, r2, #31
 8000daa:	4313      	orrs	r3, r2
 8000dac:	0028      	movs	r0, r5
 8000dae:	0019      	movs	r1, r3
 8000db0:	b005      	add	sp, #20
 8000db2:	bcf0      	pop	{r4, r5, r6, r7}
 8000db4:	46bb      	mov	fp, r7
 8000db6:	46b2      	mov	sl, r6
 8000db8:	46a9      	mov	r9, r5
 8000dba:	46a0      	mov	r8, r4
 8000dbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dbe:	2400      	movs	r4, #0
 8000dc0:	2500      	movs	r5, #0
 8000dc2:	4baa      	ldr	r3, [pc, #680]	; (800106c <__aeabi_ddiv+0x378>)
 8000dc4:	e7ed      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8000dc6:	46ba      	mov	sl, r7
 8000dc8:	46a0      	mov	r8, r4
 8000dca:	0015      	movs	r5, r2
 8000dcc:	9000      	str	r0, [sp, #0]
 8000dce:	e7dc      	b.n	8000d8a <__aeabi_ddiv+0x96>
 8000dd0:	4544      	cmp	r4, r8
 8000dd2:	d200      	bcs.n	8000dd6 <__aeabi_ddiv+0xe2>
 8000dd4:	e1c7      	b.n	8001166 <__aeabi_ddiv+0x472>
 8000dd6:	d100      	bne.n	8000dda <__aeabi_ddiv+0xe6>
 8000dd8:	e1c2      	b.n	8001160 <__aeabi_ddiv+0x46c>
 8000dda:	2301      	movs	r3, #1
 8000ddc:	425b      	negs	r3, r3
 8000dde:	469c      	mov	ip, r3
 8000de0:	002e      	movs	r6, r5
 8000de2:	4640      	mov	r0, r8
 8000de4:	2500      	movs	r5, #0
 8000de6:	44e3      	add	fp, ip
 8000de8:	0223      	lsls	r3, r4, #8
 8000dea:	0e14      	lsrs	r4, r2, #24
 8000dec:	431c      	orrs	r4, r3
 8000dee:	0c1b      	lsrs	r3, r3, #16
 8000df0:	4699      	mov	r9, r3
 8000df2:	0423      	lsls	r3, r4, #16
 8000df4:	0c1f      	lsrs	r7, r3, #16
 8000df6:	0212      	lsls	r2, r2, #8
 8000df8:	4649      	mov	r1, r9
 8000dfa:	9200      	str	r2, [sp, #0]
 8000dfc:	9701      	str	r7, [sp, #4]
 8000dfe:	f7ff fa23 	bl	8000248 <__aeabi_uidivmod>
 8000e02:	0002      	movs	r2, r0
 8000e04:	437a      	muls	r2, r7
 8000e06:	040b      	lsls	r3, r1, #16
 8000e08:	0c31      	lsrs	r1, r6, #16
 8000e0a:	4680      	mov	r8, r0
 8000e0c:	4319      	orrs	r1, r3
 8000e0e:	428a      	cmp	r2, r1
 8000e10:	d907      	bls.n	8000e22 <__aeabi_ddiv+0x12e>
 8000e12:	2301      	movs	r3, #1
 8000e14:	425b      	negs	r3, r3
 8000e16:	469c      	mov	ip, r3
 8000e18:	1909      	adds	r1, r1, r4
 8000e1a:	44e0      	add	r8, ip
 8000e1c:	428c      	cmp	r4, r1
 8000e1e:	d800      	bhi.n	8000e22 <__aeabi_ddiv+0x12e>
 8000e20:	e207      	b.n	8001232 <__aeabi_ddiv+0x53e>
 8000e22:	1a88      	subs	r0, r1, r2
 8000e24:	4649      	mov	r1, r9
 8000e26:	f7ff fa0f 	bl	8000248 <__aeabi_uidivmod>
 8000e2a:	0409      	lsls	r1, r1, #16
 8000e2c:	468c      	mov	ip, r1
 8000e2e:	0431      	lsls	r1, r6, #16
 8000e30:	4666      	mov	r6, ip
 8000e32:	9a01      	ldr	r2, [sp, #4]
 8000e34:	0c09      	lsrs	r1, r1, #16
 8000e36:	4342      	muls	r2, r0
 8000e38:	0003      	movs	r3, r0
 8000e3a:	4331      	orrs	r1, r6
 8000e3c:	428a      	cmp	r2, r1
 8000e3e:	d904      	bls.n	8000e4a <__aeabi_ddiv+0x156>
 8000e40:	1909      	adds	r1, r1, r4
 8000e42:	3b01      	subs	r3, #1
 8000e44:	428c      	cmp	r4, r1
 8000e46:	d800      	bhi.n	8000e4a <__aeabi_ddiv+0x156>
 8000e48:	e1ed      	b.n	8001226 <__aeabi_ddiv+0x532>
 8000e4a:	1a88      	subs	r0, r1, r2
 8000e4c:	4642      	mov	r2, r8
 8000e4e:	0412      	lsls	r2, r2, #16
 8000e50:	431a      	orrs	r2, r3
 8000e52:	4690      	mov	r8, r2
 8000e54:	4641      	mov	r1, r8
 8000e56:	9b00      	ldr	r3, [sp, #0]
 8000e58:	040e      	lsls	r6, r1, #16
 8000e5a:	0c1b      	lsrs	r3, r3, #16
 8000e5c:	001f      	movs	r7, r3
 8000e5e:	9302      	str	r3, [sp, #8]
 8000e60:	9b00      	ldr	r3, [sp, #0]
 8000e62:	0c36      	lsrs	r6, r6, #16
 8000e64:	041b      	lsls	r3, r3, #16
 8000e66:	0c19      	lsrs	r1, r3, #16
 8000e68:	000b      	movs	r3, r1
 8000e6a:	4373      	muls	r3, r6
 8000e6c:	0c12      	lsrs	r2, r2, #16
 8000e6e:	437e      	muls	r6, r7
 8000e70:	9103      	str	r1, [sp, #12]
 8000e72:	4351      	muls	r1, r2
 8000e74:	437a      	muls	r2, r7
 8000e76:	0c1f      	lsrs	r7, r3, #16
 8000e78:	46bc      	mov	ip, r7
 8000e7a:	1876      	adds	r6, r6, r1
 8000e7c:	4466      	add	r6, ip
 8000e7e:	42b1      	cmp	r1, r6
 8000e80:	d903      	bls.n	8000e8a <__aeabi_ddiv+0x196>
 8000e82:	2180      	movs	r1, #128	; 0x80
 8000e84:	0249      	lsls	r1, r1, #9
 8000e86:	468c      	mov	ip, r1
 8000e88:	4462      	add	r2, ip
 8000e8a:	0c31      	lsrs	r1, r6, #16
 8000e8c:	188a      	adds	r2, r1, r2
 8000e8e:	0431      	lsls	r1, r6, #16
 8000e90:	041e      	lsls	r6, r3, #16
 8000e92:	0c36      	lsrs	r6, r6, #16
 8000e94:	198e      	adds	r6, r1, r6
 8000e96:	4290      	cmp	r0, r2
 8000e98:	d302      	bcc.n	8000ea0 <__aeabi_ddiv+0x1ac>
 8000e9a:	d112      	bne.n	8000ec2 <__aeabi_ddiv+0x1ce>
 8000e9c:	42b5      	cmp	r5, r6
 8000e9e:	d210      	bcs.n	8000ec2 <__aeabi_ddiv+0x1ce>
 8000ea0:	4643      	mov	r3, r8
 8000ea2:	1e59      	subs	r1, r3, #1
 8000ea4:	9b00      	ldr	r3, [sp, #0]
 8000ea6:	469c      	mov	ip, r3
 8000ea8:	4465      	add	r5, ip
 8000eaa:	001f      	movs	r7, r3
 8000eac:	429d      	cmp	r5, r3
 8000eae:	419b      	sbcs	r3, r3
 8000eb0:	425b      	negs	r3, r3
 8000eb2:	191b      	adds	r3, r3, r4
 8000eb4:	18c0      	adds	r0, r0, r3
 8000eb6:	4284      	cmp	r4, r0
 8000eb8:	d200      	bcs.n	8000ebc <__aeabi_ddiv+0x1c8>
 8000eba:	e1a0      	b.n	80011fe <__aeabi_ddiv+0x50a>
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_ddiv+0x1cc>
 8000ebe:	e19b      	b.n	80011f8 <__aeabi_ddiv+0x504>
 8000ec0:	4688      	mov	r8, r1
 8000ec2:	1bae      	subs	r6, r5, r6
 8000ec4:	42b5      	cmp	r5, r6
 8000ec6:	41ad      	sbcs	r5, r5
 8000ec8:	1a80      	subs	r0, r0, r2
 8000eca:	426d      	negs	r5, r5
 8000ecc:	1b40      	subs	r0, r0, r5
 8000ece:	4284      	cmp	r4, r0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_ddiv+0x1e0>
 8000ed2:	e1d5      	b.n	8001280 <__aeabi_ddiv+0x58c>
 8000ed4:	4649      	mov	r1, r9
 8000ed6:	f7ff f9b7 	bl	8000248 <__aeabi_uidivmod>
 8000eda:	9a01      	ldr	r2, [sp, #4]
 8000edc:	040b      	lsls	r3, r1, #16
 8000ede:	4342      	muls	r2, r0
 8000ee0:	0c31      	lsrs	r1, r6, #16
 8000ee2:	0005      	movs	r5, r0
 8000ee4:	4319      	orrs	r1, r3
 8000ee6:	428a      	cmp	r2, r1
 8000ee8:	d900      	bls.n	8000eec <__aeabi_ddiv+0x1f8>
 8000eea:	e16c      	b.n	80011c6 <__aeabi_ddiv+0x4d2>
 8000eec:	1a88      	subs	r0, r1, r2
 8000eee:	4649      	mov	r1, r9
 8000ef0:	f7ff f9aa 	bl	8000248 <__aeabi_uidivmod>
 8000ef4:	9a01      	ldr	r2, [sp, #4]
 8000ef6:	0436      	lsls	r6, r6, #16
 8000ef8:	4342      	muls	r2, r0
 8000efa:	0409      	lsls	r1, r1, #16
 8000efc:	0c36      	lsrs	r6, r6, #16
 8000efe:	0003      	movs	r3, r0
 8000f00:	430e      	orrs	r6, r1
 8000f02:	42b2      	cmp	r2, r6
 8000f04:	d900      	bls.n	8000f08 <__aeabi_ddiv+0x214>
 8000f06:	e153      	b.n	80011b0 <__aeabi_ddiv+0x4bc>
 8000f08:	9803      	ldr	r0, [sp, #12]
 8000f0a:	1ab6      	subs	r6, r6, r2
 8000f0c:	0002      	movs	r2, r0
 8000f0e:	042d      	lsls	r5, r5, #16
 8000f10:	431d      	orrs	r5, r3
 8000f12:	9f02      	ldr	r7, [sp, #8]
 8000f14:	042b      	lsls	r3, r5, #16
 8000f16:	0c1b      	lsrs	r3, r3, #16
 8000f18:	435a      	muls	r2, r3
 8000f1a:	437b      	muls	r3, r7
 8000f1c:	469c      	mov	ip, r3
 8000f1e:	0c29      	lsrs	r1, r5, #16
 8000f20:	4348      	muls	r0, r1
 8000f22:	0c13      	lsrs	r3, r2, #16
 8000f24:	4484      	add	ip, r0
 8000f26:	4463      	add	r3, ip
 8000f28:	4379      	muls	r1, r7
 8000f2a:	4298      	cmp	r0, r3
 8000f2c:	d903      	bls.n	8000f36 <__aeabi_ddiv+0x242>
 8000f2e:	2080      	movs	r0, #128	; 0x80
 8000f30:	0240      	lsls	r0, r0, #9
 8000f32:	4684      	mov	ip, r0
 8000f34:	4461      	add	r1, ip
 8000f36:	0c18      	lsrs	r0, r3, #16
 8000f38:	0412      	lsls	r2, r2, #16
 8000f3a:	041b      	lsls	r3, r3, #16
 8000f3c:	0c12      	lsrs	r2, r2, #16
 8000f3e:	1841      	adds	r1, r0, r1
 8000f40:	189b      	adds	r3, r3, r2
 8000f42:	428e      	cmp	r6, r1
 8000f44:	d200      	bcs.n	8000f48 <__aeabi_ddiv+0x254>
 8000f46:	e0ff      	b.n	8001148 <__aeabi_ddiv+0x454>
 8000f48:	d100      	bne.n	8000f4c <__aeabi_ddiv+0x258>
 8000f4a:	e0fa      	b.n	8001142 <__aeabi_ddiv+0x44e>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	431d      	orrs	r5, r3
 8000f50:	4a49      	ldr	r2, [pc, #292]	; (8001078 <__aeabi_ddiv+0x384>)
 8000f52:	445a      	add	r2, fp
 8000f54:	2a00      	cmp	r2, #0
 8000f56:	dc00      	bgt.n	8000f5a <__aeabi_ddiv+0x266>
 8000f58:	e0aa      	b.n	80010b0 <__aeabi_ddiv+0x3bc>
 8000f5a:	076b      	lsls	r3, r5, #29
 8000f5c:	d000      	beq.n	8000f60 <__aeabi_ddiv+0x26c>
 8000f5e:	e13d      	b.n	80011dc <__aeabi_ddiv+0x4e8>
 8000f60:	08ed      	lsrs	r5, r5, #3
 8000f62:	4643      	mov	r3, r8
 8000f64:	01db      	lsls	r3, r3, #7
 8000f66:	d506      	bpl.n	8000f76 <__aeabi_ddiv+0x282>
 8000f68:	4642      	mov	r2, r8
 8000f6a:	4b44      	ldr	r3, [pc, #272]	; (800107c <__aeabi_ddiv+0x388>)
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	4690      	mov	r8, r2
 8000f70:	2280      	movs	r2, #128	; 0x80
 8000f72:	00d2      	lsls	r2, r2, #3
 8000f74:	445a      	add	r2, fp
 8000f76:	4b42      	ldr	r3, [pc, #264]	; (8001080 <__aeabi_ddiv+0x38c>)
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dd00      	ble.n	8000f7e <__aeabi_ddiv+0x28a>
 8000f7c:	e71f      	b.n	8000dbe <__aeabi_ddiv+0xca>
 8000f7e:	4643      	mov	r3, r8
 8000f80:	075b      	lsls	r3, r3, #29
 8000f82:	431d      	orrs	r5, r3
 8000f84:	4643      	mov	r3, r8
 8000f86:	0552      	lsls	r2, r2, #21
 8000f88:	025c      	lsls	r4, r3, #9
 8000f8a:	0b24      	lsrs	r4, r4, #12
 8000f8c:	0d53      	lsrs	r3, r2, #21
 8000f8e:	e708      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8000f90:	4652      	mov	r2, sl
 8000f92:	4322      	orrs	r2, r4
 8000f94:	d100      	bne.n	8000f98 <__aeabi_ddiv+0x2a4>
 8000f96:	e07b      	b.n	8001090 <__aeabi_ddiv+0x39c>
 8000f98:	2c00      	cmp	r4, #0
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_ddiv+0x2aa>
 8000f9c:	e0fa      	b.n	8001194 <__aeabi_ddiv+0x4a0>
 8000f9e:	0020      	movs	r0, r4
 8000fa0:	f001 f952 	bl	8002248 <__clzsi2>
 8000fa4:	0002      	movs	r2, r0
 8000fa6:	3a0b      	subs	r2, #11
 8000fa8:	231d      	movs	r3, #29
 8000faa:	0001      	movs	r1, r0
 8000fac:	1a9b      	subs	r3, r3, r2
 8000fae:	4652      	mov	r2, sl
 8000fb0:	3908      	subs	r1, #8
 8000fb2:	40da      	lsrs	r2, r3
 8000fb4:	408c      	lsls	r4, r1
 8000fb6:	4314      	orrs	r4, r2
 8000fb8:	4652      	mov	r2, sl
 8000fba:	408a      	lsls	r2, r1
 8000fbc:	4b31      	ldr	r3, [pc, #196]	; (8001084 <__aeabi_ddiv+0x390>)
 8000fbe:	4458      	add	r0, fp
 8000fc0:	469b      	mov	fp, r3
 8000fc2:	4483      	add	fp, r0
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	e6d5      	b.n	8000d74 <__aeabi_ddiv+0x80>
 8000fc8:	464b      	mov	r3, r9
 8000fca:	4323      	orrs	r3, r4
 8000fcc:	4698      	mov	r8, r3
 8000fce:	d044      	beq.n	800105a <__aeabi_ddiv+0x366>
 8000fd0:	2c00      	cmp	r4, #0
 8000fd2:	d100      	bne.n	8000fd6 <__aeabi_ddiv+0x2e2>
 8000fd4:	e0ce      	b.n	8001174 <__aeabi_ddiv+0x480>
 8000fd6:	0020      	movs	r0, r4
 8000fd8:	f001 f936 	bl	8002248 <__clzsi2>
 8000fdc:	0001      	movs	r1, r0
 8000fde:	0002      	movs	r2, r0
 8000fe0:	390b      	subs	r1, #11
 8000fe2:	231d      	movs	r3, #29
 8000fe4:	1a5b      	subs	r3, r3, r1
 8000fe6:	4649      	mov	r1, r9
 8000fe8:	0010      	movs	r0, r2
 8000fea:	40d9      	lsrs	r1, r3
 8000fec:	3808      	subs	r0, #8
 8000fee:	4084      	lsls	r4, r0
 8000ff0:	000b      	movs	r3, r1
 8000ff2:	464d      	mov	r5, r9
 8000ff4:	4323      	orrs	r3, r4
 8000ff6:	4698      	mov	r8, r3
 8000ff8:	4085      	lsls	r5, r0
 8000ffa:	4823      	ldr	r0, [pc, #140]	; (8001088 <__aeabi_ddiv+0x394>)
 8000ffc:	1a83      	subs	r3, r0, r2
 8000ffe:	469b      	mov	fp, r3
 8001000:	2300      	movs	r3, #0
 8001002:	4699      	mov	r9, r3
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	e69a      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 8001008:	464b      	mov	r3, r9
 800100a:	4323      	orrs	r3, r4
 800100c:	4698      	mov	r8, r3
 800100e:	d11d      	bne.n	800104c <__aeabi_ddiv+0x358>
 8001010:	2308      	movs	r3, #8
 8001012:	4699      	mov	r9, r3
 8001014:	3b06      	subs	r3, #6
 8001016:	2500      	movs	r5, #0
 8001018:	4683      	mov	fp, r0
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	e68f      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 800101e:	4652      	mov	r2, sl
 8001020:	4322      	orrs	r2, r4
 8001022:	d109      	bne.n	8001038 <__aeabi_ddiv+0x344>
 8001024:	2302      	movs	r3, #2
 8001026:	4649      	mov	r1, r9
 8001028:	4319      	orrs	r1, r3
 800102a:	4b18      	ldr	r3, [pc, #96]	; (800108c <__aeabi_ddiv+0x398>)
 800102c:	4689      	mov	r9, r1
 800102e:	469c      	mov	ip, r3
 8001030:	2400      	movs	r4, #0
 8001032:	2002      	movs	r0, #2
 8001034:	44e3      	add	fp, ip
 8001036:	e69d      	b.n	8000d74 <__aeabi_ddiv+0x80>
 8001038:	2303      	movs	r3, #3
 800103a:	464a      	mov	r2, r9
 800103c:	431a      	orrs	r2, r3
 800103e:	4b13      	ldr	r3, [pc, #76]	; (800108c <__aeabi_ddiv+0x398>)
 8001040:	4691      	mov	r9, r2
 8001042:	469c      	mov	ip, r3
 8001044:	4652      	mov	r2, sl
 8001046:	2003      	movs	r0, #3
 8001048:	44e3      	add	fp, ip
 800104a:	e693      	b.n	8000d74 <__aeabi_ddiv+0x80>
 800104c:	230c      	movs	r3, #12
 800104e:	4699      	mov	r9, r3
 8001050:	3b09      	subs	r3, #9
 8001052:	46a0      	mov	r8, r4
 8001054:	4683      	mov	fp, r0
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	e671      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 800105a:	2304      	movs	r3, #4
 800105c:	4699      	mov	r9, r3
 800105e:	2300      	movs	r3, #0
 8001060:	469b      	mov	fp, r3
 8001062:	3301      	adds	r3, #1
 8001064:	2500      	movs	r5, #0
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	e669      	b.n	8000d3e <__aeabi_ddiv+0x4a>
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	000007ff 	.word	0x000007ff
 8001070:	fffffc01 	.word	0xfffffc01
 8001074:	080082a8 	.word	0x080082a8
 8001078:	000003ff 	.word	0x000003ff
 800107c:	feffffff 	.word	0xfeffffff
 8001080:	000007fe 	.word	0x000007fe
 8001084:	000003f3 	.word	0x000003f3
 8001088:	fffffc0d 	.word	0xfffffc0d
 800108c:	fffff801 	.word	0xfffff801
 8001090:	4649      	mov	r1, r9
 8001092:	2301      	movs	r3, #1
 8001094:	4319      	orrs	r1, r3
 8001096:	4689      	mov	r9, r1
 8001098:	2400      	movs	r4, #0
 800109a:	2001      	movs	r0, #1
 800109c:	e66a      	b.n	8000d74 <__aeabi_ddiv+0x80>
 800109e:	2300      	movs	r3, #0
 80010a0:	2480      	movs	r4, #128	; 0x80
 80010a2:	469a      	mov	sl, r3
 80010a4:	2500      	movs	r5, #0
 80010a6:	4b8a      	ldr	r3, [pc, #552]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 80010a8:	0324      	lsls	r4, r4, #12
 80010aa:	e67a      	b.n	8000da2 <__aeabi_ddiv+0xae>
 80010ac:	2501      	movs	r5, #1
 80010ae:	426d      	negs	r5, r5
 80010b0:	2301      	movs	r3, #1
 80010b2:	1a9b      	subs	r3, r3, r2
 80010b4:	2b38      	cmp	r3, #56	; 0x38
 80010b6:	dd00      	ble.n	80010ba <__aeabi_ddiv+0x3c6>
 80010b8:	e670      	b.n	8000d9c <__aeabi_ddiv+0xa8>
 80010ba:	2b1f      	cmp	r3, #31
 80010bc:	dc00      	bgt.n	80010c0 <__aeabi_ddiv+0x3cc>
 80010be:	e0bf      	b.n	8001240 <__aeabi_ddiv+0x54c>
 80010c0:	211f      	movs	r1, #31
 80010c2:	4249      	negs	r1, r1
 80010c4:	1a8a      	subs	r2, r1, r2
 80010c6:	4641      	mov	r1, r8
 80010c8:	40d1      	lsrs	r1, r2
 80010ca:	000a      	movs	r2, r1
 80010cc:	2b20      	cmp	r3, #32
 80010ce:	d004      	beq.n	80010da <__aeabi_ddiv+0x3e6>
 80010d0:	4641      	mov	r1, r8
 80010d2:	4b80      	ldr	r3, [pc, #512]	; (80012d4 <__aeabi_ddiv+0x5e0>)
 80010d4:	445b      	add	r3, fp
 80010d6:	4099      	lsls	r1, r3
 80010d8:	430d      	orrs	r5, r1
 80010da:	1e6b      	subs	r3, r5, #1
 80010dc:	419d      	sbcs	r5, r3
 80010de:	2307      	movs	r3, #7
 80010e0:	432a      	orrs	r2, r5
 80010e2:	001d      	movs	r5, r3
 80010e4:	2400      	movs	r4, #0
 80010e6:	4015      	ands	r5, r2
 80010e8:	4213      	tst	r3, r2
 80010ea:	d100      	bne.n	80010ee <__aeabi_ddiv+0x3fa>
 80010ec:	e0d4      	b.n	8001298 <__aeabi_ddiv+0x5a4>
 80010ee:	210f      	movs	r1, #15
 80010f0:	2300      	movs	r3, #0
 80010f2:	4011      	ands	r1, r2
 80010f4:	2904      	cmp	r1, #4
 80010f6:	d100      	bne.n	80010fa <__aeabi_ddiv+0x406>
 80010f8:	e0cb      	b.n	8001292 <__aeabi_ddiv+0x59e>
 80010fa:	1d11      	adds	r1, r2, #4
 80010fc:	4291      	cmp	r1, r2
 80010fe:	4192      	sbcs	r2, r2
 8001100:	4252      	negs	r2, r2
 8001102:	189b      	adds	r3, r3, r2
 8001104:	000a      	movs	r2, r1
 8001106:	0219      	lsls	r1, r3, #8
 8001108:	d400      	bmi.n	800110c <__aeabi_ddiv+0x418>
 800110a:	e0c2      	b.n	8001292 <__aeabi_ddiv+0x59e>
 800110c:	2301      	movs	r3, #1
 800110e:	2400      	movs	r4, #0
 8001110:	2500      	movs	r5, #0
 8001112:	e646      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8001114:	2380      	movs	r3, #128	; 0x80
 8001116:	4641      	mov	r1, r8
 8001118:	031b      	lsls	r3, r3, #12
 800111a:	4219      	tst	r1, r3
 800111c:	d008      	beq.n	8001130 <__aeabi_ddiv+0x43c>
 800111e:	421c      	tst	r4, r3
 8001120:	d106      	bne.n	8001130 <__aeabi_ddiv+0x43c>
 8001122:	431c      	orrs	r4, r3
 8001124:	0324      	lsls	r4, r4, #12
 8001126:	46ba      	mov	sl, r7
 8001128:	0015      	movs	r5, r2
 800112a:	4b69      	ldr	r3, [pc, #420]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 800112c:	0b24      	lsrs	r4, r4, #12
 800112e:	e638      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8001130:	2480      	movs	r4, #128	; 0x80
 8001132:	4643      	mov	r3, r8
 8001134:	0324      	lsls	r4, r4, #12
 8001136:	431c      	orrs	r4, r3
 8001138:	0324      	lsls	r4, r4, #12
 800113a:	46b2      	mov	sl, r6
 800113c:	4b64      	ldr	r3, [pc, #400]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 800113e:	0b24      	lsrs	r4, r4, #12
 8001140:	e62f      	b.n	8000da2 <__aeabi_ddiv+0xae>
 8001142:	2b00      	cmp	r3, #0
 8001144:	d100      	bne.n	8001148 <__aeabi_ddiv+0x454>
 8001146:	e703      	b.n	8000f50 <__aeabi_ddiv+0x25c>
 8001148:	19a6      	adds	r6, r4, r6
 800114a:	1e68      	subs	r0, r5, #1
 800114c:	42a6      	cmp	r6, r4
 800114e:	d200      	bcs.n	8001152 <__aeabi_ddiv+0x45e>
 8001150:	e08d      	b.n	800126e <__aeabi_ddiv+0x57a>
 8001152:	428e      	cmp	r6, r1
 8001154:	d200      	bcs.n	8001158 <__aeabi_ddiv+0x464>
 8001156:	e0a3      	b.n	80012a0 <__aeabi_ddiv+0x5ac>
 8001158:	d100      	bne.n	800115c <__aeabi_ddiv+0x468>
 800115a:	e0b3      	b.n	80012c4 <__aeabi_ddiv+0x5d0>
 800115c:	0005      	movs	r5, r0
 800115e:	e6f5      	b.n	8000f4c <__aeabi_ddiv+0x258>
 8001160:	42aa      	cmp	r2, r5
 8001162:	d900      	bls.n	8001166 <__aeabi_ddiv+0x472>
 8001164:	e639      	b.n	8000dda <__aeabi_ddiv+0xe6>
 8001166:	4643      	mov	r3, r8
 8001168:	07de      	lsls	r6, r3, #31
 800116a:	0858      	lsrs	r0, r3, #1
 800116c:	086b      	lsrs	r3, r5, #1
 800116e:	431e      	orrs	r6, r3
 8001170:	07ed      	lsls	r5, r5, #31
 8001172:	e639      	b.n	8000de8 <__aeabi_ddiv+0xf4>
 8001174:	4648      	mov	r0, r9
 8001176:	f001 f867 	bl	8002248 <__clzsi2>
 800117a:	0001      	movs	r1, r0
 800117c:	0002      	movs	r2, r0
 800117e:	3115      	adds	r1, #21
 8001180:	3220      	adds	r2, #32
 8001182:	291c      	cmp	r1, #28
 8001184:	dc00      	bgt.n	8001188 <__aeabi_ddiv+0x494>
 8001186:	e72c      	b.n	8000fe2 <__aeabi_ddiv+0x2ee>
 8001188:	464b      	mov	r3, r9
 800118a:	3808      	subs	r0, #8
 800118c:	4083      	lsls	r3, r0
 800118e:	2500      	movs	r5, #0
 8001190:	4698      	mov	r8, r3
 8001192:	e732      	b.n	8000ffa <__aeabi_ddiv+0x306>
 8001194:	f001 f858 	bl	8002248 <__clzsi2>
 8001198:	0003      	movs	r3, r0
 800119a:	001a      	movs	r2, r3
 800119c:	3215      	adds	r2, #21
 800119e:	3020      	adds	r0, #32
 80011a0:	2a1c      	cmp	r2, #28
 80011a2:	dc00      	bgt.n	80011a6 <__aeabi_ddiv+0x4b2>
 80011a4:	e700      	b.n	8000fa8 <__aeabi_ddiv+0x2b4>
 80011a6:	4654      	mov	r4, sl
 80011a8:	3b08      	subs	r3, #8
 80011aa:	2200      	movs	r2, #0
 80011ac:	409c      	lsls	r4, r3
 80011ae:	e705      	b.n	8000fbc <__aeabi_ddiv+0x2c8>
 80011b0:	1936      	adds	r6, r6, r4
 80011b2:	3b01      	subs	r3, #1
 80011b4:	42b4      	cmp	r4, r6
 80011b6:	d900      	bls.n	80011ba <__aeabi_ddiv+0x4c6>
 80011b8:	e6a6      	b.n	8000f08 <__aeabi_ddiv+0x214>
 80011ba:	42b2      	cmp	r2, r6
 80011bc:	d800      	bhi.n	80011c0 <__aeabi_ddiv+0x4cc>
 80011be:	e6a3      	b.n	8000f08 <__aeabi_ddiv+0x214>
 80011c0:	1e83      	subs	r3, r0, #2
 80011c2:	1936      	adds	r6, r6, r4
 80011c4:	e6a0      	b.n	8000f08 <__aeabi_ddiv+0x214>
 80011c6:	1909      	adds	r1, r1, r4
 80011c8:	3d01      	subs	r5, #1
 80011ca:	428c      	cmp	r4, r1
 80011cc:	d900      	bls.n	80011d0 <__aeabi_ddiv+0x4dc>
 80011ce:	e68d      	b.n	8000eec <__aeabi_ddiv+0x1f8>
 80011d0:	428a      	cmp	r2, r1
 80011d2:	d800      	bhi.n	80011d6 <__aeabi_ddiv+0x4e2>
 80011d4:	e68a      	b.n	8000eec <__aeabi_ddiv+0x1f8>
 80011d6:	1e85      	subs	r5, r0, #2
 80011d8:	1909      	adds	r1, r1, r4
 80011da:	e687      	b.n	8000eec <__aeabi_ddiv+0x1f8>
 80011dc:	230f      	movs	r3, #15
 80011de:	402b      	ands	r3, r5
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d100      	bne.n	80011e6 <__aeabi_ddiv+0x4f2>
 80011e4:	e6bc      	b.n	8000f60 <__aeabi_ddiv+0x26c>
 80011e6:	2305      	movs	r3, #5
 80011e8:	425b      	negs	r3, r3
 80011ea:	42ab      	cmp	r3, r5
 80011ec:	419b      	sbcs	r3, r3
 80011ee:	3504      	adds	r5, #4
 80011f0:	425b      	negs	r3, r3
 80011f2:	08ed      	lsrs	r5, r5, #3
 80011f4:	4498      	add	r8, r3
 80011f6:	e6b4      	b.n	8000f62 <__aeabi_ddiv+0x26e>
 80011f8:	42af      	cmp	r7, r5
 80011fa:	d900      	bls.n	80011fe <__aeabi_ddiv+0x50a>
 80011fc:	e660      	b.n	8000ec0 <__aeabi_ddiv+0x1cc>
 80011fe:	4282      	cmp	r2, r0
 8001200:	d804      	bhi.n	800120c <__aeabi_ddiv+0x518>
 8001202:	d000      	beq.n	8001206 <__aeabi_ddiv+0x512>
 8001204:	e65c      	b.n	8000ec0 <__aeabi_ddiv+0x1cc>
 8001206:	42ae      	cmp	r6, r5
 8001208:	d800      	bhi.n	800120c <__aeabi_ddiv+0x518>
 800120a:	e659      	b.n	8000ec0 <__aeabi_ddiv+0x1cc>
 800120c:	2302      	movs	r3, #2
 800120e:	425b      	negs	r3, r3
 8001210:	469c      	mov	ip, r3
 8001212:	9b00      	ldr	r3, [sp, #0]
 8001214:	44e0      	add	r8, ip
 8001216:	469c      	mov	ip, r3
 8001218:	4465      	add	r5, ip
 800121a:	429d      	cmp	r5, r3
 800121c:	419b      	sbcs	r3, r3
 800121e:	425b      	negs	r3, r3
 8001220:	191b      	adds	r3, r3, r4
 8001222:	18c0      	adds	r0, r0, r3
 8001224:	e64d      	b.n	8000ec2 <__aeabi_ddiv+0x1ce>
 8001226:	428a      	cmp	r2, r1
 8001228:	d800      	bhi.n	800122c <__aeabi_ddiv+0x538>
 800122a:	e60e      	b.n	8000e4a <__aeabi_ddiv+0x156>
 800122c:	1e83      	subs	r3, r0, #2
 800122e:	1909      	adds	r1, r1, r4
 8001230:	e60b      	b.n	8000e4a <__aeabi_ddiv+0x156>
 8001232:	428a      	cmp	r2, r1
 8001234:	d800      	bhi.n	8001238 <__aeabi_ddiv+0x544>
 8001236:	e5f4      	b.n	8000e22 <__aeabi_ddiv+0x12e>
 8001238:	1e83      	subs	r3, r0, #2
 800123a:	4698      	mov	r8, r3
 800123c:	1909      	adds	r1, r1, r4
 800123e:	e5f0      	b.n	8000e22 <__aeabi_ddiv+0x12e>
 8001240:	4925      	ldr	r1, [pc, #148]	; (80012d8 <__aeabi_ddiv+0x5e4>)
 8001242:	0028      	movs	r0, r5
 8001244:	4459      	add	r1, fp
 8001246:	408d      	lsls	r5, r1
 8001248:	4642      	mov	r2, r8
 800124a:	408a      	lsls	r2, r1
 800124c:	1e69      	subs	r1, r5, #1
 800124e:	418d      	sbcs	r5, r1
 8001250:	4641      	mov	r1, r8
 8001252:	40d8      	lsrs	r0, r3
 8001254:	40d9      	lsrs	r1, r3
 8001256:	4302      	orrs	r2, r0
 8001258:	432a      	orrs	r2, r5
 800125a:	000b      	movs	r3, r1
 800125c:	0751      	lsls	r1, r2, #29
 800125e:	d100      	bne.n	8001262 <__aeabi_ddiv+0x56e>
 8001260:	e751      	b.n	8001106 <__aeabi_ddiv+0x412>
 8001262:	210f      	movs	r1, #15
 8001264:	4011      	ands	r1, r2
 8001266:	2904      	cmp	r1, #4
 8001268:	d000      	beq.n	800126c <__aeabi_ddiv+0x578>
 800126a:	e746      	b.n	80010fa <__aeabi_ddiv+0x406>
 800126c:	e74b      	b.n	8001106 <__aeabi_ddiv+0x412>
 800126e:	0005      	movs	r5, r0
 8001270:	428e      	cmp	r6, r1
 8001272:	d000      	beq.n	8001276 <__aeabi_ddiv+0x582>
 8001274:	e66a      	b.n	8000f4c <__aeabi_ddiv+0x258>
 8001276:	9a00      	ldr	r2, [sp, #0]
 8001278:	4293      	cmp	r3, r2
 800127a:	d000      	beq.n	800127e <__aeabi_ddiv+0x58a>
 800127c:	e666      	b.n	8000f4c <__aeabi_ddiv+0x258>
 800127e:	e667      	b.n	8000f50 <__aeabi_ddiv+0x25c>
 8001280:	4a16      	ldr	r2, [pc, #88]	; (80012dc <__aeabi_ddiv+0x5e8>)
 8001282:	445a      	add	r2, fp
 8001284:	2a00      	cmp	r2, #0
 8001286:	dc00      	bgt.n	800128a <__aeabi_ddiv+0x596>
 8001288:	e710      	b.n	80010ac <__aeabi_ddiv+0x3b8>
 800128a:	2301      	movs	r3, #1
 800128c:	2500      	movs	r5, #0
 800128e:	4498      	add	r8, r3
 8001290:	e667      	b.n	8000f62 <__aeabi_ddiv+0x26e>
 8001292:	075d      	lsls	r5, r3, #29
 8001294:	025b      	lsls	r3, r3, #9
 8001296:	0b1c      	lsrs	r4, r3, #12
 8001298:	08d2      	lsrs	r2, r2, #3
 800129a:	2300      	movs	r3, #0
 800129c:	4315      	orrs	r5, r2
 800129e:	e580      	b.n	8000da2 <__aeabi_ddiv+0xae>
 80012a0:	9800      	ldr	r0, [sp, #0]
 80012a2:	3d02      	subs	r5, #2
 80012a4:	0042      	lsls	r2, r0, #1
 80012a6:	4282      	cmp	r2, r0
 80012a8:	41bf      	sbcs	r7, r7
 80012aa:	427f      	negs	r7, r7
 80012ac:	193c      	adds	r4, r7, r4
 80012ae:	1936      	adds	r6, r6, r4
 80012b0:	9200      	str	r2, [sp, #0]
 80012b2:	e7dd      	b.n	8001270 <__aeabi_ddiv+0x57c>
 80012b4:	2480      	movs	r4, #128	; 0x80
 80012b6:	4643      	mov	r3, r8
 80012b8:	0324      	lsls	r4, r4, #12
 80012ba:	431c      	orrs	r4, r3
 80012bc:	0324      	lsls	r4, r4, #12
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <__aeabi_ddiv+0x5dc>)
 80012c0:	0b24      	lsrs	r4, r4, #12
 80012c2:	e56e      	b.n	8000da2 <__aeabi_ddiv+0xae>
 80012c4:	9a00      	ldr	r2, [sp, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d3ea      	bcc.n	80012a0 <__aeabi_ddiv+0x5ac>
 80012ca:	0005      	movs	r5, r0
 80012cc:	e7d3      	b.n	8001276 <__aeabi_ddiv+0x582>
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	000007ff 	.word	0x000007ff
 80012d4:	0000043e 	.word	0x0000043e
 80012d8:	0000041e 	.word	0x0000041e
 80012dc:	000003ff 	.word	0x000003ff

080012e0 <__eqdf2>:
 80012e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e2:	464e      	mov	r6, r9
 80012e4:	4645      	mov	r5, r8
 80012e6:	46de      	mov	lr, fp
 80012e8:	4657      	mov	r7, sl
 80012ea:	4690      	mov	r8, r2
 80012ec:	b5e0      	push	{r5, r6, r7, lr}
 80012ee:	0017      	movs	r7, r2
 80012f0:	031a      	lsls	r2, r3, #12
 80012f2:	0b12      	lsrs	r2, r2, #12
 80012f4:	0005      	movs	r5, r0
 80012f6:	4684      	mov	ip, r0
 80012f8:	4819      	ldr	r0, [pc, #100]	; (8001360 <__eqdf2+0x80>)
 80012fa:	030e      	lsls	r6, r1, #12
 80012fc:	004c      	lsls	r4, r1, #1
 80012fe:	4691      	mov	r9, r2
 8001300:	005a      	lsls	r2, r3, #1
 8001302:	0fdb      	lsrs	r3, r3, #31
 8001304:	469b      	mov	fp, r3
 8001306:	0b36      	lsrs	r6, r6, #12
 8001308:	0d64      	lsrs	r4, r4, #21
 800130a:	0fc9      	lsrs	r1, r1, #31
 800130c:	0d52      	lsrs	r2, r2, #21
 800130e:	4284      	cmp	r4, r0
 8001310:	d019      	beq.n	8001346 <__eqdf2+0x66>
 8001312:	4282      	cmp	r2, r0
 8001314:	d010      	beq.n	8001338 <__eqdf2+0x58>
 8001316:	2001      	movs	r0, #1
 8001318:	4294      	cmp	r4, r2
 800131a:	d10e      	bne.n	800133a <__eqdf2+0x5a>
 800131c:	454e      	cmp	r6, r9
 800131e:	d10c      	bne.n	800133a <__eqdf2+0x5a>
 8001320:	2001      	movs	r0, #1
 8001322:	45c4      	cmp	ip, r8
 8001324:	d109      	bne.n	800133a <__eqdf2+0x5a>
 8001326:	4559      	cmp	r1, fp
 8001328:	d017      	beq.n	800135a <__eqdf2+0x7a>
 800132a:	2c00      	cmp	r4, #0
 800132c:	d105      	bne.n	800133a <__eqdf2+0x5a>
 800132e:	0030      	movs	r0, r6
 8001330:	4328      	orrs	r0, r5
 8001332:	1e43      	subs	r3, r0, #1
 8001334:	4198      	sbcs	r0, r3
 8001336:	e000      	b.n	800133a <__eqdf2+0x5a>
 8001338:	2001      	movs	r0, #1
 800133a:	bcf0      	pop	{r4, r5, r6, r7}
 800133c:	46bb      	mov	fp, r7
 800133e:	46b2      	mov	sl, r6
 8001340:	46a9      	mov	r9, r5
 8001342:	46a0      	mov	r8, r4
 8001344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001346:	0033      	movs	r3, r6
 8001348:	2001      	movs	r0, #1
 800134a:	432b      	orrs	r3, r5
 800134c:	d1f5      	bne.n	800133a <__eqdf2+0x5a>
 800134e:	42a2      	cmp	r2, r4
 8001350:	d1f3      	bne.n	800133a <__eqdf2+0x5a>
 8001352:	464b      	mov	r3, r9
 8001354:	433b      	orrs	r3, r7
 8001356:	d1f0      	bne.n	800133a <__eqdf2+0x5a>
 8001358:	e7e2      	b.n	8001320 <__eqdf2+0x40>
 800135a:	2000      	movs	r0, #0
 800135c:	e7ed      	b.n	800133a <__eqdf2+0x5a>
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	000007ff 	.word	0x000007ff

08001364 <__gedf2>:
 8001364:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001366:	4647      	mov	r7, r8
 8001368:	46ce      	mov	lr, r9
 800136a:	0004      	movs	r4, r0
 800136c:	0018      	movs	r0, r3
 800136e:	0016      	movs	r6, r2
 8001370:	031b      	lsls	r3, r3, #12
 8001372:	0b1b      	lsrs	r3, r3, #12
 8001374:	4d2d      	ldr	r5, [pc, #180]	; (800142c <__gedf2+0xc8>)
 8001376:	004a      	lsls	r2, r1, #1
 8001378:	4699      	mov	r9, r3
 800137a:	b580      	push	{r7, lr}
 800137c:	0043      	lsls	r3, r0, #1
 800137e:	030f      	lsls	r7, r1, #12
 8001380:	46a4      	mov	ip, r4
 8001382:	46b0      	mov	r8, r6
 8001384:	0b3f      	lsrs	r7, r7, #12
 8001386:	0d52      	lsrs	r2, r2, #21
 8001388:	0fc9      	lsrs	r1, r1, #31
 800138a:	0d5b      	lsrs	r3, r3, #21
 800138c:	0fc0      	lsrs	r0, r0, #31
 800138e:	42aa      	cmp	r2, r5
 8001390:	d021      	beq.n	80013d6 <__gedf2+0x72>
 8001392:	42ab      	cmp	r3, r5
 8001394:	d013      	beq.n	80013be <__gedf2+0x5a>
 8001396:	2a00      	cmp	r2, #0
 8001398:	d122      	bne.n	80013e0 <__gedf2+0x7c>
 800139a:	433c      	orrs	r4, r7
 800139c:	2b00      	cmp	r3, #0
 800139e:	d102      	bne.n	80013a6 <__gedf2+0x42>
 80013a0:	464d      	mov	r5, r9
 80013a2:	432e      	orrs	r6, r5
 80013a4:	d022      	beq.n	80013ec <__gedf2+0x88>
 80013a6:	2c00      	cmp	r4, #0
 80013a8:	d010      	beq.n	80013cc <__gedf2+0x68>
 80013aa:	4281      	cmp	r1, r0
 80013ac:	d022      	beq.n	80013f4 <__gedf2+0x90>
 80013ae:	2002      	movs	r0, #2
 80013b0:	3901      	subs	r1, #1
 80013b2:	4008      	ands	r0, r1
 80013b4:	3801      	subs	r0, #1
 80013b6:	bcc0      	pop	{r6, r7}
 80013b8:	46b9      	mov	r9, r7
 80013ba:	46b0      	mov	r8, r6
 80013bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013be:	464d      	mov	r5, r9
 80013c0:	432e      	orrs	r6, r5
 80013c2:	d129      	bne.n	8001418 <__gedf2+0xb4>
 80013c4:	2a00      	cmp	r2, #0
 80013c6:	d1f0      	bne.n	80013aa <__gedf2+0x46>
 80013c8:	433c      	orrs	r4, r7
 80013ca:	d1ee      	bne.n	80013aa <__gedf2+0x46>
 80013cc:	2800      	cmp	r0, #0
 80013ce:	d1f2      	bne.n	80013b6 <__gedf2+0x52>
 80013d0:	2001      	movs	r0, #1
 80013d2:	4240      	negs	r0, r0
 80013d4:	e7ef      	b.n	80013b6 <__gedf2+0x52>
 80013d6:	003d      	movs	r5, r7
 80013d8:	4325      	orrs	r5, r4
 80013da:	d11d      	bne.n	8001418 <__gedf2+0xb4>
 80013dc:	4293      	cmp	r3, r2
 80013de:	d0ee      	beq.n	80013be <__gedf2+0x5a>
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1e2      	bne.n	80013aa <__gedf2+0x46>
 80013e4:	464c      	mov	r4, r9
 80013e6:	4326      	orrs	r6, r4
 80013e8:	d1df      	bne.n	80013aa <__gedf2+0x46>
 80013ea:	e7e0      	b.n	80013ae <__gedf2+0x4a>
 80013ec:	2000      	movs	r0, #0
 80013ee:	2c00      	cmp	r4, #0
 80013f0:	d0e1      	beq.n	80013b6 <__gedf2+0x52>
 80013f2:	e7dc      	b.n	80013ae <__gedf2+0x4a>
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dc0a      	bgt.n	800140e <__gedf2+0xaa>
 80013f8:	dbe8      	blt.n	80013cc <__gedf2+0x68>
 80013fa:	454f      	cmp	r7, r9
 80013fc:	d8d7      	bhi.n	80013ae <__gedf2+0x4a>
 80013fe:	d00e      	beq.n	800141e <__gedf2+0xba>
 8001400:	2000      	movs	r0, #0
 8001402:	454f      	cmp	r7, r9
 8001404:	d2d7      	bcs.n	80013b6 <__gedf2+0x52>
 8001406:	2900      	cmp	r1, #0
 8001408:	d0e2      	beq.n	80013d0 <__gedf2+0x6c>
 800140a:	0008      	movs	r0, r1
 800140c:	e7d3      	b.n	80013b6 <__gedf2+0x52>
 800140e:	4243      	negs	r3, r0
 8001410:	4158      	adcs	r0, r3
 8001412:	0040      	lsls	r0, r0, #1
 8001414:	3801      	subs	r0, #1
 8001416:	e7ce      	b.n	80013b6 <__gedf2+0x52>
 8001418:	2002      	movs	r0, #2
 800141a:	4240      	negs	r0, r0
 800141c:	e7cb      	b.n	80013b6 <__gedf2+0x52>
 800141e:	45c4      	cmp	ip, r8
 8001420:	d8c5      	bhi.n	80013ae <__gedf2+0x4a>
 8001422:	2000      	movs	r0, #0
 8001424:	45c4      	cmp	ip, r8
 8001426:	d2c6      	bcs.n	80013b6 <__gedf2+0x52>
 8001428:	e7ed      	b.n	8001406 <__gedf2+0xa2>
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	000007ff 	.word	0x000007ff

08001430 <__ledf2>:
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	4647      	mov	r7, r8
 8001434:	46ce      	mov	lr, r9
 8001436:	0004      	movs	r4, r0
 8001438:	0018      	movs	r0, r3
 800143a:	0016      	movs	r6, r2
 800143c:	031b      	lsls	r3, r3, #12
 800143e:	0b1b      	lsrs	r3, r3, #12
 8001440:	4d2c      	ldr	r5, [pc, #176]	; (80014f4 <__ledf2+0xc4>)
 8001442:	004a      	lsls	r2, r1, #1
 8001444:	4699      	mov	r9, r3
 8001446:	b580      	push	{r7, lr}
 8001448:	0043      	lsls	r3, r0, #1
 800144a:	030f      	lsls	r7, r1, #12
 800144c:	46a4      	mov	ip, r4
 800144e:	46b0      	mov	r8, r6
 8001450:	0b3f      	lsrs	r7, r7, #12
 8001452:	0d52      	lsrs	r2, r2, #21
 8001454:	0fc9      	lsrs	r1, r1, #31
 8001456:	0d5b      	lsrs	r3, r3, #21
 8001458:	0fc0      	lsrs	r0, r0, #31
 800145a:	42aa      	cmp	r2, r5
 800145c:	d00d      	beq.n	800147a <__ledf2+0x4a>
 800145e:	42ab      	cmp	r3, r5
 8001460:	d010      	beq.n	8001484 <__ledf2+0x54>
 8001462:	2a00      	cmp	r2, #0
 8001464:	d127      	bne.n	80014b6 <__ledf2+0x86>
 8001466:	433c      	orrs	r4, r7
 8001468:	2b00      	cmp	r3, #0
 800146a:	d111      	bne.n	8001490 <__ledf2+0x60>
 800146c:	464d      	mov	r5, r9
 800146e:	432e      	orrs	r6, r5
 8001470:	d10e      	bne.n	8001490 <__ledf2+0x60>
 8001472:	2000      	movs	r0, #0
 8001474:	2c00      	cmp	r4, #0
 8001476:	d015      	beq.n	80014a4 <__ledf2+0x74>
 8001478:	e00e      	b.n	8001498 <__ledf2+0x68>
 800147a:	003d      	movs	r5, r7
 800147c:	4325      	orrs	r5, r4
 800147e:	d110      	bne.n	80014a2 <__ledf2+0x72>
 8001480:	4293      	cmp	r3, r2
 8001482:	d118      	bne.n	80014b6 <__ledf2+0x86>
 8001484:	464d      	mov	r5, r9
 8001486:	432e      	orrs	r6, r5
 8001488:	d10b      	bne.n	80014a2 <__ledf2+0x72>
 800148a:	2a00      	cmp	r2, #0
 800148c:	d102      	bne.n	8001494 <__ledf2+0x64>
 800148e:	433c      	orrs	r4, r7
 8001490:	2c00      	cmp	r4, #0
 8001492:	d00b      	beq.n	80014ac <__ledf2+0x7c>
 8001494:	4281      	cmp	r1, r0
 8001496:	d014      	beq.n	80014c2 <__ledf2+0x92>
 8001498:	2002      	movs	r0, #2
 800149a:	3901      	subs	r1, #1
 800149c:	4008      	ands	r0, r1
 800149e:	3801      	subs	r0, #1
 80014a0:	e000      	b.n	80014a4 <__ledf2+0x74>
 80014a2:	2002      	movs	r0, #2
 80014a4:	bcc0      	pop	{r6, r7}
 80014a6:	46b9      	mov	r9, r7
 80014a8:	46b0      	mov	r8, r6
 80014aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ac:	2800      	cmp	r0, #0
 80014ae:	d1f9      	bne.n	80014a4 <__ledf2+0x74>
 80014b0:	2001      	movs	r0, #1
 80014b2:	4240      	negs	r0, r0
 80014b4:	e7f6      	b.n	80014a4 <__ledf2+0x74>
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1ec      	bne.n	8001494 <__ledf2+0x64>
 80014ba:	464c      	mov	r4, r9
 80014bc:	4326      	orrs	r6, r4
 80014be:	d1e9      	bne.n	8001494 <__ledf2+0x64>
 80014c0:	e7ea      	b.n	8001498 <__ledf2+0x68>
 80014c2:	429a      	cmp	r2, r3
 80014c4:	dd04      	ble.n	80014d0 <__ledf2+0xa0>
 80014c6:	4243      	negs	r3, r0
 80014c8:	4158      	adcs	r0, r3
 80014ca:	0040      	lsls	r0, r0, #1
 80014cc:	3801      	subs	r0, #1
 80014ce:	e7e9      	b.n	80014a4 <__ledf2+0x74>
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbeb      	blt.n	80014ac <__ledf2+0x7c>
 80014d4:	454f      	cmp	r7, r9
 80014d6:	d8df      	bhi.n	8001498 <__ledf2+0x68>
 80014d8:	d006      	beq.n	80014e8 <__ledf2+0xb8>
 80014da:	2000      	movs	r0, #0
 80014dc:	454f      	cmp	r7, r9
 80014de:	d2e1      	bcs.n	80014a4 <__ledf2+0x74>
 80014e0:	2900      	cmp	r1, #0
 80014e2:	d0e5      	beq.n	80014b0 <__ledf2+0x80>
 80014e4:	0008      	movs	r0, r1
 80014e6:	e7dd      	b.n	80014a4 <__ledf2+0x74>
 80014e8:	45c4      	cmp	ip, r8
 80014ea:	d8d5      	bhi.n	8001498 <__ledf2+0x68>
 80014ec:	2000      	movs	r0, #0
 80014ee:	45c4      	cmp	ip, r8
 80014f0:	d2d8      	bcs.n	80014a4 <__ledf2+0x74>
 80014f2:	e7f5      	b.n	80014e0 <__ledf2+0xb0>
 80014f4:	000007ff 	.word	0x000007ff

080014f8 <__aeabi_dmul>:
 80014f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fa:	4657      	mov	r7, sl
 80014fc:	464e      	mov	r6, r9
 80014fe:	4645      	mov	r5, r8
 8001500:	46de      	mov	lr, fp
 8001502:	b5e0      	push	{r5, r6, r7, lr}
 8001504:	4698      	mov	r8, r3
 8001506:	030c      	lsls	r4, r1, #12
 8001508:	004b      	lsls	r3, r1, #1
 800150a:	0006      	movs	r6, r0
 800150c:	4692      	mov	sl, r2
 800150e:	b087      	sub	sp, #28
 8001510:	0b24      	lsrs	r4, r4, #12
 8001512:	0d5b      	lsrs	r3, r3, #21
 8001514:	0fcf      	lsrs	r7, r1, #31
 8001516:	2b00      	cmp	r3, #0
 8001518:	d100      	bne.n	800151c <__aeabi_dmul+0x24>
 800151a:	e15c      	b.n	80017d6 <__aeabi_dmul+0x2de>
 800151c:	4ad9      	ldr	r2, [pc, #868]	; (8001884 <__aeabi_dmul+0x38c>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d100      	bne.n	8001524 <__aeabi_dmul+0x2c>
 8001522:	e175      	b.n	8001810 <__aeabi_dmul+0x318>
 8001524:	0f42      	lsrs	r2, r0, #29
 8001526:	00e4      	lsls	r4, r4, #3
 8001528:	4314      	orrs	r4, r2
 800152a:	2280      	movs	r2, #128	; 0x80
 800152c:	0412      	lsls	r2, r2, #16
 800152e:	4314      	orrs	r4, r2
 8001530:	4ad5      	ldr	r2, [pc, #852]	; (8001888 <__aeabi_dmul+0x390>)
 8001532:	00c5      	lsls	r5, r0, #3
 8001534:	4694      	mov	ip, r2
 8001536:	4463      	add	r3, ip
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2300      	movs	r3, #0
 800153c:	4699      	mov	r9, r3
 800153e:	469b      	mov	fp, r3
 8001540:	4643      	mov	r3, r8
 8001542:	4642      	mov	r2, r8
 8001544:	031e      	lsls	r6, r3, #12
 8001546:	0fd2      	lsrs	r2, r2, #31
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4650      	mov	r0, sl
 800154c:	4690      	mov	r8, r2
 800154e:	0b36      	lsrs	r6, r6, #12
 8001550:	0d5b      	lsrs	r3, r3, #21
 8001552:	d100      	bne.n	8001556 <__aeabi_dmul+0x5e>
 8001554:	e120      	b.n	8001798 <__aeabi_dmul+0x2a0>
 8001556:	4acb      	ldr	r2, [pc, #812]	; (8001884 <__aeabi_dmul+0x38c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d100      	bne.n	800155e <__aeabi_dmul+0x66>
 800155c:	e162      	b.n	8001824 <__aeabi_dmul+0x32c>
 800155e:	49ca      	ldr	r1, [pc, #808]	; (8001888 <__aeabi_dmul+0x390>)
 8001560:	0f42      	lsrs	r2, r0, #29
 8001562:	468c      	mov	ip, r1
 8001564:	9900      	ldr	r1, [sp, #0]
 8001566:	4463      	add	r3, ip
 8001568:	00f6      	lsls	r6, r6, #3
 800156a:	468c      	mov	ip, r1
 800156c:	4316      	orrs	r6, r2
 800156e:	2280      	movs	r2, #128	; 0x80
 8001570:	449c      	add	ip, r3
 8001572:	0412      	lsls	r2, r2, #16
 8001574:	4663      	mov	r3, ip
 8001576:	4316      	orrs	r6, r2
 8001578:	00c2      	lsls	r2, r0, #3
 800157a:	2000      	movs	r0, #0
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	9900      	ldr	r1, [sp, #0]
 8001580:	4643      	mov	r3, r8
 8001582:	3101      	adds	r1, #1
 8001584:	468c      	mov	ip, r1
 8001586:	4649      	mov	r1, r9
 8001588:	407b      	eors	r3, r7
 800158a:	9301      	str	r3, [sp, #4]
 800158c:	290f      	cmp	r1, #15
 800158e:	d826      	bhi.n	80015de <__aeabi_dmul+0xe6>
 8001590:	4bbe      	ldr	r3, [pc, #760]	; (800188c <__aeabi_dmul+0x394>)
 8001592:	0089      	lsls	r1, r1, #2
 8001594:	5859      	ldr	r1, [r3, r1]
 8001596:	468f      	mov	pc, r1
 8001598:	4643      	mov	r3, r8
 800159a:	9301      	str	r3, [sp, #4]
 800159c:	0034      	movs	r4, r6
 800159e:	0015      	movs	r5, r2
 80015a0:	4683      	mov	fp, r0
 80015a2:	465b      	mov	r3, fp
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d016      	beq.n	80015d6 <__aeabi_dmul+0xde>
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d100      	bne.n	80015ae <__aeabi_dmul+0xb6>
 80015ac:	e203      	b.n	80019b6 <__aeabi_dmul+0x4be>
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d000      	beq.n	80015b4 <__aeabi_dmul+0xbc>
 80015b2:	e0cd      	b.n	8001750 <__aeabi_dmul+0x258>
 80015b4:	2200      	movs	r2, #0
 80015b6:	2400      	movs	r4, #0
 80015b8:	2500      	movs	r5, #0
 80015ba:	9b01      	ldr	r3, [sp, #4]
 80015bc:	0512      	lsls	r2, r2, #20
 80015be:	4322      	orrs	r2, r4
 80015c0:	07db      	lsls	r3, r3, #31
 80015c2:	431a      	orrs	r2, r3
 80015c4:	0028      	movs	r0, r5
 80015c6:	0011      	movs	r1, r2
 80015c8:	b007      	add	sp, #28
 80015ca:	bcf0      	pop	{r4, r5, r6, r7}
 80015cc:	46bb      	mov	fp, r7
 80015ce:	46b2      	mov	sl, r6
 80015d0:	46a9      	mov	r9, r5
 80015d2:	46a0      	mov	r8, r4
 80015d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015d6:	2400      	movs	r4, #0
 80015d8:	2500      	movs	r5, #0
 80015da:	4aaa      	ldr	r2, [pc, #680]	; (8001884 <__aeabi_dmul+0x38c>)
 80015dc:	e7ed      	b.n	80015ba <__aeabi_dmul+0xc2>
 80015de:	0c28      	lsrs	r0, r5, #16
 80015e0:	042d      	lsls	r5, r5, #16
 80015e2:	0c2d      	lsrs	r5, r5, #16
 80015e4:	002b      	movs	r3, r5
 80015e6:	0c11      	lsrs	r1, r2, #16
 80015e8:	0412      	lsls	r2, r2, #16
 80015ea:	0c12      	lsrs	r2, r2, #16
 80015ec:	4353      	muls	r3, r2
 80015ee:	4698      	mov	r8, r3
 80015f0:	0013      	movs	r3, r2
 80015f2:	002f      	movs	r7, r5
 80015f4:	4343      	muls	r3, r0
 80015f6:	4699      	mov	r9, r3
 80015f8:	434f      	muls	r7, r1
 80015fa:	444f      	add	r7, r9
 80015fc:	46bb      	mov	fp, r7
 80015fe:	4647      	mov	r7, r8
 8001600:	000b      	movs	r3, r1
 8001602:	0c3f      	lsrs	r7, r7, #16
 8001604:	46ba      	mov	sl, r7
 8001606:	4343      	muls	r3, r0
 8001608:	44da      	add	sl, fp
 800160a:	9302      	str	r3, [sp, #8]
 800160c:	45d1      	cmp	r9, sl
 800160e:	d904      	bls.n	800161a <__aeabi_dmul+0x122>
 8001610:	2780      	movs	r7, #128	; 0x80
 8001612:	027f      	lsls	r7, r7, #9
 8001614:	46b9      	mov	r9, r7
 8001616:	444b      	add	r3, r9
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	4653      	mov	r3, sl
 800161c:	0c1b      	lsrs	r3, r3, #16
 800161e:	469b      	mov	fp, r3
 8001620:	4653      	mov	r3, sl
 8001622:	041f      	lsls	r7, r3, #16
 8001624:	4643      	mov	r3, r8
 8001626:	041b      	lsls	r3, r3, #16
 8001628:	0c1b      	lsrs	r3, r3, #16
 800162a:	4698      	mov	r8, r3
 800162c:	003b      	movs	r3, r7
 800162e:	4443      	add	r3, r8
 8001630:	9304      	str	r3, [sp, #16]
 8001632:	0c33      	lsrs	r3, r6, #16
 8001634:	0436      	lsls	r6, r6, #16
 8001636:	0c36      	lsrs	r6, r6, #16
 8001638:	4698      	mov	r8, r3
 800163a:	0033      	movs	r3, r6
 800163c:	4343      	muls	r3, r0
 800163e:	4699      	mov	r9, r3
 8001640:	4643      	mov	r3, r8
 8001642:	4343      	muls	r3, r0
 8001644:	002f      	movs	r7, r5
 8001646:	469a      	mov	sl, r3
 8001648:	4643      	mov	r3, r8
 800164a:	4377      	muls	r7, r6
 800164c:	435d      	muls	r5, r3
 800164e:	0c38      	lsrs	r0, r7, #16
 8001650:	444d      	add	r5, r9
 8001652:	1945      	adds	r5, r0, r5
 8001654:	45a9      	cmp	r9, r5
 8001656:	d903      	bls.n	8001660 <__aeabi_dmul+0x168>
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	025b      	lsls	r3, r3, #9
 800165c:	4699      	mov	r9, r3
 800165e:	44ca      	add	sl, r9
 8001660:	043f      	lsls	r7, r7, #16
 8001662:	0c28      	lsrs	r0, r5, #16
 8001664:	0c3f      	lsrs	r7, r7, #16
 8001666:	042d      	lsls	r5, r5, #16
 8001668:	19ed      	adds	r5, r5, r7
 800166a:	0c27      	lsrs	r7, r4, #16
 800166c:	0424      	lsls	r4, r4, #16
 800166e:	0c24      	lsrs	r4, r4, #16
 8001670:	0003      	movs	r3, r0
 8001672:	0020      	movs	r0, r4
 8001674:	4350      	muls	r0, r2
 8001676:	437a      	muls	r2, r7
 8001678:	4691      	mov	r9, r2
 800167a:	003a      	movs	r2, r7
 800167c:	4453      	add	r3, sl
 800167e:	9305      	str	r3, [sp, #20]
 8001680:	0c03      	lsrs	r3, r0, #16
 8001682:	469a      	mov	sl, r3
 8001684:	434a      	muls	r2, r1
 8001686:	4361      	muls	r1, r4
 8001688:	4449      	add	r1, r9
 800168a:	4451      	add	r1, sl
 800168c:	44ab      	add	fp, r5
 800168e:	4589      	cmp	r9, r1
 8001690:	d903      	bls.n	800169a <__aeabi_dmul+0x1a2>
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	025b      	lsls	r3, r3, #9
 8001696:	4699      	mov	r9, r3
 8001698:	444a      	add	r2, r9
 800169a:	0400      	lsls	r0, r0, #16
 800169c:	0c0b      	lsrs	r3, r1, #16
 800169e:	0c00      	lsrs	r0, r0, #16
 80016a0:	0409      	lsls	r1, r1, #16
 80016a2:	1809      	adds	r1, r1, r0
 80016a4:	0020      	movs	r0, r4
 80016a6:	4699      	mov	r9, r3
 80016a8:	4643      	mov	r3, r8
 80016aa:	4370      	muls	r0, r6
 80016ac:	435c      	muls	r4, r3
 80016ae:	437e      	muls	r6, r7
 80016b0:	435f      	muls	r7, r3
 80016b2:	0c03      	lsrs	r3, r0, #16
 80016b4:	4698      	mov	r8, r3
 80016b6:	19a4      	adds	r4, r4, r6
 80016b8:	4444      	add	r4, r8
 80016ba:	444a      	add	r2, r9
 80016bc:	9703      	str	r7, [sp, #12]
 80016be:	42a6      	cmp	r6, r4
 80016c0:	d904      	bls.n	80016cc <__aeabi_dmul+0x1d4>
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	025b      	lsls	r3, r3, #9
 80016c6:	4698      	mov	r8, r3
 80016c8:	4447      	add	r7, r8
 80016ca:	9703      	str	r7, [sp, #12]
 80016cc:	0423      	lsls	r3, r4, #16
 80016ce:	9e02      	ldr	r6, [sp, #8]
 80016d0:	469a      	mov	sl, r3
 80016d2:	9b05      	ldr	r3, [sp, #20]
 80016d4:	445e      	add	r6, fp
 80016d6:	4698      	mov	r8, r3
 80016d8:	42ae      	cmp	r6, r5
 80016da:	41ad      	sbcs	r5, r5
 80016dc:	1876      	adds	r6, r6, r1
 80016de:	428e      	cmp	r6, r1
 80016e0:	4189      	sbcs	r1, r1
 80016e2:	0400      	lsls	r0, r0, #16
 80016e4:	0c00      	lsrs	r0, r0, #16
 80016e6:	4450      	add	r0, sl
 80016e8:	4440      	add	r0, r8
 80016ea:	426d      	negs	r5, r5
 80016ec:	1947      	adds	r7, r0, r5
 80016ee:	46b8      	mov	r8, r7
 80016f0:	4693      	mov	fp, r2
 80016f2:	4249      	negs	r1, r1
 80016f4:	4689      	mov	r9, r1
 80016f6:	44c3      	add	fp, r8
 80016f8:	44d9      	add	r9, fp
 80016fa:	4298      	cmp	r0, r3
 80016fc:	4180      	sbcs	r0, r0
 80016fe:	45a8      	cmp	r8, r5
 8001700:	41ad      	sbcs	r5, r5
 8001702:	4593      	cmp	fp, r2
 8001704:	4192      	sbcs	r2, r2
 8001706:	4589      	cmp	r9, r1
 8001708:	4189      	sbcs	r1, r1
 800170a:	426d      	negs	r5, r5
 800170c:	4240      	negs	r0, r0
 800170e:	4328      	orrs	r0, r5
 8001710:	0c24      	lsrs	r4, r4, #16
 8001712:	4252      	negs	r2, r2
 8001714:	4249      	negs	r1, r1
 8001716:	430a      	orrs	r2, r1
 8001718:	9b03      	ldr	r3, [sp, #12]
 800171a:	1900      	adds	r0, r0, r4
 800171c:	1880      	adds	r0, r0, r2
 800171e:	18c7      	adds	r7, r0, r3
 8001720:	464b      	mov	r3, r9
 8001722:	0ddc      	lsrs	r4, r3, #23
 8001724:	9b04      	ldr	r3, [sp, #16]
 8001726:	0275      	lsls	r5, r6, #9
 8001728:	431d      	orrs	r5, r3
 800172a:	1e6a      	subs	r2, r5, #1
 800172c:	4195      	sbcs	r5, r2
 800172e:	464b      	mov	r3, r9
 8001730:	0df6      	lsrs	r6, r6, #23
 8001732:	027f      	lsls	r7, r7, #9
 8001734:	4335      	orrs	r5, r6
 8001736:	025a      	lsls	r2, r3, #9
 8001738:	433c      	orrs	r4, r7
 800173a:	4315      	orrs	r5, r2
 800173c:	01fb      	lsls	r3, r7, #7
 800173e:	d400      	bmi.n	8001742 <__aeabi_dmul+0x24a>
 8001740:	e11c      	b.n	800197c <__aeabi_dmul+0x484>
 8001742:	2101      	movs	r1, #1
 8001744:	086a      	lsrs	r2, r5, #1
 8001746:	400d      	ands	r5, r1
 8001748:	4315      	orrs	r5, r2
 800174a:	07e2      	lsls	r2, r4, #31
 800174c:	4315      	orrs	r5, r2
 800174e:	0864      	lsrs	r4, r4, #1
 8001750:	494f      	ldr	r1, [pc, #316]	; (8001890 <__aeabi_dmul+0x398>)
 8001752:	4461      	add	r1, ip
 8001754:	2900      	cmp	r1, #0
 8001756:	dc00      	bgt.n	800175a <__aeabi_dmul+0x262>
 8001758:	e0b0      	b.n	80018bc <__aeabi_dmul+0x3c4>
 800175a:	076b      	lsls	r3, r5, #29
 800175c:	d009      	beq.n	8001772 <__aeabi_dmul+0x27a>
 800175e:	220f      	movs	r2, #15
 8001760:	402a      	ands	r2, r5
 8001762:	2a04      	cmp	r2, #4
 8001764:	d005      	beq.n	8001772 <__aeabi_dmul+0x27a>
 8001766:	1d2a      	adds	r2, r5, #4
 8001768:	42aa      	cmp	r2, r5
 800176a:	41ad      	sbcs	r5, r5
 800176c:	426d      	negs	r5, r5
 800176e:	1964      	adds	r4, r4, r5
 8001770:	0015      	movs	r5, r2
 8001772:	01e3      	lsls	r3, r4, #7
 8001774:	d504      	bpl.n	8001780 <__aeabi_dmul+0x288>
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	4a46      	ldr	r2, [pc, #280]	; (8001894 <__aeabi_dmul+0x39c>)
 800177a:	00c9      	lsls	r1, r1, #3
 800177c:	4014      	ands	r4, r2
 800177e:	4461      	add	r1, ip
 8001780:	4a45      	ldr	r2, [pc, #276]	; (8001898 <__aeabi_dmul+0x3a0>)
 8001782:	4291      	cmp	r1, r2
 8001784:	dd00      	ble.n	8001788 <__aeabi_dmul+0x290>
 8001786:	e726      	b.n	80015d6 <__aeabi_dmul+0xde>
 8001788:	0762      	lsls	r2, r4, #29
 800178a:	08ed      	lsrs	r5, r5, #3
 800178c:	0264      	lsls	r4, r4, #9
 800178e:	0549      	lsls	r1, r1, #21
 8001790:	4315      	orrs	r5, r2
 8001792:	0b24      	lsrs	r4, r4, #12
 8001794:	0d4a      	lsrs	r2, r1, #21
 8001796:	e710      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001798:	4652      	mov	r2, sl
 800179a:	4332      	orrs	r2, r6
 800179c:	d100      	bne.n	80017a0 <__aeabi_dmul+0x2a8>
 800179e:	e07f      	b.n	80018a0 <__aeabi_dmul+0x3a8>
 80017a0:	2e00      	cmp	r6, #0
 80017a2:	d100      	bne.n	80017a6 <__aeabi_dmul+0x2ae>
 80017a4:	e0dc      	b.n	8001960 <__aeabi_dmul+0x468>
 80017a6:	0030      	movs	r0, r6
 80017a8:	f000 fd4e 	bl	8002248 <__clzsi2>
 80017ac:	0002      	movs	r2, r0
 80017ae:	3a0b      	subs	r2, #11
 80017b0:	231d      	movs	r3, #29
 80017b2:	0001      	movs	r1, r0
 80017b4:	1a9b      	subs	r3, r3, r2
 80017b6:	4652      	mov	r2, sl
 80017b8:	3908      	subs	r1, #8
 80017ba:	40da      	lsrs	r2, r3
 80017bc:	408e      	lsls	r6, r1
 80017be:	4316      	orrs	r6, r2
 80017c0:	4652      	mov	r2, sl
 80017c2:	408a      	lsls	r2, r1
 80017c4:	9b00      	ldr	r3, [sp, #0]
 80017c6:	4935      	ldr	r1, [pc, #212]	; (800189c <__aeabi_dmul+0x3a4>)
 80017c8:	1a18      	subs	r0, r3, r0
 80017ca:	0003      	movs	r3, r0
 80017cc:	468c      	mov	ip, r1
 80017ce:	4463      	add	r3, ip
 80017d0:	2000      	movs	r0, #0
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	e6d3      	b.n	800157e <__aeabi_dmul+0x86>
 80017d6:	0025      	movs	r5, r4
 80017d8:	4305      	orrs	r5, r0
 80017da:	d04a      	beq.n	8001872 <__aeabi_dmul+0x37a>
 80017dc:	2c00      	cmp	r4, #0
 80017de:	d100      	bne.n	80017e2 <__aeabi_dmul+0x2ea>
 80017e0:	e0b0      	b.n	8001944 <__aeabi_dmul+0x44c>
 80017e2:	0020      	movs	r0, r4
 80017e4:	f000 fd30 	bl	8002248 <__clzsi2>
 80017e8:	0001      	movs	r1, r0
 80017ea:	0002      	movs	r2, r0
 80017ec:	390b      	subs	r1, #11
 80017ee:	231d      	movs	r3, #29
 80017f0:	0010      	movs	r0, r2
 80017f2:	1a5b      	subs	r3, r3, r1
 80017f4:	0031      	movs	r1, r6
 80017f6:	0035      	movs	r5, r6
 80017f8:	3808      	subs	r0, #8
 80017fa:	4084      	lsls	r4, r0
 80017fc:	40d9      	lsrs	r1, r3
 80017fe:	4085      	lsls	r5, r0
 8001800:	430c      	orrs	r4, r1
 8001802:	4826      	ldr	r0, [pc, #152]	; (800189c <__aeabi_dmul+0x3a4>)
 8001804:	1a83      	subs	r3, r0, r2
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2300      	movs	r3, #0
 800180a:	4699      	mov	r9, r3
 800180c:	469b      	mov	fp, r3
 800180e:	e697      	b.n	8001540 <__aeabi_dmul+0x48>
 8001810:	0005      	movs	r5, r0
 8001812:	4325      	orrs	r5, r4
 8001814:	d126      	bne.n	8001864 <__aeabi_dmul+0x36c>
 8001816:	2208      	movs	r2, #8
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2302      	movs	r3, #2
 800181c:	2400      	movs	r4, #0
 800181e:	4691      	mov	r9, r2
 8001820:	469b      	mov	fp, r3
 8001822:	e68d      	b.n	8001540 <__aeabi_dmul+0x48>
 8001824:	4652      	mov	r2, sl
 8001826:	9b00      	ldr	r3, [sp, #0]
 8001828:	4332      	orrs	r2, r6
 800182a:	d110      	bne.n	800184e <__aeabi_dmul+0x356>
 800182c:	4915      	ldr	r1, [pc, #84]	; (8001884 <__aeabi_dmul+0x38c>)
 800182e:	2600      	movs	r6, #0
 8001830:	468c      	mov	ip, r1
 8001832:	4463      	add	r3, ip
 8001834:	4649      	mov	r1, r9
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	2302      	movs	r3, #2
 800183a:	4319      	orrs	r1, r3
 800183c:	4689      	mov	r9, r1
 800183e:	2002      	movs	r0, #2
 8001840:	e69d      	b.n	800157e <__aeabi_dmul+0x86>
 8001842:	465b      	mov	r3, fp
 8001844:	9701      	str	r7, [sp, #4]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d000      	beq.n	800184c <__aeabi_dmul+0x354>
 800184a:	e6ad      	b.n	80015a8 <__aeabi_dmul+0xb0>
 800184c:	e6c3      	b.n	80015d6 <__aeabi_dmul+0xde>
 800184e:	4a0d      	ldr	r2, [pc, #52]	; (8001884 <__aeabi_dmul+0x38c>)
 8001850:	2003      	movs	r0, #3
 8001852:	4694      	mov	ip, r2
 8001854:	4463      	add	r3, ip
 8001856:	464a      	mov	r2, r9
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	2303      	movs	r3, #3
 800185c:	431a      	orrs	r2, r3
 800185e:	4691      	mov	r9, r2
 8001860:	4652      	mov	r2, sl
 8001862:	e68c      	b.n	800157e <__aeabi_dmul+0x86>
 8001864:	220c      	movs	r2, #12
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	2303      	movs	r3, #3
 800186a:	0005      	movs	r5, r0
 800186c:	4691      	mov	r9, r2
 800186e:	469b      	mov	fp, r3
 8001870:	e666      	b.n	8001540 <__aeabi_dmul+0x48>
 8001872:	2304      	movs	r3, #4
 8001874:	4699      	mov	r9, r3
 8001876:	2300      	movs	r3, #0
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	2400      	movs	r4, #0
 800187e:	469b      	mov	fp, r3
 8001880:	e65e      	b.n	8001540 <__aeabi_dmul+0x48>
 8001882:	46c0      	nop			; (mov r8, r8)
 8001884:	000007ff 	.word	0x000007ff
 8001888:	fffffc01 	.word	0xfffffc01
 800188c:	080082e8 	.word	0x080082e8
 8001890:	000003ff 	.word	0x000003ff
 8001894:	feffffff 	.word	0xfeffffff
 8001898:	000007fe 	.word	0x000007fe
 800189c:	fffffc0d 	.word	0xfffffc0d
 80018a0:	4649      	mov	r1, r9
 80018a2:	2301      	movs	r3, #1
 80018a4:	4319      	orrs	r1, r3
 80018a6:	4689      	mov	r9, r1
 80018a8:	2600      	movs	r6, #0
 80018aa:	2001      	movs	r0, #1
 80018ac:	e667      	b.n	800157e <__aeabi_dmul+0x86>
 80018ae:	2300      	movs	r3, #0
 80018b0:	2480      	movs	r4, #128	; 0x80
 80018b2:	2500      	movs	r5, #0
 80018b4:	4a43      	ldr	r2, [pc, #268]	; (80019c4 <__aeabi_dmul+0x4cc>)
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	0324      	lsls	r4, r4, #12
 80018ba:	e67e      	b.n	80015ba <__aeabi_dmul+0xc2>
 80018bc:	2001      	movs	r0, #1
 80018be:	1a40      	subs	r0, r0, r1
 80018c0:	2838      	cmp	r0, #56	; 0x38
 80018c2:	dd00      	ble.n	80018c6 <__aeabi_dmul+0x3ce>
 80018c4:	e676      	b.n	80015b4 <__aeabi_dmul+0xbc>
 80018c6:	281f      	cmp	r0, #31
 80018c8:	dd5b      	ble.n	8001982 <__aeabi_dmul+0x48a>
 80018ca:	221f      	movs	r2, #31
 80018cc:	0023      	movs	r3, r4
 80018ce:	4252      	negs	r2, r2
 80018d0:	1a51      	subs	r1, r2, r1
 80018d2:	40cb      	lsrs	r3, r1
 80018d4:	0019      	movs	r1, r3
 80018d6:	2820      	cmp	r0, #32
 80018d8:	d003      	beq.n	80018e2 <__aeabi_dmul+0x3ea>
 80018da:	4a3b      	ldr	r2, [pc, #236]	; (80019c8 <__aeabi_dmul+0x4d0>)
 80018dc:	4462      	add	r2, ip
 80018de:	4094      	lsls	r4, r2
 80018e0:	4325      	orrs	r5, r4
 80018e2:	1e6a      	subs	r2, r5, #1
 80018e4:	4195      	sbcs	r5, r2
 80018e6:	002a      	movs	r2, r5
 80018e8:	430a      	orrs	r2, r1
 80018ea:	2107      	movs	r1, #7
 80018ec:	000d      	movs	r5, r1
 80018ee:	2400      	movs	r4, #0
 80018f0:	4015      	ands	r5, r2
 80018f2:	4211      	tst	r1, r2
 80018f4:	d05b      	beq.n	80019ae <__aeabi_dmul+0x4b6>
 80018f6:	210f      	movs	r1, #15
 80018f8:	2400      	movs	r4, #0
 80018fa:	4011      	ands	r1, r2
 80018fc:	2904      	cmp	r1, #4
 80018fe:	d053      	beq.n	80019a8 <__aeabi_dmul+0x4b0>
 8001900:	1d11      	adds	r1, r2, #4
 8001902:	4291      	cmp	r1, r2
 8001904:	4192      	sbcs	r2, r2
 8001906:	4252      	negs	r2, r2
 8001908:	18a4      	adds	r4, r4, r2
 800190a:	000a      	movs	r2, r1
 800190c:	0223      	lsls	r3, r4, #8
 800190e:	d54b      	bpl.n	80019a8 <__aeabi_dmul+0x4b0>
 8001910:	2201      	movs	r2, #1
 8001912:	2400      	movs	r4, #0
 8001914:	2500      	movs	r5, #0
 8001916:	e650      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001918:	2380      	movs	r3, #128	; 0x80
 800191a:	031b      	lsls	r3, r3, #12
 800191c:	421c      	tst	r4, r3
 800191e:	d009      	beq.n	8001934 <__aeabi_dmul+0x43c>
 8001920:	421e      	tst	r6, r3
 8001922:	d107      	bne.n	8001934 <__aeabi_dmul+0x43c>
 8001924:	4333      	orrs	r3, r6
 8001926:	031c      	lsls	r4, r3, #12
 8001928:	4643      	mov	r3, r8
 800192a:	0015      	movs	r5, r2
 800192c:	0b24      	lsrs	r4, r4, #12
 800192e:	4a25      	ldr	r2, [pc, #148]	; (80019c4 <__aeabi_dmul+0x4cc>)
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	e642      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	0312      	lsls	r2, r2, #12
 8001938:	4314      	orrs	r4, r2
 800193a:	0324      	lsls	r4, r4, #12
 800193c:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <__aeabi_dmul+0x4cc>)
 800193e:	0b24      	lsrs	r4, r4, #12
 8001940:	9701      	str	r7, [sp, #4]
 8001942:	e63a      	b.n	80015ba <__aeabi_dmul+0xc2>
 8001944:	f000 fc80 	bl	8002248 <__clzsi2>
 8001948:	0001      	movs	r1, r0
 800194a:	0002      	movs	r2, r0
 800194c:	3115      	adds	r1, #21
 800194e:	3220      	adds	r2, #32
 8001950:	291c      	cmp	r1, #28
 8001952:	dc00      	bgt.n	8001956 <__aeabi_dmul+0x45e>
 8001954:	e74b      	b.n	80017ee <__aeabi_dmul+0x2f6>
 8001956:	0034      	movs	r4, r6
 8001958:	3808      	subs	r0, #8
 800195a:	2500      	movs	r5, #0
 800195c:	4084      	lsls	r4, r0
 800195e:	e750      	b.n	8001802 <__aeabi_dmul+0x30a>
 8001960:	f000 fc72 	bl	8002248 <__clzsi2>
 8001964:	0003      	movs	r3, r0
 8001966:	001a      	movs	r2, r3
 8001968:	3215      	adds	r2, #21
 800196a:	3020      	adds	r0, #32
 800196c:	2a1c      	cmp	r2, #28
 800196e:	dc00      	bgt.n	8001972 <__aeabi_dmul+0x47a>
 8001970:	e71e      	b.n	80017b0 <__aeabi_dmul+0x2b8>
 8001972:	4656      	mov	r6, sl
 8001974:	3b08      	subs	r3, #8
 8001976:	2200      	movs	r2, #0
 8001978:	409e      	lsls	r6, r3
 800197a:	e723      	b.n	80017c4 <__aeabi_dmul+0x2cc>
 800197c:	9b00      	ldr	r3, [sp, #0]
 800197e:	469c      	mov	ip, r3
 8001980:	e6e6      	b.n	8001750 <__aeabi_dmul+0x258>
 8001982:	4912      	ldr	r1, [pc, #72]	; (80019cc <__aeabi_dmul+0x4d4>)
 8001984:	0022      	movs	r2, r4
 8001986:	4461      	add	r1, ip
 8001988:	002e      	movs	r6, r5
 800198a:	408d      	lsls	r5, r1
 800198c:	408a      	lsls	r2, r1
 800198e:	40c6      	lsrs	r6, r0
 8001990:	1e69      	subs	r1, r5, #1
 8001992:	418d      	sbcs	r5, r1
 8001994:	4332      	orrs	r2, r6
 8001996:	432a      	orrs	r2, r5
 8001998:	40c4      	lsrs	r4, r0
 800199a:	0753      	lsls	r3, r2, #29
 800199c:	d0b6      	beq.n	800190c <__aeabi_dmul+0x414>
 800199e:	210f      	movs	r1, #15
 80019a0:	4011      	ands	r1, r2
 80019a2:	2904      	cmp	r1, #4
 80019a4:	d1ac      	bne.n	8001900 <__aeabi_dmul+0x408>
 80019a6:	e7b1      	b.n	800190c <__aeabi_dmul+0x414>
 80019a8:	0765      	lsls	r5, r4, #29
 80019aa:	0264      	lsls	r4, r4, #9
 80019ac:	0b24      	lsrs	r4, r4, #12
 80019ae:	08d2      	lsrs	r2, r2, #3
 80019b0:	4315      	orrs	r5, r2
 80019b2:	2200      	movs	r2, #0
 80019b4:	e601      	b.n	80015ba <__aeabi_dmul+0xc2>
 80019b6:	2280      	movs	r2, #128	; 0x80
 80019b8:	0312      	lsls	r2, r2, #12
 80019ba:	4314      	orrs	r4, r2
 80019bc:	0324      	lsls	r4, r4, #12
 80019be:	4a01      	ldr	r2, [pc, #4]	; (80019c4 <__aeabi_dmul+0x4cc>)
 80019c0:	0b24      	lsrs	r4, r4, #12
 80019c2:	e5fa      	b.n	80015ba <__aeabi_dmul+0xc2>
 80019c4:	000007ff 	.word	0x000007ff
 80019c8:	0000043e 	.word	0x0000043e
 80019cc:	0000041e 	.word	0x0000041e

080019d0 <__aeabi_dsub>:
 80019d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019d2:	4657      	mov	r7, sl
 80019d4:	464e      	mov	r6, r9
 80019d6:	4645      	mov	r5, r8
 80019d8:	46de      	mov	lr, fp
 80019da:	b5e0      	push	{r5, r6, r7, lr}
 80019dc:	001e      	movs	r6, r3
 80019de:	0017      	movs	r7, r2
 80019e0:	004a      	lsls	r2, r1, #1
 80019e2:	030b      	lsls	r3, r1, #12
 80019e4:	0d52      	lsrs	r2, r2, #21
 80019e6:	0a5b      	lsrs	r3, r3, #9
 80019e8:	4690      	mov	r8, r2
 80019ea:	0f42      	lsrs	r2, r0, #29
 80019ec:	431a      	orrs	r2, r3
 80019ee:	0fcd      	lsrs	r5, r1, #31
 80019f0:	4ccd      	ldr	r4, [pc, #820]	; (8001d28 <__aeabi_dsub+0x358>)
 80019f2:	0331      	lsls	r1, r6, #12
 80019f4:	00c3      	lsls	r3, r0, #3
 80019f6:	4694      	mov	ip, r2
 80019f8:	0070      	lsls	r0, r6, #1
 80019fa:	0f7a      	lsrs	r2, r7, #29
 80019fc:	0a49      	lsrs	r1, r1, #9
 80019fe:	00ff      	lsls	r7, r7, #3
 8001a00:	469a      	mov	sl, r3
 8001a02:	46b9      	mov	r9, r7
 8001a04:	0d40      	lsrs	r0, r0, #21
 8001a06:	0ff6      	lsrs	r6, r6, #31
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	42a0      	cmp	r0, r4
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x40>
 8001a0e:	e0b1      	b.n	8001b74 <__aeabi_dsub+0x1a4>
 8001a10:	2201      	movs	r2, #1
 8001a12:	4056      	eors	r6, r2
 8001a14:	46b3      	mov	fp, r6
 8001a16:	42b5      	cmp	r5, r6
 8001a18:	d100      	bne.n	8001a1c <__aeabi_dsub+0x4c>
 8001a1a:	e088      	b.n	8001b2e <__aeabi_dsub+0x15e>
 8001a1c:	4642      	mov	r2, r8
 8001a1e:	1a12      	subs	r2, r2, r0
 8001a20:	2a00      	cmp	r2, #0
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dsub+0x56>
 8001a24:	e0ae      	b.n	8001b84 <__aeabi_dsub+0x1b4>
 8001a26:	2800      	cmp	r0, #0
 8001a28:	d100      	bne.n	8001a2c <__aeabi_dsub+0x5c>
 8001a2a:	e0c1      	b.n	8001bb0 <__aeabi_dsub+0x1e0>
 8001a2c:	48be      	ldr	r0, [pc, #760]	; (8001d28 <__aeabi_dsub+0x358>)
 8001a2e:	4580      	cmp	r8, r0
 8001a30:	d100      	bne.n	8001a34 <__aeabi_dsub+0x64>
 8001a32:	e151      	b.n	8001cd8 <__aeabi_dsub+0x308>
 8001a34:	2080      	movs	r0, #128	; 0x80
 8001a36:	0400      	lsls	r0, r0, #16
 8001a38:	4301      	orrs	r1, r0
 8001a3a:	2a38      	cmp	r2, #56	; 0x38
 8001a3c:	dd00      	ble.n	8001a40 <__aeabi_dsub+0x70>
 8001a3e:	e17b      	b.n	8001d38 <__aeabi_dsub+0x368>
 8001a40:	2a1f      	cmp	r2, #31
 8001a42:	dd00      	ble.n	8001a46 <__aeabi_dsub+0x76>
 8001a44:	e1ee      	b.n	8001e24 <__aeabi_dsub+0x454>
 8001a46:	2020      	movs	r0, #32
 8001a48:	003e      	movs	r6, r7
 8001a4a:	1a80      	subs	r0, r0, r2
 8001a4c:	000c      	movs	r4, r1
 8001a4e:	40d6      	lsrs	r6, r2
 8001a50:	40d1      	lsrs	r1, r2
 8001a52:	4087      	lsls	r7, r0
 8001a54:	4662      	mov	r2, ip
 8001a56:	4084      	lsls	r4, r0
 8001a58:	1a52      	subs	r2, r2, r1
 8001a5a:	1e78      	subs	r0, r7, #1
 8001a5c:	4187      	sbcs	r7, r0
 8001a5e:	4694      	mov	ip, r2
 8001a60:	4334      	orrs	r4, r6
 8001a62:	4327      	orrs	r7, r4
 8001a64:	1bdc      	subs	r4, r3, r7
 8001a66:	42a3      	cmp	r3, r4
 8001a68:	419b      	sbcs	r3, r3
 8001a6a:	4662      	mov	r2, ip
 8001a6c:	425b      	negs	r3, r3
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	4699      	mov	r9, r3
 8001a72:	464b      	mov	r3, r9
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	d400      	bmi.n	8001a7a <__aeabi_dsub+0xaa>
 8001a78:	e118      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001a7a:	464b      	mov	r3, r9
 8001a7c:	0258      	lsls	r0, r3, #9
 8001a7e:	0a43      	lsrs	r3, r0, #9
 8001a80:	4699      	mov	r9, r3
 8001a82:	464b      	mov	r3, r9
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dsub+0xba>
 8001a88:	e137      	b.n	8001cfa <__aeabi_dsub+0x32a>
 8001a8a:	4648      	mov	r0, r9
 8001a8c:	f000 fbdc 	bl	8002248 <__clzsi2>
 8001a90:	0001      	movs	r1, r0
 8001a92:	3908      	subs	r1, #8
 8001a94:	2320      	movs	r3, #32
 8001a96:	0022      	movs	r2, r4
 8001a98:	4648      	mov	r0, r9
 8001a9a:	1a5b      	subs	r3, r3, r1
 8001a9c:	40da      	lsrs	r2, r3
 8001a9e:	4088      	lsls	r0, r1
 8001aa0:	408c      	lsls	r4, r1
 8001aa2:	4643      	mov	r3, r8
 8001aa4:	4310      	orrs	r0, r2
 8001aa6:	4588      	cmp	r8, r1
 8001aa8:	dd00      	ble.n	8001aac <__aeabi_dsub+0xdc>
 8001aaa:	e136      	b.n	8001d1a <__aeabi_dsub+0x34a>
 8001aac:	1ac9      	subs	r1, r1, r3
 8001aae:	1c4b      	adds	r3, r1, #1
 8001ab0:	2b1f      	cmp	r3, #31
 8001ab2:	dd00      	ble.n	8001ab6 <__aeabi_dsub+0xe6>
 8001ab4:	e0ea      	b.n	8001c8c <__aeabi_dsub+0x2bc>
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	0026      	movs	r6, r4
 8001aba:	1ad2      	subs	r2, r2, r3
 8001abc:	0001      	movs	r1, r0
 8001abe:	4094      	lsls	r4, r2
 8001ac0:	40de      	lsrs	r6, r3
 8001ac2:	40d8      	lsrs	r0, r3
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	4091      	lsls	r1, r2
 8001ac8:	1e62      	subs	r2, r4, #1
 8001aca:	4194      	sbcs	r4, r2
 8001acc:	4681      	mov	r9, r0
 8001ace:	4698      	mov	r8, r3
 8001ad0:	4331      	orrs	r1, r6
 8001ad2:	430c      	orrs	r4, r1
 8001ad4:	0763      	lsls	r3, r4, #29
 8001ad6:	d009      	beq.n	8001aec <__aeabi_dsub+0x11c>
 8001ad8:	230f      	movs	r3, #15
 8001ada:	4023      	ands	r3, r4
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d005      	beq.n	8001aec <__aeabi_dsub+0x11c>
 8001ae0:	1d23      	adds	r3, r4, #4
 8001ae2:	42a3      	cmp	r3, r4
 8001ae4:	41a4      	sbcs	r4, r4
 8001ae6:	4264      	negs	r4, r4
 8001ae8:	44a1      	add	r9, r4
 8001aea:	001c      	movs	r4, r3
 8001aec:	464b      	mov	r3, r9
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dsub+0x124>
 8001af2:	e0de      	b.n	8001cb2 <__aeabi_dsub+0x2e2>
 8001af4:	4641      	mov	r1, r8
 8001af6:	4b8c      	ldr	r3, [pc, #560]	; (8001d28 <__aeabi_dsub+0x358>)
 8001af8:	3101      	adds	r1, #1
 8001afa:	4299      	cmp	r1, r3
 8001afc:	d100      	bne.n	8001b00 <__aeabi_dsub+0x130>
 8001afe:	e0e7      	b.n	8001cd0 <__aeabi_dsub+0x300>
 8001b00:	464b      	mov	r3, r9
 8001b02:	488a      	ldr	r0, [pc, #552]	; (8001d2c <__aeabi_dsub+0x35c>)
 8001b04:	08e4      	lsrs	r4, r4, #3
 8001b06:	4003      	ands	r3, r0
 8001b08:	0018      	movs	r0, r3
 8001b0a:	0549      	lsls	r1, r1, #21
 8001b0c:	075b      	lsls	r3, r3, #29
 8001b0e:	0240      	lsls	r0, r0, #9
 8001b10:	4323      	orrs	r3, r4
 8001b12:	0d4a      	lsrs	r2, r1, #21
 8001b14:	0b04      	lsrs	r4, r0, #12
 8001b16:	0512      	lsls	r2, r2, #20
 8001b18:	07ed      	lsls	r5, r5, #31
 8001b1a:	4322      	orrs	r2, r4
 8001b1c:	432a      	orrs	r2, r5
 8001b1e:	0018      	movs	r0, r3
 8001b20:	0011      	movs	r1, r2
 8001b22:	bcf0      	pop	{r4, r5, r6, r7}
 8001b24:	46bb      	mov	fp, r7
 8001b26:	46b2      	mov	sl, r6
 8001b28:	46a9      	mov	r9, r5
 8001b2a:	46a0      	mov	r8, r4
 8001b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b2e:	4642      	mov	r2, r8
 8001b30:	1a12      	subs	r2, r2, r0
 8001b32:	2a00      	cmp	r2, #0
 8001b34:	dd52      	ble.n	8001bdc <__aeabi_dsub+0x20c>
 8001b36:	2800      	cmp	r0, #0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_dsub+0x16c>
 8001b3a:	e09c      	b.n	8001c76 <__aeabi_dsub+0x2a6>
 8001b3c:	45a0      	cmp	r8, r4
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x172>
 8001b40:	e0ca      	b.n	8001cd8 <__aeabi_dsub+0x308>
 8001b42:	2080      	movs	r0, #128	; 0x80
 8001b44:	0400      	lsls	r0, r0, #16
 8001b46:	4301      	orrs	r1, r0
 8001b48:	2a38      	cmp	r2, #56	; 0x38
 8001b4a:	dd00      	ble.n	8001b4e <__aeabi_dsub+0x17e>
 8001b4c:	e149      	b.n	8001de2 <__aeabi_dsub+0x412>
 8001b4e:	2a1f      	cmp	r2, #31
 8001b50:	dc00      	bgt.n	8001b54 <__aeabi_dsub+0x184>
 8001b52:	e197      	b.n	8001e84 <__aeabi_dsub+0x4b4>
 8001b54:	0010      	movs	r0, r2
 8001b56:	000e      	movs	r6, r1
 8001b58:	3820      	subs	r0, #32
 8001b5a:	40c6      	lsrs	r6, r0
 8001b5c:	2a20      	cmp	r2, #32
 8001b5e:	d004      	beq.n	8001b6a <__aeabi_dsub+0x19a>
 8001b60:	2040      	movs	r0, #64	; 0x40
 8001b62:	1a82      	subs	r2, r0, r2
 8001b64:	4091      	lsls	r1, r2
 8001b66:	430f      	orrs	r7, r1
 8001b68:	46b9      	mov	r9, r7
 8001b6a:	464c      	mov	r4, r9
 8001b6c:	1e62      	subs	r2, r4, #1
 8001b6e:	4194      	sbcs	r4, r2
 8001b70:	4334      	orrs	r4, r6
 8001b72:	e13a      	b.n	8001dea <__aeabi_dsub+0x41a>
 8001b74:	000a      	movs	r2, r1
 8001b76:	433a      	orrs	r2, r7
 8001b78:	d028      	beq.n	8001bcc <__aeabi_dsub+0x1fc>
 8001b7a:	46b3      	mov	fp, r6
 8001b7c:	42b5      	cmp	r5, r6
 8001b7e:	d02b      	beq.n	8001bd8 <__aeabi_dsub+0x208>
 8001b80:	4a6b      	ldr	r2, [pc, #428]	; (8001d30 <__aeabi_dsub+0x360>)
 8001b82:	4442      	add	r2, r8
 8001b84:	2a00      	cmp	r2, #0
 8001b86:	d05d      	beq.n	8001c44 <__aeabi_dsub+0x274>
 8001b88:	4642      	mov	r2, r8
 8001b8a:	4644      	mov	r4, r8
 8001b8c:	1a82      	subs	r2, r0, r2
 8001b8e:	2c00      	cmp	r4, #0
 8001b90:	d000      	beq.n	8001b94 <__aeabi_dsub+0x1c4>
 8001b92:	e0f5      	b.n	8001d80 <__aeabi_dsub+0x3b0>
 8001b94:	4665      	mov	r5, ip
 8001b96:	431d      	orrs	r5, r3
 8001b98:	d100      	bne.n	8001b9c <__aeabi_dsub+0x1cc>
 8001b9a:	e19c      	b.n	8001ed6 <__aeabi_dsub+0x506>
 8001b9c:	1e55      	subs	r5, r2, #1
 8001b9e:	2a01      	cmp	r2, #1
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x1d4>
 8001ba2:	e1fb      	b.n	8001f9c <__aeabi_dsub+0x5cc>
 8001ba4:	4c60      	ldr	r4, [pc, #384]	; (8001d28 <__aeabi_dsub+0x358>)
 8001ba6:	42a2      	cmp	r2, r4
 8001ba8:	d100      	bne.n	8001bac <__aeabi_dsub+0x1dc>
 8001baa:	e1bd      	b.n	8001f28 <__aeabi_dsub+0x558>
 8001bac:	002a      	movs	r2, r5
 8001bae:	e0f0      	b.n	8001d92 <__aeabi_dsub+0x3c2>
 8001bb0:	0008      	movs	r0, r1
 8001bb2:	4338      	orrs	r0, r7
 8001bb4:	d100      	bne.n	8001bb8 <__aeabi_dsub+0x1e8>
 8001bb6:	e0c3      	b.n	8001d40 <__aeabi_dsub+0x370>
 8001bb8:	1e50      	subs	r0, r2, #1
 8001bba:	2a01      	cmp	r2, #1
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dsub+0x1f0>
 8001bbe:	e1a8      	b.n	8001f12 <__aeabi_dsub+0x542>
 8001bc0:	4c59      	ldr	r4, [pc, #356]	; (8001d28 <__aeabi_dsub+0x358>)
 8001bc2:	42a2      	cmp	r2, r4
 8001bc4:	d100      	bne.n	8001bc8 <__aeabi_dsub+0x1f8>
 8001bc6:	e087      	b.n	8001cd8 <__aeabi_dsub+0x308>
 8001bc8:	0002      	movs	r2, r0
 8001bca:	e736      	b.n	8001a3a <__aeabi_dsub+0x6a>
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4056      	eors	r6, r2
 8001bd0:	46b3      	mov	fp, r6
 8001bd2:	42b5      	cmp	r5, r6
 8001bd4:	d000      	beq.n	8001bd8 <__aeabi_dsub+0x208>
 8001bd6:	e721      	b.n	8001a1c <__aeabi_dsub+0x4c>
 8001bd8:	4a55      	ldr	r2, [pc, #340]	; (8001d30 <__aeabi_dsub+0x360>)
 8001bda:	4442      	add	r2, r8
 8001bdc:	2a00      	cmp	r2, #0
 8001bde:	d100      	bne.n	8001be2 <__aeabi_dsub+0x212>
 8001be0:	e0b5      	b.n	8001d4e <__aeabi_dsub+0x37e>
 8001be2:	4642      	mov	r2, r8
 8001be4:	4644      	mov	r4, r8
 8001be6:	1a82      	subs	r2, r0, r2
 8001be8:	2c00      	cmp	r4, #0
 8001bea:	d100      	bne.n	8001bee <__aeabi_dsub+0x21e>
 8001bec:	e138      	b.n	8001e60 <__aeabi_dsub+0x490>
 8001bee:	4e4e      	ldr	r6, [pc, #312]	; (8001d28 <__aeabi_dsub+0x358>)
 8001bf0:	42b0      	cmp	r0, r6
 8001bf2:	d100      	bne.n	8001bf6 <__aeabi_dsub+0x226>
 8001bf4:	e1de      	b.n	8001fb4 <__aeabi_dsub+0x5e4>
 8001bf6:	2680      	movs	r6, #128	; 0x80
 8001bf8:	4664      	mov	r4, ip
 8001bfa:	0436      	lsls	r6, r6, #16
 8001bfc:	4334      	orrs	r4, r6
 8001bfe:	46a4      	mov	ip, r4
 8001c00:	2a38      	cmp	r2, #56	; 0x38
 8001c02:	dd00      	ble.n	8001c06 <__aeabi_dsub+0x236>
 8001c04:	e196      	b.n	8001f34 <__aeabi_dsub+0x564>
 8001c06:	2a1f      	cmp	r2, #31
 8001c08:	dd00      	ble.n	8001c0c <__aeabi_dsub+0x23c>
 8001c0a:	e224      	b.n	8002056 <__aeabi_dsub+0x686>
 8001c0c:	2620      	movs	r6, #32
 8001c0e:	1ab4      	subs	r4, r6, r2
 8001c10:	46a2      	mov	sl, r4
 8001c12:	4664      	mov	r4, ip
 8001c14:	4656      	mov	r6, sl
 8001c16:	40b4      	lsls	r4, r6
 8001c18:	46a1      	mov	r9, r4
 8001c1a:	001c      	movs	r4, r3
 8001c1c:	464e      	mov	r6, r9
 8001c1e:	40d4      	lsrs	r4, r2
 8001c20:	4326      	orrs	r6, r4
 8001c22:	0034      	movs	r4, r6
 8001c24:	4656      	mov	r6, sl
 8001c26:	40b3      	lsls	r3, r6
 8001c28:	1e5e      	subs	r6, r3, #1
 8001c2a:	41b3      	sbcs	r3, r6
 8001c2c:	431c      	orrs	r4, r3
 8001c2e:	4663      	mov	r3, ip
 8001c30:	40d3      	lsrs	r3, r2
 8001c32:	18c9      	adds	r1, r1, r3
 8001c34:	19e4      	adds	r4, r4, r7
 8001c36:	42bc      	cmp	r4, r7
 8001c38:	41bf      	sbcs	r7, r7
 8001c3a:	427f      	negs	r7, r7
 8001c3c:	46b9      	mov	r9, r7
 8001c3e:	4680      	mov	r8, r0
 8001c40:	4489      	add	r9, r1
 8001c42:	e0d8      	b.n	8001df6 <__aeabi_dsub+0x426>
 8001c44:	4640      	mov	r0, r8
 8001c46:	4c3b      	ldr	r4, [pc, #236]	; (8001d34 <__aeabi_dsub+0x364>)
 8001c48:	3001      	adds	r0, #1
 8001c4a:	4220      	tst	r0, r4
 8001c4c:	d000      	beq.n	8001c50 <__aeabi_dsub+0x280>
 8001c4e:	e0b4      	b.n	8001dba <__aeabi_dsub+0x3ea>
 8001c50:	4640      	mov	r0, r8
 8001c52:	2800      	cmp	r0, #0
 8001c54:	d000      	beq.n	8001c58 <__aeabi_dsub+0x288>
 8001c56:	e144      	b.n	8001ee2 <__aeabi_dsub+0x512>
 8001c58:	4660      	mov	r0, ip
 8001c5a:	4318      	orrs	r0, r3
 8001c5c:	d100      	bne.n	8001c60 <__aeabi_dsub+0x290>
 8001c5e:	e190      	b.n	8001f82 <__aeabi_dsub+0x5b2>
 8001c60:	0008      	movs	r0, r1
 8001c62:	4338      	orrs	r0, r7
 8001c64:	d000      	beq.n	8001c68 <__aeabi_dsub+0x298>
 8001c66:	e1aa      	b.n	8001fbe <__aeabi_dsub+0x5ee>
 8001c68:	4661      	mov	r1, ip
 8001c6a:	08db      	lsrs	r3, r3, #3
 8001c6c:	0749      	lsls	r1, r1, #29
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	4661      	mov	r1, ip
 8001c72:	08cc      	lsrs	r4, r1, #3
 8001c74:	e027      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001c76:	0008      	movs	r0, r1
 8001c78:	4338      	orrs	r0, r7
 8001c7a:	d061      	beq.n	8001d40 <__aeabi_dsub+0x370>
 8001c7c:	1e50      	subs	r0, r2, #1
 8001c7e:	2a01      	cmp	r2, #1
 8001c80:	d100      	bne.n	8001c84 <__aeabi_dsub+0x2b4>
 8001c82:	e139      	b.n	8001ef8 <__aeabi_dsub+0x528>
 8001c84:	42a2      	cmp	r2, r4
 8001c86:	d027      	beq.n	8001cd8 <__aeabi_dsub+0x308>
 8001c88:	0002      	movs	r2, r0
 8001c8a:	e75d      	b.n	8001b48 <__aeabi_dsub+0x178>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	391f      	subs	r1, #31
 8001c90:	40ca      	lsrs	r2, r1
 8001c92:	0011      	movs	r1, r2
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	d003      	beq.n	8001ca0 <__aeabi_dsub+0x2d0>
 8001c98:	2240      	movs	r2, #64	; 0x40
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	4098      	lsls	r0, r3
 8001c9e:	4304      	orrs	r4, r0
 8001ca0:	1e63      	subs	r3, r4, #1
 8001ca2:	419c      	sbcs	r4, r3
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	4699      	mov	r9, r3
 8001ca8:	4698      	mov	r8, r3
 8001caa:	430c      	orrs	r4, r1
 8001cac:	0763      	lsls	r3, r4, #29
 8001cae:	d000      	beq.n	8001cb2 <__aeabi_dsub+0x2e2>
 8001cb0:	e712      	b.n	8001ad8 <__aeabi_dsub+0x108>
 8001cb2:	464b      	mov	r3, r9
 8001cb4:	464a      	mov	r2, r9
 8001cb6:	08e4      	lsrs	r4, r4, #3
 8001cb8:	075b      	lsls	r3, r3, #29
 8001cba:	4323      	orrs	r3, r4
 8001cbc:	08d4      	lsrs	r4, r2, #3
 8001cbe:	4642      	mov	r2, r8
 8001cc0:	4919      	ldr	r1, [pc, #100]	; (8001d28 <__aeabi_dsub+0x358>)
 8001cc2:	428a      	cmp	r2, r1
 8001cc4:	d00e      	beq.n	8001ce4 <__aeabi_dsub+0x314>
 8001cc6:	0324      	lsls	r4, r4, #12
 8001cc8:	0552      	lsls	r2, r2, #21
 8001cca:	0b24      	lsrs	r4, r4, #12
 8001ccc:	0d52      	lsrs	r2, r2, #21
 8001cce:	e722      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001cd0:	000a      	movs	r2, r1
 8001cd2:	2400      	movs	r4, #0
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	e71e      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001cd8:	08db      	lsrs	r3, r3, #3
 8001cda:	4662      	mov	r2, ip
 8001cdc:	0752      	lsls	r2, r2, #29
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	4662      	mov	r2, ip
 8001ce2:	08d4      	lsrs	r4, r2, #3
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	4322      	orrs	r2, r4
 8001ce8:	d100      	bne.n	8001cec <__aeabi_dsub+0x31c>
 8001cea:	e1fc      	b.n	80020e6 <__aeabi_dsub+0x716>
 8001cec:	2280      	movs	r2, #128	; 0x80
 8001cee:	0312      	lsls	r2, r2, #12
 8001cf0:	4314      	orrs	r4, r2
 8001cf2:	0324      	lsls	r4, r4, #12
 8001cf4:	4a0c      	ldr	r2, [pc, #48]	; (8001d28 <__aeabi_dsub+0x358>)
 8001cf6:	0b24      	lsrs	r4, r4, #12
 8001cf8:	e70d      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001cfa:	0020      	movs	r0, r4
 8001cfc:	f000 faa4 	bl	8002248 <__clzsi2>
 8001d00:	0001      	movs	r1, r0
 8001d02:	3118      	adds	r1, #24
 8001d04:	291f      	cmp	r1, #31
 8001d06:	dc00      	bgt.n	8001d0a <__aeabi_dsub+0x33a>
 8001d08:	e6c4      	b.n	8001a94 <__aeabi_dsub+0xc4>
 8001d0a:	3808      	subs	r0, #8
 8001d0c:	4084      	lsls	r4, r0
 8001d0e:	4643      	mov	r3, r8
 8001d10:	0020      	movs	r0, r4
 8001d12:	2400      	movs	r4, #0
 8001d14:	4588      	cmp	r8, r1
 8001d16:	dc00      	bgt.n	8001d1a <__aeabi_dsub+0x34a>
 8001d18:	e6c8      	b.n	8001aac <__aeabi_dsub+0xdc>
 8001d1a:	4a04      	ldr	r2, [pc, #16]	; (8001d2c <__aeabi_dsub+0x35c>)
 8001d1c:	1a5b      	subs	r3, r3, r1
 8001d1e:	4010      	ands	r0, r2
 8001d20:	4698      	mov	r8, r3
 8001d22:	4681      	mov	r9, r0
 8001d24:	e6d6      	b.n	8001ad4 <__aeabi_dsub+0x104>
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	000007ff 	.word	0x000007ff
 8001d2c:	ff7fffff 	.word	0xff7fffff
 8001d30:	fffff801 	.word	0xfffff801
 8001d34:	000007fe 	.word	0x000007fe
 8001d38:	430f      	orrs	r7, r1
 8001d3a:	1e7a      	subs	r2, r7, #1
 8001d3c:	4197      	sbcs	r7, r2
 8001d3e:	e691      	b.n	8001a64 <__aeabi_dsub+0x94>
 8001d40:	4661      	mov	r1, ip
 8001d42:	08db      	lsrs	r3, r3, #3
 8001d44:	0749      	lsls	r1, r1, #29
 8001d46:	430b      	orrs	r3, r1
 8001d48:	4661      	mov	r1, ip
 8001d4a:	08cc      	lsrs	r4, r1, #3
 8001d4c:	e7b8      	b.n	8001cc0 <__aeabi_dsub+0x2f0>
 8001d4e:	4640      	mov	r0, r8
 8001d50:	4cd3      	ldr	r4, [pc, #844]	; (80020a0 <__aeabi_dsub+0x6d0>)
 8001d52:	3001      	adds	r0, #1
 8001d54:	4220      	tst	r0, r4
 8001d56:	d000      	beq.n	8001d5a <__aeabi_dsub+0x38a>
 8001d58:	e0a2      	b.n	8001ea0 <__aeabi_dsub+0x4d0>
 8001d5a:	4640      	mov	r0, r8
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	d000      	beq.n	8001d62 <__aeabi_dsub+0x392>
 8001d60:	e101      	b.n	8001f66 <__aeabi_dsub+0x596>
 8001d62:	4660      	mov	r0, ip
 8001d64:	4318      	orrs	r0, r3
 8001d66:	d100      	bne.n	8001d6a <__aeabi_dsub+0x39a>
 8001d68:	e15e      	b.n	8002028 <__aeabi_dsub+0x658>
 8001d6a:	0008      	movs	r0, r1
 8001d6c:	4338      	orrs	r0, r7
 8001d6e:	d000      	beq.n	8001d72 <__aeabi_dsub+0x3a2>
 8001d70:	e15f      	b.n	8002032 <__aeabi_dsub+0x662>
 8001d72:	4661      	mov	r1, ip
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	0749      	lsls	r1, r1, #29
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	4661      	mov	r1, ip
 8001d7c:	08cc      	lsrs	r4, r1, #3
 8001d7e:	e7a2      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001d80:	4dc8      	ldr	r5, [pc, #800]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001d82:	42a8      	cmp	r0, r5
 8001d84:	d100      	bne.n	8001d88 <__aeabi_dsub+0x3b8>
 8001d86:	e0cf      	b.n	8001f28 <__aeabi_dsub+0x558>
 8001d88:	2580      	movs	r5, #128	; 0x80
 8001d8a:	4664      	mov	r4, ip
 8001d8c:	042d      	lsls	r5, r5, #16
 8001d8e:	432c      	orrs	r4, r5
 8001d90:	46a4      	mov	ip, r4
 8001d92:	2a38      	cmp	r2, #56	; 0x38
 8001d94:	dc56      	bgt.n	8001e44 <__aeabi_dsub+0x474>
 8001d96:	2a1f      	cmp	r2, #31
 8001d98:	dd00      	ble.n	8001d9c <__aeabi_dsub+0x3cc>
 8001d9a:	e0d1      	b.n	8001f40 <__aeabi_dsub+0x570>
 8001d9c:	2520      	movs	r5, #32
 8001d9e:	001e      	movs	r6, r3
 8001da0:	1aad      	subs	r5, r5, r2
 8001da2:	4664      	mov	r4, ip
 8001da4:	40ab      	lsls	r3, r5
 8001da6:	40ac      	lsls	r4, r5
 8001da8:	40d6      	lsrs	r6, r2
 8001daa:	1e5d      	subs	r5, r3, #1
 8001dac:	41ab      	sbcs	r3, r5
 8001dae:	4334      	orrs	r4, r6
 8001db0:	4323      	orrs	r3, r4
 8001db2:	4664      	mov	r4, ip
 8001db4:	40d4      	lsrs	r4, r2
 8001db6:	1b09      	subs	r1, r1, r4
 8001db8:	e049      	b.n	8001e4e <__aeabi_dsub+0x47e>
 8001dba:	4660      	mov	r0, ip
 8001dbc:	1bdc      	subs	r4, r3, r7
 8001dbe:	1a46      	subs	r6, r0, r1
 8001dc0:	42a3      	cmp	r3, r4
 8001dc2:	4180      	sbcs	r0, r0
 8001dc4:	4240      	negs	r0, r0
 8001dc6:	4681      	mov	r9, r0
 8001dc8:	0030      	movs	r0, r6
 8001dca:	464e      	mov	r6, r9
 8001dcc:	1b80      	subs	r0, r0, r6
 8001dce:	4681      	mov	r9, r0
 8001dd0:	0200      	lsls	r0, r0, #8
 8001dd2:	d476      	bmi.n	8001ec2 <__aeabi_dsub+0x4f2>
 8001dd4:	464b      	mov	r3, r9
 8001dd6:	4323      	orrs	r3, r4
 8001dd8:	d000      	beq.n	8001ddc <__aeabi_dsub+0x40c>
 8001dda:	e652      	b.n	8001a82 <__aeabi_dsub+0xb2>
 8001ddc:	2400      	movs	r4, #0
 8001dde:	2500      	movs	r5, #0
 8001de0:	e771      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001de2:	4339      	orrs	r1, r7
 8001de4:	000c      	movs	r4, r1
 8001de6:	1e62      	subs	r2, r4, #1
 8001de8:	4194      	sbcs	r4, r2
 8001dea:	18e4      	adds	r4, r4, r3
 8001dec:	429c      	cmp	r4, r3
 8001dee:	419b      	sbcs	r3, r3
 8001df0:	425b      	negs	r3, r3
 8001df2:	4463      	add	r3, ip
 8001df4:	4699      	mov	r9, r3
 8001df6:	464b      	mov	r3, r9
 8001df8:	021b      	lsls	r3, r3, #8
 8001dfa:	d400      	bmi.n	8001dfe <__aeabi_dsub+0x42e>
 8001dfc:	e756      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	469c      	mov	ip, r3
 8001e02:	4ba8      	ldr	r3, [pc, #672]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001e04:	44e0      	add	r8, ip
 8001e06:	4598      	cmp	r8, r3
 8001e08:	d038      	beq.n	8001e7c <__aeabi_dsub+0x4ac>
 8001e0a:	464b      	mov	r3, r9
 8001e0c:	48a6      	ldr	r0, [pc, #664]	; (80020a8 <__aeabi_dsub+0x6d8>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	4003      	ands	r3, r0
 8001e12:	0018      	movs	r0, r3
 8001e14:	0863      	lsrs	r3, r4, #1
 8001e16:	4014      	ands	r4, r2
 8001e18:	431c      	orrs	r4, r3
 8001e1a:	07c3      	lsls	r3, r0, #31
 8001e1c:	431c      	orrs	r4, r3
 8001e1e:	0843      	lsrs	r3, r0, #1
 8001e20:	4699      	mov	r9, r3
 8001e22:	e657      	b.n	8001ad4 <__aeabi_dsub+0x104>
 8001e24:	0010      	movs	r0, r2
 8001e26:	000e      	movs	r6, r1
 8001e28:	3820      	subs	r0, #32
 8001e2a:	40c6      	lsrs	r6, r0
 8001e2c:	2a20      	cmp	r2, #32
 8001e2e:	d004      	beq.n	8001e3a <__aeabi_dsub+0x46a>
 8001e30:	2040      	movs	r0, #64	; 0x40
 8001e32:	1a82      	subs	r2, r0, r2
 8001e34:	4091      	lsls	r1, r2
 8001e36:	430f      	orrs	r7, r1
 8001e38:	46b9      	mov	r9, r7
 8001e3a:	464f      	mov	r7, r9
 8001e3c:	1e7a      	subs	r2, r7, #1
 8001e3e:	4197      	sbcs	r7, r2
 8001e40:	4337      	orrs	r7, r6
 8001e42:	e60f      	b.n	8001a64 <__aeabi_dsub+0x94>
 8001e44:	4662      	mov	r2, ip
 8001e46:	431a      	orrs	r2, r3
 8001e48:	0013      	movs	r3, r2
 8001e4a:	1e5a      	subs	r2, r3, #1
 8001e4c:	4193      	sbcs	r3, r2
 8001e4e:	1afc      	subs	r4, r7, r3
 8001e50:	42a7      	cmp	r7, r4
 8001e52:	41bf      	sbcs	r7, r7
 8001e54:	427f      	negs	r7, r7
 8001e56:	1bcb      	subs	r3, r1, r7
 8001e58:	4699      	mov	r9, r3
 8001e5a:	465d      	mov	r5, fp
 8001e5c:	4680      	mov	r8, r0
 8001e5e:	e608      	b.n	8001a72 <__aeabi_dsub+0xa2>
 8001e60:	4666      	mov	r6, ip
 8001e62:	431e      	orrs	r6, r3
 8001e64:	d100      	bne.n	8001e68 <__aeabi_dsub+0x498>
 8001e66:	e0be      	b.n	8001fe6 <__aeabi_dsub+0x616>
 8001e68:	1e56      	subs	r6, r2, #1
 8001e6a:	2a01      	cmp	r2, #1
 8001e6c:	d100      	bne.n	8001e70 <__aeabi_dsub+0x4a0>
 8001e6e:	e109      	b.n	8002084 <__aeabi_dsub+0x6b4>
 8001e70:	4c8c      	ldr	r4, [pc, #560]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001e72:	42a2      	cmp	r2, r4
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x4a8>
 8001e76:	e119      	b.n	80020ac <__aeabi_dsub+0x6dc>
 8001e78:	0032      	movs	r2, r6
 8001e7a:	e6c1      	b.n	8001c00 <__aeabi_dsub+0x230>
 8001e7c:	4642      	mov	r2, r8
 8001e7e:	2400      	movs	r4, #0
 8001e80:	2300      	movs	r3, #0
 8001e82:	e648      	b.n	8001b16 <__aeabi_dsub+0x146>
 8001e84:	2020      	movs	r0, #32
 8001e86:	000c      	movs	r4, r1
 8001e88:	1a80      	subs	r0, r0, r2
 8001e8a:	003e      	movs	r6, r7
 8001e8c:	4087      	lsls	r7, r0
 8001e8e:	4084      	lsls	r4, r0
 8001e90:	40d6      	lsrs	r6, r2
 8001e92:	1e78      	subs	r0, r7, #1
 8001e94:	4187      	sbcs	r7, r0
 8001e96:	40d1      	lsrs	r1, r2
 8001e98:	4334      	orrs	r4, r6
 8001e9a:	433c      	orrs	r4, r7
 8001e9c:	448c      	add	ip, r1
 8001e9e:	e7a4      	b.n	8001dea <__aeabi_dsub+0x41a>
 8001ea0:	4a80      	ldr	r2, [pc, #512]	; (80020a4 <__aeabi_dsub+0x6d4>)
 8001ea2:	4290      	cmp	r0, r2
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x4d8>
 8001ea6:	e0e9      	b.n	800207c <__aeabi_dsub+0x6ac>
 8001ea8:	19df      	adds	r7, r3, r7
 8001eaa:	429f      	cmp	r7, r3
 8001eac:	419b      	sbcs	r3, r3
 8001eae:	4461      	add	r1, ip
 8001eb0:	425b      	negs	r3, r3
 8001eb2:	18c9      	adds	r1, r1, r3
 8001eb4:	07cc      	lsls	r4, r1, #31
 8001eb6:	087f      	lsrs	r7, r7, #1
 8001eb8:	084b      	lsrs	r3, r1, #1
 8001eba:	4699      	mov	r9, r3
 8001ebc:	4680      	mov	r8, r0
 8001ebe:	433c      	orrs	r4, r7
 8001ec0:	e6f4      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001ec2:	1afc      	subs	r4, r7, r3
 8001ec4:	42a7      	cmp	r7, r4
 8001ec6:	41bf      	sbcs	r7, r7
 8001ec8:	4663      	mov	r3, ip
 8001eca:	427f      	negs	r7, r7
 8001ecc:	1ac9      	subs	r1, r1, r3
 8001ece:	1bcb      	subs	r3, r1, r7
 8001ed0:	4699      	mov	r9, r3
 8001ed2:	465d      	mov	r5, fp
 8001ed4:	e5d5      	b.n	8001a82 <__aeabi_dsub+0xb2>
 8001ed6:	08ff      	lsrs	r7, r7, #3
 8001ed8:	074b      	lsls	r3, r1, #29
 8001eda:	465d      	mov	r5, fp
 8001edc:	433b      	orrs	r3, r7
 8001ede:	08cc      	lsrs	r4, r1, #3
 8001ee0:	e6ee      	b.n	8001cc0 <__aeabi_dsub+0x2f0>
 8001ee2:	4662      	mov	r2, ip
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	d000      	beq.n	8001eea <__aeabi_dsub+0x51a>
 8001ee8:	e082      	b.n	8001ff0 <__aeabi_dsub+0x620>
 8001eea:	000b      	movs	r3, r1
 8001eec:	433b      	orrs	r3, r7
 8001eee:	d11b      	bne.n	8001f28 <__aeabi_dsub+0x558>
 8001ef0:	2480      	movs	r4, #128	; 0x80
 8001ef2:	2500      	movs	r5, #0
 8001ef4:	0324      	lsls	r4, r4, #12
 8001ef6:	e6f9      	b.n	8001cec <__aeabi_dsub+0x31c>
 8001ef8:	19dc      	adds	r4, r3, r7
 8001efa:	429c      	cmp	r4, r3
 8001efc:	419b      	sbcs	r3, r3
 8001efe:	4461      	add	r1, ip
 8001f00:	4689      	mov	r9, r1
 8001f02:	425b      	negs	r3, r3
 8001f04:	4499      	add	r9, r3
 8001f06:	464b      	mov	r3, r9
 8001f08:	021b      	lsls	r3, r3, #8
 8001f0a:	d444      	bmi.n	8001f96 <__aeabi_dsub+0x5c6>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	4698      	mov	r8, r3
 8001f10:	e6cc      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8001f12:	1bdc      	subs	r4, r3, r7
 8001f14:	4662      	mov	r2, ip
 8001f16:	42a3      	cmp	r3, r4
 8001f18:	419b      	sbcs	r3, r3
 8001f1a:	1a51      	subs	r1, r2, r1
 8001f1c:	425b      	negs	r3, r3
 8001f1e:	1acb      	subs	r3, r1, r3
 8001f20:	4699      	mov	r9, r3
 8001f22:	2301      	movs	r3, #1
 8001f24:	4698      	mov	r8, r3
 8001f26:	e5a4      	b.n	8001a72 <__aeabi_dsub+0xa2>
 8001f28:	08ff      	lsrs	r7, r7, #3
 8001f2a:	074b      	lsls	r3, r1, #29
 8001f2c:	465d      	mov	r5, fp
 8001f2e:	433b      	orrs	r3, r7
 8001f30:	08cc      	lsrs	r4, r1, #3
 8001f32:	e6d7      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8001f34:	4662      	mov	r2, ip
 8001f36:	431a      	orrs	r2, r3
 8001f38:	0014      	movs	r4, r2
 8001f3a:	1e63      	subs	r3, r4, #1
 8001f3c:	419c      	sbcs	r4, r3
 8001f3e:	e679      	b.n	8001c34 <__aeabi_dsub+0x264>
 8001f40:	0015      	movs	r5, r2
 8001f42:	4664      	mov	r4, ip
 8001f44:	3d20      	subs	r5, #32
 8001f46:	40ec      	lsrs	r4, r5
 8001f48:	46a0      	mov	r8, r4
 8001f4a:	2a20      	cmp	r2, #32
 8001f4c:	d005      	beq.n	8001f5a <__aeabi_dsub+0x58a>
 8001f4e:	2540      	movs	r5, #64	; 0x40
 8001f50:	4664      	mov	r4, ip
 8001f52:	1aaa      	subs	r2, r5, r2
 8001f54:	4094      	lsls	r4, r2
 8001f56:	4323      	orrs	r3, r4
 8001f58:	469a      	mov	sl, r3
 8001f5a:	4654      	mov	r4, sl
 8001f5c:	1e63      	subs	r3, r4, #1
 8001f5e:	419c      	sbcs	r4, r3
 8001f60:	4643      	mov	r3, r8
 8001f62:	4323      	orrs	r3, r4
 8001f64:	e773      	b.n	8001e4e <__aeabi_dsub+0x47e>
 8001f66:	4662      	mov	r2, ip
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	d023      	beq.n	8001fb4 <__aeabi_dsub+0x5e4>
 8001f6c:	000a      	movs	r2, r1
 8001f6e:	433a      	orrs	r2, r7
 8001f70:	d000      	beq.n	8001f74 <__aeabi_dsub+0x5a4>
 8001f72:	e0a0      	b.n	80020b6 <__aeabi_dsub+0x6e6>
 8001f74:	4662      	mov	r2, ip
 8001f76:	08db      	lsrs	r3, r3, #3
 8001f78:	0752      	lsls	r2, r2, #29
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	4662      	mov	r2, ip
 8001f7e:	08d4      	lsrs	r4, r2, #3
 8001f80:	e6b0      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8001f82:	000b      	movs	r3, r1
 8001f84:	433b      	orrs	r3, r7
 8001f86:	d100      	bne.n	8001f8a <__aeabi_dsub+0x5ba>
 8001f88:	e728      	b.n	8001ddc <__aeabi_dsub+0x40c>
 8001f8a:	08ff      	lsrs	r7, r7, #3
 8001f8c:	074b      	lsls	r3, r1, #29
 8001f8e:	465d      	mov	r5, fp
 8001f90:	433b      	orrs	r3, r7
 8001f92:	08cc      	lsrs	r4, r1, #3
 8001f94:	e697      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8001f96:	2302      	movs	r3, #2
 8001f98:	4698      	mov	r8, r3
 8001f9a:	e736      	b.n	8001e0a <__aeabi_dsub+0x43a>
 8001f9c:	1afc      	subs	r4, r7, r3
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	4663      	mov	r3, ip
 8001fa4:	427f      	negs	r7, r7
 8001fa6:	1ac9      	subs	r1, r1, r3
 8001fa8:	1bcb      	subs	r3, r1, r7
 8001faa:	4699      	mov	r9, r3
 8001fac:	2301      	movs	r3, #1
 8001fae:	465d      	mov	r5, fp
 8001fb0:	4698      	mov	r8, r3
 8001fb2:	e55e      	b.n	8001a72 <__aeabi_dsub+0xa2>
 8001fb4:	074b      	lsls	r3, r1, #29
 8001fb6:	08ff      	lsrs	r7, r7, #3
 8001fb8:	433b      	orrs	r3, r7
 8001fba:	08cc      	lsrs	r4, r1, #3
 8001fbc:	e692      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8001fbe:	1bdc      	subs	r4, r3, r7
 8001fc0:	4660      	mov	r0, ip
 8001fc2:	42a3      	cmp	r3, r4
 8001fc4:	41b6      	sbcs	r6, r6
 8001fc6:	1a40      	subs	r0, r0, r1
 8001fc8:	4276      	negs	r6, r6
 8001fca:	1b80      	subs	r0, r0, r6
 8001fcc:	4681      	mov	r9, r0
 8001fce:	0200      	lsls	r0, r0, #8
 8001fd0:	d560      	bpl.n	8002094 <__aeabi_dsub+0x6c4>
 8001fd2:	1afc      	subs	r4, r7, r3
 8001fd4:	42a7      	cmp	r7, r4
 8001fd6:	41bf      	sbcs	r7, r7
 8001fd8:	4663      	mov	r3, ip
 8001fda:	427f      	negs	r7, r7
 8001fdc:	1ac9      	subs	r1, r1, r3
 8001fde:	1bcb      	subs	r3, r1, r7
 8001fe0:	4699      	mov	r9, r3
 8001fe2:	465d      	mov	r5, fp
 8001fe4:	e576      	b.n	8001ad4 <__aeabi_dsub+0x104>
 8001fe6:	08ff      	lsrs	r7, r7, #3
 8001fe8:	074b      	lsls	r3, r1, #29
 8001fea:	433b      	orrs	r3, r7
 8001fec:	08cc      	lsrs	r4, r1, #3
 8001fee:	e667      	b.n	8001cc0 <__aeabi_dsub+0x2f0>
 8001ff0:	000a      	movs	r2, r1
 8001ff2:	08db      	lsrs	r3, r3, #3
 8001ff4:	433a      	orrs	r2, r7
 8001ff6:	d100      	bne.n	8001ffa <__aeabi_dsub+0x62a>
 8001ff8:	e66f      	b.n	8001cda <__aeabi_dsub+0x30a>
 8001ffa:	4662      	mov	r2, ip
 8001ffc:	0752      	lsls	r2, r2, #29
 8001ffe:	4313      	orrs	r3, r2
 8002000:	4662      	mov	r2, ip
 8002002:	08d4      	lsrs	r4, r2, #3
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	0312      	lsls	r2, r2, #12
 8002008:	4214      	tst	r4, r2
 800200a:	d007      	beq.n	800201c <__aeabi_dsub+0x64c>
 800200c:	08c8      	lsrs	r0, r1, #3
 800200e:	4210      	tst	r0, r2
 8002010:	d104      	bne.n	800201c <__aeabi_dsub+0x64c>
 8002012:	465d      	mov	r5, fp
 8002014:	0004      	movs	r4, r0
 8002016:	08fb      	lsrs	r3, r7, #3
 8002018:	0749      	lsls	r1, r1, #29
 800201a:	430b      	orrs	r3, r1
 800201c:	0f5a      	lsrs	r2, r3, #29
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	08db      	lsrs	r3, r3, #3
 8002022:	0752      	lsls	r2, r2, #29
 8002024:	4313      	orrs	r3, r2
 8002026:	e65d      	b.n	8001ce4 <__aeabi_dsub+0x314>
 8002028:	074b      	lsls	r3, r1, #29
 800202a:	08ff      	lsrs	r7, r7, #3
 800202c:	433b      	orrs	r3, r7
 800202e:	08cc      	lsrs	r4, r1, #3
 8002030:	e649      	b.n	8001cc6 <__aeabi_dsub+0x2f6>
 8002032:	19dc      	adds	r4, r3, r7
 8002034:	429c      	cmp	r4, r3
 8002036:	419b      	sbcs	r3, r3
 8002038:	4461      	add	r1, ip
 800203a:	4689      	mov	r9, r1
 800203c:	425b      	negs	r3, r3
 800203e:	4499      	add	r9, r3
 8002040:	464b      	mov	r3, r9
 8002042:	021b      	lsls	r3, r3, #8
 8002044:	d400      	bmi.n	8002048 <__aeabi_dsub+0x678>
 8002046:	e631      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8002048:	464a      	mov	r2, r9
 800204a:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <__aeabi_dsub+0x6d8>)
 800204c:	401a      	ands	r2, r3
 800204e:	2301      	movs	r3, #1
 8002050:	4691      	mov	r9, r2
 8002052:	4698      	mov	r8, r3
 8002054:	e62a      	b.n	8001cac <__aeabi_dsub+0x2dc>
 8002056:	0016      	movs	r6, r2
 8002058:	4664      	mov	r4, ip
 800205a:	3e20      	subs	r6, #32
 800205c:	40f4      	lsrs	r4, r6
 800205e:	46a0      	mov	r8, r4
 8002060:	2a20      	cmp	r2, #32
 8002062:	d005      	beq.n	8002070 <__aeabi_dsub+0x6a0>
 8002064:	2640      	movs	r6, #64	; 0x40
 8002066:	4664      	mov	r4, ip
 8002068:	1ab2      	subs	r2, r6, r2
 800206a:	4094      	lsls	r4, r2
 800206c:	4323      	orrs	r3, r4
 800206e:	469a      	mov	sl, r3
 8002070:	4654      	mov	r4, sl
 8002072:	1e63      	subs	r3, r4, #1
 8002074:	419c      	sbcs	r4, r3
 8002076:	4643      	mov	r3, r8
 8002078:	431c      	orrs	r4, r3
 800207a:	e5db      	b.n	8001c34 <__aeabi_dsub+0x264>
 800207c:	0002      	movs	r2, r0
 800207e:	2400      	movs	r4, #0
 8002080:	2300      	movs	r3, #0
 8002082:	e548      	b.n	8001b16 <__aeabi_dsub+0x146>
 8002084:	19dc      	adds	r4, r3, r7
 8002086:	42bc      	cmp	r4, r7
 8002088:	41bf      	sbcs	r7, r7
 800208a:	4461      	add	r1, ip
 800208c:	4689      	mov	r9, r1
 800208e:	427f      	negs	r7, r7
 8002090:	44b9      	add	r9, r7
 8002092:	e738      	b.n	8001f06 <__aeabi_dsub+0x536>
 8002094:	464b      	mov	r3, r9
 8002096:	4323      	orrs	r3, r4
 8002098:	d100      	bne.n	800209c <__aeabi_dsub+0x6cc>
 800209a:	e69f      	b.n	8001ddc <__aeabi_dsub+0x40c>
 800209c:	e606      	b.n	8001cac <__aeabi_dsub+0x2dc>
 800209e:	46c0      	nop			; (mov r8, r8)
 80020a0:	000007fe 	.word	0x000007fe
 80020a4:	000007ff 	.word	0x000007ff
 80020a8:	ff7fffff 	.word	0xff7fffff
 80020ac:	08ff      	lsrs	r7, r7, #3
 80020ae:	074b      	lsls	r3, r1, #29
 80020b0:	433b      	orrs	r3, r7
 80020b2:	08cc      	lsrs	r4, r1, #3
 80020b4:	e616      	b.n	8001ce4 <__aeabi_dsub+0x314>
 80020b6:	4662      	mov	r2, ip
 80020b8:	08db      	lsrs	r3, r3, #3
 80020ba:	0752      	lsls	r2, r2, #29
 80020bc:	4313      	orrs	r3, r2
 80020be:	4662      	mov	r2, ip
 80020c0:	08d4      	lsrs	r4, r2, #3
 80020c2:	2280      	movs	r2, #128	; 0x80
 80020c4:	0312      	lsls	r2, r2, #12
 80020c6:	4214      	tst	r4, r2
 80020c8:	d007      	beq.n	80020da <__aeabi_dsub+0x70a>
 80020ca:	08c8      	lsrs	r0, r1, #3
 80020cc:	4210      	tst	r0, r2
 80020ce:	d104      	bne.n	80020da <__aeabi_dsub+0x70a>
 80020d0:	465d      	mov	r5, fp
 80020d2:	0004      	movs	r4, r0
 80020d4:	08fb      	lsrs	r3, r7, #3
 80020d6:	0749      	lsls	r1, r1, #29
 80020d8:	430b      	orrs	r3, r1
 80020da:	0f5a      	lsrs	r2, r3, #29
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	0752      	lsls	r2, r2, #29
 80020e0:	08db      	lsrs	r3, r3, #3
 80020e2:	4313      	orrs	r3, r2
 80020e4:	e5fe      	b.n	8001ce4 <__aeabi_dsub+0x314>
 80020e6:	2300      	movs	r3, #0
 80020e8:	4a01      	ldr	r2, [pc, #4]	; (80020f0 <__aeabi_dsub+0x720>)
 80020ea:	001c      	movs	r4, r3
 80020ec:	e513      	b.n	8001b16 <__aeabi_dsub+0x146>
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	000007ff 	.word	0x000007ff

080020f4 <__aeabi_dcmpun>:
 80020f4:	b570      	push	{r4, r5, r6, lr}
 80020f6:	0005      	movs	r5, r0
 80020f8:	480c      	ldr	r0, [pc, #48]	; (800212c <__aeabi_dcmpun+0x38>)
 80020fa:	031c      	lsls	r4, r3, #12
 80020fc:	0016      	movs	r6, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	030a      	lsls	r2, r1, #12
 8002102:	0049      	lsls	r1, r1, #1
 8002104:	0b12      	lsrs	r2, r2, #12
 8002106:	0d49      	lsrs	r1, r1, #21
 8002108:	0b24      	lsrs	r4, r4, #12
 800210a:	0d5b      	lsrs	r3, r3, #21
 800210c:	4281      	cmp	r1, r0
 800210e:	d008      	beq.n	8002122 <__aeabi_dcmpun+0x2e>
 8002110:	4a06      	ldr	r2, [pc, #24]	; (800212c <__aeabi_dcmpun+0x38>)
 8002112:	2000      	movs	r0, #0
 8002114:	4293      	cmp	r3, r2
 8002116:	d103      	bne.n	8002120 <__aeabi_dcmpun+0x2c>
 8002118:	0020      	movs	r0, r4
 800211a:	4330      	orrs	r0, r6
 800211c:	1e43      	subs	r3, r0, #1
 800211e:	4198      	sbcs	r0, r3
 8002120:	bd70      	pop	{r4, r5, r6, pc}
 8002122:	2001      	movs	r0, #1
 8002124:	432a      	orrs	r2, r5
 8002126:	d1fb      	bne.n	8002120 <__aeabi_dcmpun+0x2c>
 8002128:	e7f2      	b.n	8002110 <__aeabi_dcmpun+0x1c>
 800212a:	46c0      	nop			; (mov r8, r8)
 800212c:	000007ff 	.word	0x000007ff

08002130 <__aeabi_d2iz>:
 8002130:	000a      	movs	r2, r1
 8002132:	b530      	push	{r4, r5, lr}
 8002134:	4c13      	ldr	r4, [pc, #76]	; (8002184 <__aeabi_d2iz+0x54>)
 8002136:	0053      	lsls	r3, r2, #1
 8002138:	0309      	lsls	r1, r1, #12
 800213a:	0005      	movs	r5, r0
 800213c:	0b09      	lsrs	r1, r1, #12
 800213e:	2000      	movs	r0, #0
 8002140:	0d5b      	lsrs	r3, r3, #21
 8002142:	0fd2      	lsrs	r2, r2, #31
 8002144:	42a3      	cmp	r3, r4
 8002146:	dd04      	ble.n	8002152 <__aeabi_d2iz+0x22>
 8002148:	480f      	ldr	r0, [pc, #60]	; (8002188 <__aeabi_d2iz+0x58>)
 800214a:	4283      	cmp	r3, r0
 800214c:	dd02      	ble.n	8002154 <__aeabi_d2iz+0x24>
 800214e:	4b0f      	ldr	r3, [pc, #60]	; (800218c <__aeabi_d2iz+0x5c>)
 8002150:	18d0      	adds	r0, r2, r3
 8002152:	bd30      	pop	{r4, r5, pc}
 8002154:	2080      	movs	r0, #128	; 0x80
 8002156:	0340      	lsls	r0, r0, #13
 8002158:	4301      	orrs	r1, r0
 800215a:	480d      	ldr	r0, [pc, #52]	; (8002190 <__aeabi_d2iz+0x60>)
 800215c:	1ac0      	subs	r0, r0, r3
 800215e:	281f      	cmp	r0, #31
 8002160:	dd08      	ble.n	8002174 <__aeabi_d2iz+0x44>
 8002162:	480c      	ldr	r0, [pc, #48]	; (8002194 <__aeabi_d2iz+0x64>)
 8002164:	1ac3      	subs	r3, r0, r3
 8002166:	40d9      	lsrs	r1, r3
 8002168:	000b      	movs	r3, r1
 800216a:	4258      	negs	r0, r3
 800216c:	2a00      	cmp	r2, #0
 800216e:	d1f0      	bne.n	8002152 <__aeabi_d2iz+0x22>
 8002170:	0018      	movs	r0, r3
 8002172:	e7ee      	b.n	8002152 <__aeabi_d2iz+0x22>
 8002174:	4c08      	ldr	r4, [pc, #32]	; (8002198 <__aeabi_d2iz+0x68>)
 8002176:	40c5      	lsrs	r5, r0
 8002178:	46a4      	mov	ip, r4
 800217a:	4463      	add	r3, ip
 800217c:	4099      	lsls	r1, r3
 800217e:	000b      	movs	r3, r1
 8002180:	432b      	orrs	r3, r5
 8002182:	e7f2      	b.n	800216a <__aeabi_d2iz+0x3a>
 8002184:	000003fe 	.word	0x000003fe
 8002188:	0000041d 	.word	0x0000041d
 800218c:	7fffffff 	.word	0x7fffffff
 8002190:	00000433 	.word	0x00000433
 8002194:	00000413 	.word	0x00000413
 8002198:	fffffbed 	.word	0xfffffbed

0800219c <__aeabi_i2d>:
 800219c:	b570      	push	{r4, r5, r6, lr}
 800219e:	2800      	cmp	r0, #0
 80021a0:	d016      	beq.n	80021d0 <__aeabi_i2d+0x34>
 80021a2:	17c3      	asrs	r3, r0, #31
 80021a4:	18c5      	adds	r5, r0, r3
 80021a6:	405d      	eors	r5, r3
 80021a8:	0fc4      	lsrs	r4, r0, #31
 80021aa:	0028      	movs	r0, r5
 80021ac:	f000 f84c 	bl	8002248 <__clzsi2>
 80021b0:	4a11      	ldr	r2, [pc, #68]	; (80021f8 <__aeabi_i2d+0x5c>)
 80021b2:	1a12      	subs	r2, r2, r0
 80021b4:	280a      	cmp	r0, #10
 80021b6:	dc16      	bgt.n	80021e6 <__aeabi_i2d+0x4a>
 80021b8:	0003      	movs	r3, r0
 80021ba:	002e      	movs	r6, r5
 80021bc:	3315      	adds	r3, #21
 80021be:	409e      	lsls	r6, r3
 80021c0:	230b      	movs	r3, #11
 80021c2:	1a18      	subs	r0, r3, r0
 80021c4:	40c5      	lsrs	r5, r0
 80021c6:	0552      	lsls	r2, r2, #21
 80021c8:	032d      	lsls	r5, r5, #12
 80021ca:	0b2d      	lsrs	r5, r5, #12
 80021cc:	0d53      	lsrs	r3, r2, #21
 80021ce:	e003      	b.n	80021d8 <__aeabi_i2d+0x3c>
 80021d0:	2400      	movs	r4, #0
 80021d2:	2300      	movs	r3, #0
 80021d4:	2500      	movs	r5, #0
 80021d6:	2600      	movs	r6, #0
 80021d8:	051b      	lsls	r3, r3, #20
 80021da:	432b      	orrs	r3, r5
 80021dc:	07e4      	lsls	r4, r4, #31
 80021de:	4323      	orrs	r3, r4
 80021e0:	0030      	movs	r0, r6
 80021e2:	0019      	movs	r1, r3
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	380b      	subs	r0, #11
 80021e8:	4085      	lsls	r5, r0
 80021ea:	0552      	lsls	r2, r2, #21
 80021ec:	032d      	lsls	r5, r5, #12
 80021ee:	2600      	movs	r6, #0
 80021f0:	0b2d      	lsrs	r5, r5, #12
 80021f2:	0d53      	lsrs	r3, r2, #21
 80021f4:	e7f0      	b.n	80021d8 <__aeabi_i2d+0x3c>
 80021f6:	46c0      	nop			; (mov r8, r8)
 80021f8:	0000041e 	.word	0x0000041e

080021fc <__aeabi_ui2d>:
 80021fc:	b510      	push	{r4, lr}
 80021fe:	1e04      	subs	r4, r0, #0
 8002200:	d010      	beq.n	8002224 <__aeabi_ui2d+0x28>
 8002202:	f000 f821 	bl	8002248 <__clzsi2>
 8002206:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <__aeabi_ui2d+0x48>)
 8002208:	1a1b      	subs	r3, r3, r0
 800220a:	280a      	cmp	r0, #10
 800220c:	dc11      	bgt.n	8002232 <__aeabi_ui2d+0x36>
 800220e:	220b      	movs	r2, #11
 8002210:	0021      	movs	r1, r4
 8002212:	1a12      	subs	r2, r2, r0
 8002214:	40d1      	lsrs	r1, r2
 8002216:	3015      	adds	r0, #21
 8002218:	030a      	lsls	r2, r1, #12
 800221a:	055b      	lsls	r3, r3, #21
 800221c:	4084      	lsls	r4, r0
 800221e:	0b12      	lsrs	r2, r2, #12
 8002220:	0d5b      	lsrs	r3, r3, #21
 8002222:	e001      	b.n	8002228 <__aeabi_ui2d+0x2c>
 8002224:	2300      	movs	r3, #0
 8002226:	2200      	movs	r2, #0
 8002228:	051b      	lsls	r3, r3, #20
 800222a:	4313      	orrs	r3, r2
 800222c:	0020      	movs	r0, r4
 800222e:	0019      	movs	r1, r3
 8002230:	bd10      	pop	{r4, pc}
 8002232:	0022      	movs	r2, r4
 8002234:	380b      	subs	r0, #11
 8002236:	4082      	lsls	r2, r0
 8002238:	055b      	lsls	r3, r3, #21
 800223a:	0312      	lsls	r2, r2, #12
 800223c:	2400      	movs	r4, #0
 800223e:	0b12      	lsrs	r2, r2, #12
 8002240:	0d5b      	lsrs	r3, r3, #21
 8002242:	e7f1      	b.n	8002228 <__aeabi_ui2d+0x2c>
 8002244:	0000041e 	.word	0x0000041e

08002248 <__clzsi2>:
 8002248:	211c      	movs	r1, #28
 800224a:	2301      	movs	r3, #1
 800224c:	041b      	lsls	r3, r3, #16
 800224e:	4298      	cmp	r0, r3
 8002250:	d301      	bcc.n	8002256 <__clzsi2+0xe>
 8002252:	0c00      	lsrs	r0, r0, #16
 8002254:	3910      	subs	r1, #16
 8002256:	0a1b      	lsrs	r3, r3, #8
 8002258:	4298      	cmp	r0, r3
 800225a:	d301      	bcc.n	8002260 <__clzsi2+0x18>
 800225c:	0a00      	lsrs	r0, r0, #8
 800225e:	3908      	subs	r1, #8
 8002260:	091b      	lsrs	r3, r3, #4
 8002262:	4298      	cmp	r0, r3
 8002264:	d301      	bcc.n	800226a <__clzsi2+0x22>
 8002266:	0900      	lsrs	r0, r0, #4
 8002268:	3904      	subs	r1, #4
 800226a:	a202      	add	r2, pc, #8	; (adr r2, 8002274 <__clzsi2+0x2c>)
 800226c:	5c10      	ldrb	r0, [r2, r0]
 800226e:	1840      	adds	r0, r0, r1
 8002270:	4770      	bx	lr
 8002272:	46c0      	nop			; (mov r8, r8)
 8002274:	02020304 	.word	0x02020304
 8002278:	01010101 	.word	0x01010101
	...

08002284 <__clzdi2>:
 8002284:	b510      	push	{r4, lr}
 8002286:	2900      	cmp	r1, #0
 8002288:	d103      	bne.n	8002292 <__clzdi2+0xe>
 800228a:	f7ff ffdd 	bl	8002248 <__clzsi2>
 800228e:	3020      	adds	r0, #32
 8002290:	e002      	b.n	8002298 <__clzdi2+0x14>
 8002292:	0008      	movs	r0, r1
 8002294:	f7ff ffd8 	bl	8002248 <__clzsi2>
 8002298:	bd10      	pop	{r4, pc}
 800229a:	46c0      	nop			; (mov r8, r8)

0800229c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800229c:	b590      	push	{r4, r7, lr}
 800229e:	b08b      	sub	sp, #44	; 0x2c
 80022a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a2:	2414      	movs	r4, #20
 80022a4:	193b      	adds	r3, r7, r4
 80022a6:	0018      	movs	r0, r3
 80022a8:	2314      	movs	r3, #20
 80022aa:	001a      	movs	r2, r3
 80022ac:	2100      	movs	r1, #0
 80022ae:	f003 f83d 	bl	800532c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b2:	4b78      	ldr	r3, [pc, #480]	; (8002494 <MX_GPIO_Init+0x1f8>)
 80022b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b6:	4b77      	ldr	r3, [pc, #476]	; (8002494 <MX_GPIO_Init+0x1f8>)
 80022b8:	2102      	movs	r1, #2
 80022ba:	430a      	orrs	r2, r1
 80022bc:	635a      	str	r2, [r3, #52]	; 0x34
 80022be:	4b75      	ldr	r3, [pc, #468]	; (8002494 <MX_GPIO_Init+0x1f8>)
 80022c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022c2:	2202      	movs	r2, #2
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ca:	4b72      	ldr	r3, [pc, #456]	; (8002494 <MX_GPIO_Init+0x1f8>)
 80022cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ce:	4b71      	ldr	r3, [pc, #452]	; (8002494 <MX_GPIO_Init+0x1f8>)
 80022d0:	2104      	movs	r1, #4
 80022d2:	430a      	orrs	r2, r1
 80022d4:	635a      	str	r2, [r3, #52]	; 0x34
 80022d6:	4b6f      	ldr	r3, [pc, #444]	; (8002494 <MX_GPIO_Init+0x1f8>)
 80022d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022da:	2204      	movs	r2, #4
 80022dc:	4013      	ands	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022e2:	4b6c      	ldr	r3, [pc, #432]	; (8002494 <MX_GPIO_Init+0x1f8>)
 80022e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022e6:	4b6b      	ldr	r3, [pc, #428]	; (8002494 <MX_GPIO_Init+0x1f8>)
 80022e8:	2120      	movs	r1, #32
 80022ea:	430a      	orrs	r2, r1
 80022ec:	635a      	str	r2, [r3, #52]	; 0x34
 80022ee:	4b69      	ldr	r3, [pc, #420]	; (8002494 <MX_GPIO_Init+0x1f8>)
 80022f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f2:	2220      	movs	r2, #32
 80022f4:	4013      	ands	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fa:	4b66      	ldr	r3, [pc, #408]	; (8002494 <MX_GPIO_Init+0x1f8>)
 80022fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022fe:	4b65      	ldr	r3, [pc, #404]	; (8002494 <MX_GPIO_Init+0x1f8>)
 8002300:	2101      	movs	r1, #1
 8002302:	430a      	orrs	r2, r1
 8002304:	635a      	str	r2, [r3, #52]	; 0x34
 8002306:	4b63      	ldr	r3, [pc, #396]	; (8002494 <MX_GPIO_Init+0x1f8>)
 8002308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800230a:	2201      	movs	r2, #1
 800230c:	4013      	ands	r3, r2
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Start_Enable_GPIO_Port, Start_Enable_Pin, GPIO_PIN_RESET);
 8002312:	23a0      	movs	r3, #160	; 0xa0
 8002314:	05db      	lsls	r3, r3, #23
 8002316:	2200      	movs	r2, #0
 8002318:	2101      	movs	r1, #1
 800231a:	0018      	movs	r0, r3
 800231c:	f001 f816 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002320:	4b5d      	ldr	r3, [pc, #372]	; (8002498 <MX_GPIO_Init+0x1fc>)
 8002322:	2200      	movs	r2, #0
 8002324:	2140      	movs	r1, #64	; 0x40
 8002326:	0018      	movs	r0, r3
 8002328:	f001 f810 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Injector_Enable_GPIO_Port, Injector_Enable_Pin, GPIO_PIN_SET);
 800232c:	4b5b      	ldr	r3, [pc, #364]	; (800249c <MX_GPIO_Init+0x200>)
 800232e:	2201      	movs	r2, #1
 8002330:	2108      	movs	r1, #8
 8002332:	0018      	movs	r0, r3
 8002334:	f001 f80a 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB9 PB0 PB2 PB4
                           PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_4
 8002338:	193b      	adds	r3, r7, r4
 800233a:	4a59      	ldr	r2, [pc, #356]	; (80024a0 <MX_GPIO_Init+0x204>)
 800233c:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800233e:	193b      	adds	r3, r7, r4
 8002340:	2203      	movs	r2, #3
 8002342:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	193b      	adds	r3, r7, r4
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234a:	193b      	adds	r3, r7, r4
 800234c:	4a53      	ldr	r2, [pc, #332]	; (800249c <MX_GPIO_Init+0x200>)
 800234e:	0019      	movs	r1, r3
 8002350:	0010      	movs	r0, r2
 8002352:	f000 fe97 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002356:	193b      	adds	r3, r7, r4
 8002358:	2204      	movs	r2, #4
 800235a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800235c:	193b      	adds	r3, r7, r4
 800235e:	2203      	movs	r2, #3
 8002360:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002362:	193b      	adds	r3, r7, r4
 8002364:	2200      	movs	r2, #0
 8002366:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002368:	193b      	adds	r3, r7, r4
 800236a:	4a4e      	ldr	r2, [pc, #312]	; (80024a4 <MX_GPIO_Init+0x208>)
 800236c:	0019      	movs	r1, r3
 800236e:	0010      	movs	r0, r2
 8002370:	f000 fe88 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Start_Enable_Pin;
 8002374:	193b      	adds	r3, r7, r4
 8002376:	2201      	movs	r2, #1
 8002378:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237a:	193b      	adds	r3, r7, r4
 800237c:	2201      	movs	r2, #1
 800237e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002380:	193b      	adds	r3, r7, r4
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	193b      	adds	r3, r7, r4
 8002388:	2200      	movs	r2, #0
 800238a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Start_Enable_GPIO_Port, &GPIO_InitStruct);
 800238c:	193a      	adds	r2, r7, r4
 800238e:	23a0      	movs	r3, #160	; 0xa0
 8002390:	05db      	lsls	r3, r3, #23
 8002392:	0011      	movs	r1, r2
 8002394:	0018      	movs	r0, r3
 8002396:	f000 fe75 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PA6 PA8
                           PA9 PA10 PA11 PA12
                           PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8
 800239a:	193b      	adds	r3, r7, r4
 800239c:	4a42      	ldr	r2, [pc, #264]	; (80024a8 <MX_GPIO_Init+0x20c>)
 800239e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023a0:	193b      	adds	r3, r7, r4
 80023a2:	2203      	movs	r2, #3
 80023a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	193b      	adds	r3, r7, r4
 80023a8:	2200      	movs	r2, #0
 80023aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023ac:	193a      	adds	r2, r7, r4
 80023ae:	23a0      	movs	r3, #160	; 0xa0
 80023b0:	05db      	lsls	r3, r3, #23
 80023b2:	0011      	movs	r1, r2
 80023b4:	0018      	movs	r0, r3
 80023b6:	f000 fe65 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Deadmans_Pin;
 80023ba:	193b      	adds	r3, r7, r4
 80023bc:	2220      	movs	r2, #32
 80023be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80023c0:	193b      	adds	r3, r7, r4
 80023c2:	22c4      	movs	r2, #196	; 0xc4
 80023c4:	0392      	lsls	r2, r2, #14
 80023c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023c8:	193b      	adds	r3, r7, r4
 80023ca:	2201      	movs	r2, #1
 80023cc:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Deadmans_GPIO_Port, &GPIO_InitStruct);
 80023ce:	193a      	adds	r2, r7, r4
 80023d0:	23a0      	movs	r3, #160	; 0xa0
 80023d2:	05db      	lsls	r3, r3, #23
 80023d4:	0011      	movs	r1, r2
 80023d6:	0018      	movs	r0, r3
 80023d8:	f000 fe54 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VEL_Pin;
 80023dc:	193b      	adds	r3, r7, r4
 80023de:	2280      	movs	r2, #128	; 0x80
 80023e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023e2:	193b      	adds	r3, r7, r4
 80023e4:	2284      	movs	r2, #132	; 0x84
 80023e6:	0392      	lsls	r2, r2, #14
 80023e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ea:	193b      	adds	r3, r7, r4
 80023ec:	2201      	movs	r2, #1
 80023ee:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(VEL_GPIO_Port, &GPIO_InitStruct);
 80023f0:	193a      	adds	r2, r7, r4
 80023f2:	23a0      	movs	r3, #160	; 0xa0
 80023f4:	05db      	lsls	r3, r3, #23
 80023f6:	0011      	movs	r1, r2
 80023f8:	0018      	movs	r0, r3
 80023fa:	f000 fe43 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RPM_Pin;
 80023fe:	0021      	movs	r1, r4
 8002400:	187b      	adds	r3, r7, r1
 8002402:	2202      	movs	r2, #2
 8002404:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002406:	187b      	adds	r3, r7, r1
 8002408:	2284      	movs	r2, #132	; 0x84
 800240a:	0392      	lsls	r2, r2, #14
 800240c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800240e:	000c      	movs	r4, r1
 8002410:	193b      	adds	r3, r7, r4
 8002412:	2201      	movs	r2, #1
 8002414:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(RPM_GPIO_Port, &GPIO_InitStruct);
 8002416:	193b      	adds	r3, r7, r4
 8002418:	4a20      	ldr	r2, [pc, #128]	; (800249c <MX_GPIO_Init+0x200>)
 800241a:	0019      	movs	r1, r3
 800241c:	0010      	movs	r0, r2
 800241e:	f000 fe31 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002422:	193b      	adds	r3, r7, r4
 8002424:	2240      	movs	r2, #64	; 0x40
 8002426:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002428:	193b      	adds	r3, r7, r4
 800242a:	2201      	movs	r2, #1
 800242c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	193b      	adds	r3, r7, r4
 8002430:	2200      	movs	r2, #0
 8002432:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002434:	193b      	adds	r3, r7, r4
 8002436:	2200      	movs	r2, #0
 8002438:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800243a:	193b      	adds	r3, r7, r4
 800243c:	4a16      	ldr	r2, [pc, #88]	; (8002498 <MX_GPIO_Init+0x1fc>)
 800243e:	0019      	movs	r1, r3
 8002440:	0010      	movs	r0, r2
 8002442:	f000 fe1f 	bl	8003084 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Injector_Enable_Pin;
 8002446:	0021      	movs	r1, r4
 8002448:	187b      	adds	r3, r7, r1
 800244a:	2208      	movs	r2, #8
 800244c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244e:	187b      	adds	r3, r7, r1
 8002450:	2201      	movs	r2, #1
 8002452:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	187b      	adds	r3, r7, r1
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800245a:	187b      	adds	r3, r7, r1
 800245c:	2200      	movs	r2, #0
 800245e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Injector_Enable_GPIO_Port, &GPIO_InitStruct);
 8002460:	187b      	adds	r3, r7, r1
 8002462:	4a0e      	ldr	r2, [pc, #56]	; (800249c <MX_GPIO_Init+0x200>)
 8002464:	0019      	movs	r1, r3
 8002466:	0010      	movs	r0, r2
 8002468:	f000 fe0c 	bl	8003084 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 800246c:	2200      	movs	r2, #0
 800246e:	2100      	movs	r1, #0
 8002470:	2005      	movs	r0, #5
 8002472:	f000 fdd5 	bl	8003020 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002476:	2005      	movs	r0, #5
 8002478:	f000 fde7 	bl	800304a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800247c:	2200      	movs	r2, #0
 800247e:	2100      	movs	r1, #0
 8002480:	2007      	movs	r0, #7
 8002482:	f000 fdcd 	bl	8003020 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002486:	2007      	movs	r0, #7
 8002488:	f000 fddf 	bl	800304a <HAL_NVIC_EnableIRQ>

}
 800248c:	46c0      	nop			; (mov r8, r8)
 800248e:	46bd      	mov	sp, r7
 8002490:	b00b      	add	sp, #44	; 0x2c
 8002492:	bd90      	pop	{r4, r7, pc}
 8002494:	40021000 	.word	0x40021000
 8002498:	50000800 	.word	0x50000800
 800249c:	50000400 	.word	0x50000400
 80024a0:	00000335 	.word	0x00000335
 80024a4:	50001400 	.word	0x50001400
 80024a8:	00009f52 	.word	0x00009f52

080024ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80024ac:	b5b0      	push	{r4, r5, r7, lr}
 80024ae:	b090      	sub	sp, #64	; 0x40
 80024b0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024b2:	f000 fc5f 	bl	8002d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80024b6:	f000 f867 	bl	8002588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80024ba:	f7ff feef 	bl	800229c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80024be:	f000 fb61 	bl	8002b84 <MX_USART2_UART_Init>
  MX_TIM14_Init();
 80024c2:	f000 fac5 	bl	8002a50 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 80024c6:	f000 fb0f 	bl	8002ae8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // Start velocity/engine rpm average updating timer
  HAL_TIM_Base_Start_IT(&htim14);
 80024ca:	4b26      	ldr	r3, [pc, #152]	; (8002564 <main+0xb8>)
 80024cc:	0018      	movs	r0, r3
 80024ce:	f001 fe6d 	bl	80041ac <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (rpmAverage < 800) {				// If rpm is low, enable starter
 80024d2:	4b25      	ldr	r3, [pc, #148]	; (8002568 <main+0xbc>)
 80024d4:	6818      	ldr	r0, [r3, #0]
 80024d6:	6859      	ldr	r1, [r3, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	4b24      	ldr	r3, [pc, #144]	; (800256c <main+0xc0>)
 80024dc:	f7fd ffba 	bl	8000454 <__aeabi_dcmplt>
 80024e0:	1e03      	subs	r3, r0, #0
 80024e2:	d00c      	beq.n	80024fe <main+0x52>
		  HAL_GPIO_WritePin(Start_Enable_GPIO_Port, Start_Enable_Pin, GPIO_PIN_SET);
 80024e4:	23a0      	movs	r3, #160	; 0xa0
 80024e6:	05db      	lsls	r3, r3, #23
 80024e8:	2201      	movs	r2, #1
 80024ea:	2101      	movs	r1, #1
 80024ec:	0018      	movs	r0, r3
 80024ee:	f000 ff2d 	bl	800334c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80024f2:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <main+0xc4>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	2140      	movs	r1, #64	; 0x40
 80024f8:	0018      	movs	r0, r3
 80024fa:	f000 ff27 	bl	800334c <HAL_GPIO_WritePin>
	  }
	  if (rpmAverage > 1000) { 	// If rpm is high, disable starter
 80024fe:	4b1a      	ldr	r3, [pc, #104]	; (8002568 <main+0xbc>)
 8002500:	6818      	ldr	r0, [r3, #0]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <main+0xc8>)
 8002508:	f7fd ffb8 	bl	800047c <__aeabi_dcmpgt>
 800250c:	1e03      	subs	r3, r0, #0
 800250e:	d00c      	beq.n	800252a <main+0x7e>
		  HAL_GPIO_WritePin(Start_Enable_GPIO_Port, Start_Enable_Pin, GPIO_PIN_RESET);
 8002510:	23a0      	movs	r3, #160	; 0xa0
 8002512:	05db      	lsls	r3, r3, #23
 8002514:	2200      	movs	r2, #0
 8002516:	2101      	movs	r1, #1
 8002518:	0018      	movs	r0, r3
 800251a:	f000 ff17 	bl	800334c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800251e:	4b14      	ldr	r3, [pc, #80]	; (8002570 <main+0xc4>)
 8002520:	2200      	movs	r2, #0
 8002522:	2140      	movs	r1, #64	; 0x40
 8002524:	0018      	movs	r0, r3
 8002526:	f000 ff11 	bl	800334c <HAL_GPIO_WritePin>
	  }

#ifdef VERA_DEBUG
	char str[50];
	sprintf(str, "RPM: %0.f | VEL: %0.1f km/h\n\r", rpmAverage, velAverage*3.6);
 800252a:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <main+0xbc>)
 800252c:	681c      	ldr	r4, [r3, #0]
 800252e:	685d      	ldr	r5, [r3, #4]
 8002530:	4b11      	ldr	r3, [pc, #68]	; (8002578 <main+0xcc>)
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	6859      	ldr	r1, [r3, #4]
 8002536:	4a11      	ldr	r2, [pc, #68]	; (800257c <main+0xd0>)
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <main+0xd4>)
 800253a:	f7fe ffdd 	bl	80014f8 <__aeabi_dmul>
 800253e:	0002      	movs	r2, r0
 8002540:	000b      	movs	r3, r1
 8002542:	4910      	ldr	r1, [pc, #64]	; (8002584 <main+0xd8>)
 8002544:	1d38      	adds	r0, r7, #4
 8002546:	9200      	str	r2, [sp, #0]
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	0022      	movs	r2, r4
 800254c:	002b      	movs	r3, r5
 800254e:	f003 fb63 	bl	8005c18 <siprintf>
	printString2(str);
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	0018      	movs	r0, r3
 8002556:	f000 f85f 	bl	8002618 <printString2>
#endif

	  HAL_Delay(VELOCITY_UPDATE_PERIOD);
 800255a:	20fa      	movs	r0, #250	; 0xfa
 800255c:	f000 fc90 	bl	8002e80 <HAL_Delay>
  {
 8002560:	e7b7      	b.n	80024d2 <main+0x26>
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	20000220 	.word	0x20000220
 8002568:	20000210 	.word	0x20000210
 800256c:	40890000 	.word	0x40890000
 8002570:	50000800 	.word	0x50000800
 8002574:	408f4000 	.word	0x408f4000
 8002578:	20000200 	.word	0x20000200
 800257c:	cccccccd 	.word	0xcccccccd
 8002580:	400ccccc 	.word	0x400ccccc
 8002584:	08008288 	.word	0x08008288

08002588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002588:	b590      	push	{r4, r7, lr}
 800258a:	b093      	sub	sp, #76	; 0x4c
 800258c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800258e:	2410      	movs	r4, #16
 8002590:	193b      	adds	r3, r7, r4
 8002592:	0018      	movs	r0, r3
 8002594:	2338      	movs	r3, #56	; 0x38
 8002596:	001a      	movs	r2, r3
 8002598:	2100      	movs	r1, #0
 800259a:	f002 fec7 	bl	800532c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800259e:	003b      	movs	r3, r7
 80025a0:	0018      	movs	r0, r3
 80025a2:	2310      	movs	r3, #16
 80025a4:	001a      	movs	r2, r3
 80025a6:	2100      	movs	r1, #0
 80025a8:	f002 fec0 	bl	800532c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025ac:	2380      	movs	r3, #128	; 0x80
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	0018      	movs	r0, r3
 80025b2:	f000 ff13 	bl	80033dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80025b6:	193b      	adds	r3, r7, r4
 80025b8:	2202      	movs	r2, #2
 80025ba:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025bc:	193b      	adds	r3, r7, r4
 80025be:	2280      	movs	r2, #128	; 0x80
 80025c0:	0052      	lsls	r2, r2, #1
 80025c2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80025c4:	193b      	adds	r3, r7, r4
 80025c6:	2200      	movs	r2, #0
 80025c8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80025ca:	193b      	adds	r3, r7, r4
 80025cc:	2240      	movs	r2, #64	; 0x40
 80025ce:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80025d0:	193b      	adds	r3, r7, r4
 80025d2:	2200      	movs	r2, #0
 80025d4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025d6:	193b      	adds	r3, r7, r4
 80025d8:	0018      	movs	r0, r3
 80025da:	f000 ff4b 	bl	8003474 <HAL_RCC_OscConfig>
 80025de:	1e03      	subs	r3, r0, #0
 80025e0:	d001      	beq.n	80025e6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80025e2:	f000 f90f 	bl	8002804 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025e6:	003b      	movs	r3, r7
 80025e8:	2207      	movs	r2, #7
 80025ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80025ec:	003b      	movs	r3, r7
 80025ee:	2200      	movs	r2, #0
 80025f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025f2:	003b      	movs	r3, r7
 80025f4:	2200      	movs	r2, #0
 80025f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025f8:	003b      	movs	r3, r7
 80025fa:	2200      	movs	r2, #0
 80025fc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80025fe:	003b      	movs	r3, r7
 8002600:	2100      	movs	r1, #0
 8002602:	0018      	movs	r0, r3
 8002604:	f001 fa56 	bl	8003ab4 <HAL_RCC_ClockConfig>
 8002608:	1e03      	subs	r3, r0, #0
 800260a:	d001      	beq.n	8002610 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800260c:	f000 f8fa 	bl	8002804 <Error_Handler>
  }
}
 8002610:	46c0      	nop			; (mov r8, r8)
 8002612:	46bd      	mov	sp, r7
 8002614:	b013      	add	sp, #76	; 0x4c
 8002616:	bd90      	pop	{r4, r7, pc}

08002618 <printString2>:

/* USER CODE BEGIN 4 */

void printString2(char* pData) {
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, pData, strlen(pData), 1000);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	0018      	movs	r0, r3
 8002624:	f7fd fd6e 	bl	8000104 <strlen>
 8002628:	0003      	movs	r3, r0
 800262a:	b29a      	uxth	r2, r3
 800262c:	23fa      	movs	r3, #250	; 0xfa
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4803      	ldr	r0, [pc, #12]	; (8002640 <printString2+0x28>)
 8002634:	f002 f84c 	bl	80046d0 <HAL_UART_Transmit>
}
 8002638:	46c0      	nop			; (mov r8, r8)
 800263a:	46bd      	mov	sp, r7
 800263c:	b002      	add	sp, #8
 800263e:	bd80      	pop	{r7, pc}
 8002640:	200002fc 	.word	0x200002fc

08002644 <HAL_GPIO_EXTI_Rising_Callback>:
}




void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	0002      	movs	r2, r0
 800264c:	1dbb      	adds	r3, r7, #6
 800264e:	801a      	strh	r2, [r3, #0]
	if (GPIO_Pin == Deadmans_Pin) {
 8002650:	1dbb      	adds	r3, r7, #6
 8002652:	881b      	ldrh	r3, [r3, #0]
 8002654:	2b20      	cmp	r3, #32
 8002656:	d102      	bne.n	800265e <HAL_GPIO_EXTI_Rising_Callback+0x1a>
		deadmans = 1;
 8002658:	4b03      	ldr	r3, [pc, #12]	; (8002668 <HAL_GPIO_EXTI_Rising_Callback+0x24>)
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]
	}
}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	46bd      	mov	sp, r7
 8002662:	b002      	add	sp, #8
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	20000218 	.word	0x20000218

0800266c <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) {
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	0002      	movs	r2, r0
 8002674:	1dbb      	adds	r3, r7, #6
 8002676:	801a      	strh	r2, [r3, #0]
	switch (GPIO_Pin) {
 8002678:	1dbb      	adds	r3, r7, #6
 800267a:	881b      	ldrh	r3, [r3, #0]
 800267c:	2b80      	cmp	r3, #128	; 0x80
 800267e:	d008      	beq.n	8002692 <HAL_GPIO_EXTI_Falling_Callback+0x26>
 8002680:	dc15      	bgt.n	80026ae <HAL_GPIO_EXTI_Falling_Callback+0x42>
 8002682:	2b02      	cmp	r3, #2
 8002684:	d00c      	beq.n	80026a0 <HAL_GPIO_EXTI_Falling_Callback+0x34>
 8002686:	2b20      	cmp	r3, #32
 8002688:	d111      	bne.n	80026ae <HAL_GPIO_EXTI_Falling_Callback+0x42>
	case Deadmans_Pin:
		deadmans = 0;
 800268a:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <HAL_GPIO_EXTI_Falling_Callback+0x4c>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]
		break;
 8002690:	e00d      	b.n	80026ae <HAL_GPIO_EXTI_Falling_Callback+0x42>
	case VEL_Pin:
		velTachTrigCount++;
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	3301      	adds	r3, #1
 8002698:	b2da      	uxtb	r2, r3
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <HAL_GPIO_EXTI_Falling_Callback+0x50>)
 800269c:	701a      	strb	r2, [r3, #0]
		break;
 800269e:	e006      	b.n	80026ae <HAL_GPIO_EXTI_Falling_Callback+0x42>
	case RPM_Pin:
		rpmTachTrigCount++;
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	4b05      	ldr	r3, [pc, #20]	; (80026c0 <HAL_GPIO_EXTI_Falling_Callback+0x54>)
 80026aa:	701a      	strb	r2, [r3, #0]
		break;
 80026ac:	46c0      	nop			; (mov r8, r8)
	}
}
 80026ae:	46c0      	nop			; (mov r8, r8)
 80026b0:	46bd      	mov	sp, r7
 80026b2:	b002      	add	sp, #8
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	46c0      	nop			; (mov r8, r8)
 80026b8:	20000218 	.word	0x20000218
 80026bc:	200001fc 	.word	0x200001fc
 80026c0:	20000208 	.word	0x20000208

080026c4 <tachTimerIRQHandler>:

/**
 *  @brief Triggered a set number of times a second. Checks tachometer trigger count and updates velocity/engine rpm average.
 *
 */
void tachTimerIRQHandler(void) {
 80026c4:	b5b0      	push	{r4, r5, r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0

	// Update the velocity average
	// Moving average, insert the velocity measured this cycle into the average. 2πr * rev/s
	double measuredvelocity = (2.0 * PI * VEL_WHEEL_RADIUS * velTachTrigCount / (double) VEL_TRIG_PER_REV)/(VELOCITY_UPDATE_PERIOD / 1000.0);	// m/s
 80026ca:	4b43      	ldr	r3, [pc, #268]	; (80027d8 <tachTimerIRQHandler+0x114>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	0018      	movs	r0, r3
 80026d0:	f7ff fd64 	bl	800219c <__aeabi_i2d>
 80026d4:	4a41      	ldr	r2, [pc, #260]	; (80027dc <tachTimerIRQHandler+0x118>)
 80026d6:	4b42      	ldr	r3, [pc, #264]	; (80027e0 <tachTimerIRQHandler+0x11c>)
 80026d8:	f7fe ff0e 	bl	80014f8 <__aeabi_dmul>
 80026dc:	0002      	movs	r2, r0
 80026de:	000b      	movs	r3, r1
 80026e0:	0010      	movs	r0, r2
 80026e2:	0019      	movs	r1, r3
 80026e4:	2200      	movs	r2, #0
 80026e6:	4b3f      	ldr	r3, [pc, #252]	; (80027e4 <tachTimerIRQHandler+0x120>)
 80026e8:	f7fe fb04 	bl	8000cf4 <__aeabi_ddiv>
 80026ec:	0002      	movs	r2, r0
 80026ee:	000b      	movs	r3, r1
 80026f0:	60ba      	str	r2, [r7, #8]
 80026f2:	60fb      	str	r3, [r7, #12]
	velAverage -= velAverage/VEL_AVG_COUNT;
 80026f4:	4b3c      	ldr	r3, [pc, #240]	; (80027e8 <tachTimerIRQHandler+0x124>)
 80026f6:	681c      	ldr	r4, [r3, #0]
 80026f8:	685d      	ldr	r5, [r3, #4]
 80026fa:	4b3b      	ldr	r3, [pc, #236]	; (80027e8 <tachTimerIRQHandler+0x124>)
 80026fc:	6818      	ldr	r0, [r3, #0]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	4b3a      	ldr	r3, [pc, #232]	; (80027ec <tachTimerIRQHandler+0x128>)
 8002704:	f7fe faf6 	bl	8000cf4 <__aeabi_ddiv>
 8002708:	0002      	movs	r2, r0
 800270a:	000b      	movs	r3, r1
 800270c:	0020      	movs	r0, r4
 800270e:	0029      	movs	r1, r5
 8002710:	f7ff f95e 	bl	80019d0 <__aeabi_dsub>
 8002714:	0002      	movs	r2, r0
 8002716:	000b      	movs	r3, r1
 8002718:	4933      	ldr	r1, [pc, #204]	; (80027e8 <tachTimerIRQHandler+0x124>)
 800271a:	600a      	str	r2, [r1, #0]
 800271c:	604b      	str	r3, [r1, #4]
	velAverage += measuredvelocity/VEL_AVG_COUNT;
 800271e:	2200      	movs	r2, #0
 8002720:	4b32      	ldr	r3, [pc, #200]	; (80027ec <tachTimerIRQHandler+0x128>)
 8002722:	68b8      	ldr	r0, [r7, #8]
 8002724:	68f9      	ldr	r1, [r7, #12]
 8002726:	f7fe fae5 	bl	8000cf4 <__aeabi_ddiv>
 800272a:	0002      	movs	r2, r0
 800272c:	000b      	movs	r3, r1
 800272e:	0010      	movs	r0, r2
 8002730:	0019      	movs	r1, r3
 8002732:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <tachTimerIRQHandler+0x124>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f7fd ffa0 	bl	800067c <__aeabi_dadd>
 800273c:	0002      	movs	r2, r0
 800273e:	000b      	movs	r3, r1
 8002740:	4929      	ldr	r1, [pc, #164]	; (80027e8 <tachTimerIRQHandler+0x124>)
 8002742:	600a      	str	r2, [r1, #0]
 8002744:	604b      	str	r3, [r1, #4]
	velTachTrigCount = 0;
 8002746:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <tachTimerIRQHandler+0x114>)
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]

	// Update the engine rpm average
	// Moving average, insert the engine rpm measured this cycle into the average. 60.0 s * (revs/second)
	double measuredRPM = (rpmTachTrigCount / (double) RPM_TRIG_PER_REV) / (VELOCITY_UPDATE_PERIOD / 60000.0);	// rpm
 800274c:	4b28      	ldr	r3, [pc, #160]	; (80027f0 <tachTimerIRQHandler+0x12c>)
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	0018      	movs	r0, r3
 8002752:	f7ff fd23 	bl	800219c <__aeabi_i2d>
 8002756:	2200      	movs	r2, #0
 8002758:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <tachTimerIRQHandler+0x130>)
 800275a:	f7fe facb 	bl	8000cf4 <__aeabi_ddiv>
 800275e:	0002      	movs	r2, r0
 8002760:	000b      	movs	r3, r1
 8002762:	0010      	movs	r0, r2
 8002764:	0019      	movs	r1, r3
 8002766:	4a24      	ldr	r2, [pc, #144]	; (80027f8 <tachTimerIRQHandler+0x134>)
 8002768:	4b24      	ldr	r3, [pc, #144]	; (80027fc <tachTimerIRQHandler+0x138>)
 800276a:	f7fe fac3 	bl	8000cf4 <__aeabi_ddiv>
 800276e:	0002      	movs	r2, r0
 8002770:	000b      	movs	r3, r1
 8002772:	603a      	str	r2, [r7, #0]
 8002774:	607b      	str	r3, [r7, #4]
	rpmAverage -= rpmAverage/RPM_AVG_COUNT;
 8002776:	4b22      	ldr	r3, [pc, #136]	; (8002800 <tachTimerIRQHandler+0x13c>)
 8002778:	681c      	ldr	r4, [r3, #0]
 800277a:	685d      	ldr	r5, [r3, #4]
 800277c:	4b20      	ldr	r3, [pc, #128]	; (8002800 <tachTimerIRQHandler+0x13c>)
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	6859      	ldr	r1, [r3, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <tachTimerIRQHandler+0x128>)
 8002786:	f7fe fab5 	bl	8000cf4 <__aeabi_ddiv>
 800278a:	0002      	movs	r2, r0
 800278c:	000b      	movs	r3, r1
 800278e:	0020      	movs	r0, r4
 8002790:	0029      	movs	r1, r5
 8002792:	f7ff f91d 	bl	80019d0 <__aeabi_dsub>
 8002796:	0002      	movs	r2, r0
 8002798:	000b      	movs	r3, r1
 800279a:	4919      	ldr	r1, [pc, #100]	; (8002800 <tachTimerIRQHandler+0x13c>)
 800279c:	600a      	str	r2, [r1, #0]
 800279e:	604b      	str	r3, [r1, #4]
	rpmAverage += measuredRPM/RPM_AVG_COUNT;
 80027a0:	2200      	movs	r2, #0
 80027a2:	4b12      	ldr	r3, [pc, #72]	; (80027ec <tachTimerIRQHandler+0x128>)
 80027a4:	6838      	ldr	r0, [r7, #0]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	f7fe faa4 	bl	8000cf4 <__aeabi_ddiv>
 80027ac:	0002      	movs	r2, r0
 80027ae:	000b      	movs	r3, r1
 80027b0:	0010      	movs	r0, r2
 80027b2:	0019      	movs	r1, r3
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <tachTimerIRQHandler+0x13c>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f7fd ff5f 	bl	800067c <__aeabi_dadd>
 80027be:	0002      	movs	r2, r0
 80027c0:	000b      	movs	r3, r1
 80027c2:	490f      	ldr	r1, [pc, #60]	; (8002800 <tachTimerIRQHandler+0x13c>)
 80027c4:	600a      	str	r2, [r1, #0]
 80027c6:	604b      	str	r3, [r1, #4]
	rpmTachTrigCount = 0;
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <tachTimerIRQHandler+0x12c>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
}
 80027ce:	46c0      	nop			; (mov r8, r8)
 80027d0:	46bd      	mov	sp, r7
 80027d2:	b004      	add	sp, #16
 80027d4:	bdb0      	pop	{r4, r5, r7, pc}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	200001fc 	.word	0x200001fc
 80027dc:	541b2f80 	.word	0x541b2f80
 80027e0:	3ffe28c7 	.word	0x3ffe28c7
 80027e4:	3fd00000 	.word	0x3fd00000
 80027e8:	20000200 	.word	0x20000200
 80027ec:	40100000 	.word	0x40100000
 80027f0:	20000208 	.word	0x20000208
 80027f4:	40260000 	.word	0x40260000
 80027f8:	11111111 	.word	0x11111111
 80027fc:	3f711111 	.word	0x3f711111
 8002800:	20000210 	.word	0x20000210

08002804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002808:	b672      	cpsid	i
}
 800280a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800280c:	e7fe      	b.n	800280c <Error_Handler+0x8>
	...

08002810 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002816:	4b0f      	ldr	r3, [pc, #60]	; (8002854 <HAL_MspInit+0x44>)
 8002818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800281a:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <HAL_MspInit+0x44>)
 800281c:	2101      	movs	r1, #1
 800281e:	430a      	orrs	r2, r1
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <HAL_MspInit+0x44>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	2201      	movs	r2, #1
 8002828:	4013      	ands	r3, r2
 800282a:	607b      	str	r3, [r7, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_MspInit+0x44>)
 8002830:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002832:	4b08      	ldr	r3, [pc, #32]	; (8002854 <HAL_MspInit+0x44>)
 8002834:	2180      	movs	r1, #128	; 0x80
 8002836:	0549      	lsls	r1, r1, #21
 8002838:	430a      	orrs	r2, r1
 800283a:	63da      	str	r2, [r3, #60]	; 0x3c
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_MspInit+0x44>)
 800283e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	055b      	lsls	r3, r3, #21
 8002844:	4013      	ands	r3, r2
 8002846:	603b      	str	r3, [r7, #0]
 8002848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	46bd      	mov	sp, r7
 800284e:	b002      	add	sp, #8
 8002850:	bd80      	pop	{r7, pc}
 8002852:	46c0      	nop			; (mov r8, r8)
 8002854:	40021000 	.word	0x40021000

08002858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800285c:	e7fe      	b.n	800285c <NMI_Handler+0x4>

0800285e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002862:	e7fe      	b.n	8002862 <HardFault_Handler+0x4>

08002864 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002868:	46c0      	nop			; (mov r8, r8)
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}

0800286e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002872:	46c0      	nop			; (mov r8, r8)
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800287c:	f000 fae4 	bl	8002e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002880:	46c0      	nop			; (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RPM_Pin);
 800288a:	2002      	movs	r0, #2
 800288c:	f000 fd7c 	bl	8003388 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Deadmans_Pin);
 800289a:	2020      	movs	r0, #32
 800289c:	f000 fd74 	bl	8003388 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VEL_Pin);
 80028a0:	2080      	movs	r0, #128	; 0x80
 80028a2:	f000 fd71 	bl	8003388 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80028a6:	46c0      	nop			; (mov r8, r8)
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */
	tachTimerIRQHandler();
 80028b0:	f7ff ff08 	bl	80026c4 <tachTimerIRQHandler>
  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80028b4:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <TIM14_IRQHandler+0x18>)
 80028b6:	0018      	movs	r0, r3
 80028b8:	f001 fccc 	bl	8004254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80028bc:	46c0      	nop			; (mov r8, r8)
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	46c0      	nop			; (mov r8, r8)
 80028c4:	20000220 	.word	0x20000220

080028c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
	return 1;
 80028cc:	2301      	movs	r3, #1
}
 80028ce:	0018      	movs	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <_kill>:

int _kill(int pid, int sig)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028de:	f002 fcfb 	bl	80052d8 <__errno>
 80028e2:	0003      	movs	r3, r0
 80028e4:	2216      	movs	r2, #22
 80028e6:	601a      	str	r2, [r3, #0]
	return -1;
 80028e8:	2301      	movs	r3, #1
 80028ea:	425b      	negs	r3, r3
}
 80028ec:	0018      	movs	r0, r3
 80028ee:	46bd      	mov	sp, r7
 80028f0:	b002      	add	sp, #8
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <_exit>:

void _exit (int status)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80028fc:	2301      	movs	r3, #1
 80028fe:	425a      	negs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	0011      	movs	r1, r2
 8002904:	0018      	movs	r0, r3
 8002906:	f7ff ffe5 	bl	80028d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 800290a:	e7fe      	b.n	800290a <_exit+0x16>

0800290c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	e00a      	b.n	8002934 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800291e:	e000      	b.n	8002922 <_read+0x16>
 8002920:	bf00      	nop
 8002922:	0001      	movs	r1, r0
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	60ba      	str	r2, [r7, #8]
 800292a:	b2ca      	uxtb	r2, r1
 800292c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3301      	adds	r3, #1
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	dbf0      	blt.n	800291e <_read+0x12>
	}

return len;
 800293c:	687b      	ldr	r3, [r7, #4]
}
 800293e:	0018      	movs	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	b006      	add	sp, #24
 8002944:	bd80      	pop	{r7, pc}

08002946 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	e009      	b.n	800296c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	60ba      	str	r2, [r7, #8]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	0018      	movs	r0, r3
 8002962:	e000      	b.n	8002966 <_write+0x20>
 8002964:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3301      	adds	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	429a      	cmp	r2, r3
 8002972:	dbf1      	blt.n	8002958 <_write+0x12>
	}
	return len;
 8002974:	687b      	ldr	r3, [r7, #4]
}
 8002976:	0018      	movs	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	b006      	add	sp, #24
 800297c:	bd80      	pop	{r7, pc}

0800297e <_close>:

int _close(int file)
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b082      	sub	sp, #8
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
	return -1;
 8002986:	2301      	movs	r3, #1
 8002988:	425b      	negs	r3, r3
}
 800298a:	0018      	movs	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	b002      	add	sp, #8
 8002990:	bd80      	pop	{r7, pc}

08002992 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b082      	sub	sp, #8
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
 800299a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	2280      	movs	r2, #128	; 0x80
 80029a0:	0192      	lsls	r2, r2, #6
 80029a2:	605a      	str	r2, [r3, #4]
	return 0;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b002      	add	sp, #8
 80029ac:	bd80      	pop	{r7, pc}

080029ae <_isatty>:

int _isatty(int file)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
	return 1;
 80029b6:	2301      	movs	r3, #1
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b002      	add	sp, #8
 80029be:	bd80      	pop	{r7, pc}

080029c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
	return 0;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	0018      	movs	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	b004      	add	sp, #16
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029e0:	4a14      	ldr	r2, [pc, #80]	; (8002a34 <_sbrk+0x5c>)
 80029e2:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <_sbrk+0x60>)
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029ec:	4b13      	ldr	r3, [pc, #76]	; (8002a3c <_sbrk+0x64>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d102      	bne.n	80029fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029f4:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <_sbrk+0x64>)
 80029f6:	4a12      	ldr	r2, [pc, #72]	; (8002a40 <_sbrk+0x68>)
 80029f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029fa:	4b10      	ldr	r3, [pc, #64]	; (8002a3c <_sbrk+0x64>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	18d3      	adds	r3, r2, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d207      	bcs.n	8002a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a08:	f002 fc66 	bl	80052d8 <__errno>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	220c      	movs	r2, #12
 8002a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a12:	2301      	movs	r3, #1
 8002a14:	425b      	negs	r3, r3
 8002a16:	e009      	b.n	8002a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a18:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <_sbrk+0x64>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a1e:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <_sbrk+0x64>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	18d2      	adds	r2, r2, r3
 8002a26:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <_sbrk+0x64>)
 8002a28:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
}
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b006      	add	sp, #24
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20002000 	.word	0x20002000
 8002a38:	00000400 	.word	0x00000400
 8002a3c:	2000021c 	.word	0x2000021c
 8002a40:	200003a0 	.word	0x200003a0

08002a44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a48:	46c0      	nop			; (mov r8, r8)
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <MX_TIM14_Init>:

TIM_HandleTypeDef htim14;

/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002a54:	4b0e      	ldr	r3, [pc, #56]	; (8002a90 <MX_TIM14_Init+0x40>)
 8002a56:	4a0f      	ldr	r2, [pc, #60]	; (8002a94 <MX_TIM14_Init+0x44>)
 8002a58:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 16000;
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	; (8002a90 <MX_TIM14_Init+0x40>)
 8002a5c:	22fa      	movs	r2, #250	; 0xfa
 8002a5e:	0192      	lsls	r2, r2, #6
 8002a60:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a62:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <MX_TIM14_Init+0x40>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = VELOCITY_UPDATE_PERIOD;
 8002a68:	4b09      	ldr	r3, [pc, #36]	; (8002a90 <MX_TIM14_Init+0x40>)
 8002a6a:	22fa      	movs	r2, #250	; 0xfa
 8002a6c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a6e:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <MX_TIM14_Init+0x40>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <MX_TIM14_Init+0x40>)
 8002a76:	2280      	movs	r2, #128	; 0x80
 8002a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <MX_TIM14_Init+0x40>)
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f001 fb3d 	bl	80040fc <HAL_TIM_Base_Init>
 8002a82:	1e03      	subs	r3, r0, #0
 8002a84:	d001      	beq.n	8002a8a <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8002a86:	f7ff febd 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	20000220 	.word	0x20000220
 8002a94:	40002000 	.word	0x40002000

08002a98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a0e      	ldr	r2, [pc, #56]	; (8002ae0 <HAL_TIM_Base_MspInit+0x48>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d115      	bne.n	8002ad6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	; (8002ae4 <HAL_TIM_Base_MspInit+0x4c>)
 8002aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002aae:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <HAL_TIM_Base_MspInit+0x4c>)
 8002ab0:	2180      	movs	r1, #128	; 0x80
 8002ab2:	0209      	lsls	r1, r1, #8
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ab8:	4b0a      	ldr	r3, [pc, #40]	; (8002ae4 <HAL_TIM_Base_MspInit+0x4c>)
 8002aba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002abc:	2380      	movs	r3, #128	; 0x80
 8002abe:	021b      	lsls	r3, r3, #8
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]

    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	2100      	movs	r1, #0
 8002aca:	2013      	movs	r0, #19
 8002acc:	f000 faa8 	bl	8003020 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002ad0:	2013      	movs	r0, #19
 8002ad2:	f000 faba 	bl	800304a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b004      	add	sp, #16
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	40002000 	.word	0x40002000
 8002ae4:	40021000 	.word	0x40021000

08002ae8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002aec:	4b23      	ldr	r3, [pc, #140]	; (8002b7c <MX_USART1_UART_Init+0x94>)
 8002aee:	4a24      	ldr	r2, [pc, #144]	; (8002b80 <MX_USART1_UART_Init+0x98>)
 8002af0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002af2:	4b22      	ldr	r3, [pc, #136]	; (8002b7c <MX_USART1_UART_Init+0x94>)
 8002af4:	22e1      	movs	r2, #225	; 0xe1
 8002af6:	0252      	lsls	r2, r2, #9
 8002af8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002afa:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <MX_USART1_UART_Init+0x94>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b00:	4b1e      	ldr	r3, [pc, #120]	; (8002b7c <MX_USART1_UART_Init+0x94>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b06:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <MX_USART1_UART_Init+0x94>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b0c:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <MX_USART1_UART_Init+0x94>)
 8002b0e:	220c      	movs	r2, #12
 8002b10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b12:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <MX_USART1_UART_Init+0x94>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b18:	4b18      	ldr	r3, [pc, #96]	; (8002b7c <MX_USART1_UART_Init+0x94>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b1e:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <MX_USART1_UART_Init+0x94>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b24:	4b15      	ldr	r3, [pc, #84]	; (8002b7c <MX_USART1_UART_Init+0x94>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b2a:	4b14      	ldr	r3, [pc, #80]	; (8002b7c <MX_USART1_UART_Init+0x94>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b30:	4b12      	ldr	r3, [pc, #72]	; (8002b7c <MX_USART1_UART_Init+0x94>)
 8002b32:	0018      	movs	r0, r3
 8002b34:	f001 fd76 	bl	8004624 <HAL_UART_Init>
 8002b38:	1e03      	subs	r3, r0, #0
 8002b3a:	d001      	beq.n	8002b40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002b3c:	f7ff fe62 	bl	8002804 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b40:	4b0e      	ldr	r3, [pc, #56]	; (8002b7c <MX_USART1_UART_Init+0x94>)
 8002b42:	2100      	movs	r1, #0
 8002b44:	0018      	movs	r0, r3
 8002b46:	f002 fae7 	bl	8005118 <HAL_UARTEx_SetTxFifoThreshold>
 8002b4a:	1e03      	subs	r3, r0, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002b4e:	f7ff fe59 	bl	8002804 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b52:	4b0a      	ldr	r3, [pc, #40]	; (8002b7c <MX_USART1_UART_Init+0x94>)
 8002b54:	2100      	movs	r1, #0
 8002b56:	0018      	movs	r0, r3
 8002b58:	f002 fb1e 	bl	8005198 <HAL_UARTEx_SetRxFifoThreshold>
 8002b5c:	1e03      	subs	r3, r0, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002b60:	f7ff fe50 	bl	8002804 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002b64:	4b05      	ldr	r3, [pc, #20]	; (8002b7c <MX_USART1_UART_Init+0x94>)
 8002b66:	0018      	movs	r0, r3
 8002b68:	f002 fa9c 	bl	80050a4 <HAL_UARTEx_DisableFifoMode>
 8002b6c:	1e03      	subs	r3, r0, #0
 8002b6e:	d001      	beq.n	8002b74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002b70:	f7ff fe48 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	2000026c 	.word	0x2000026c
 8002b80:	40013800 	.word	0x40013800

08002b84 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b88:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <MX_USART2_UART_Init+0x60>)
 8002b8a:	4a17      	ldr	r2, [pc, #92]	; (8002be8 <MX_USART2_UART_Init+0x64>)
 8002b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002b8e:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <MX_USART2_UART_Init+0x60>)
 8002b90:	22e1      	movs	r2, #225	; 0xe1
 8002b92:	0252      	lsls	r2, r2, #9
 8002b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b96:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <MX_USART2_UART_Init+0x60>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <MX_USART2_UART_Init+0x60>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ba2:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <MX_USART2_UART_Init+0x60>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ba8:	4b0e      	ldr	r3, [pc, #56]	; (8002be4 <MX_USART2_UART_Init+0x60>)
 8002baa:	220c      	movs	r2, #12
 8002bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002bae:	4b0d      	ldr	r3, [pc, #52]	; (8002be4 <MX_USART2_UART_Init+0x60>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002bb4:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <MX_USART2_UART_Init+0x60>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002bba:	4b0a      	ldr	r3, [pc, #40]	; (8002be4 <MX_USART2_UART_Init+0x60>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bc0:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <MX_USART2_UART_Init+0x60>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bc6:	4b07      	ldr	r3, [pc, #28]	; (8002be4 <MX_USART2_UART_Init+0x60>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <MX_USART2_UART_Init+0x60>)
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f001 fd28 	bl	8004624 <HAL_UART_Init>
 8002bd4:	1e03      	subs	r3, r0, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002bd8:	f7ff fe14 	bl	8002804 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bdc:	46c0      	nop			; (mov r8, r8)
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	200002fc 	.word	0x200002fc
 8002be8:	40004400 	.word	0x40004400

08002bec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b097      	sub	sp, #92	; 0x5c
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bf4:	2344      	movs	r3, #68	; 0x44
 8002bf6:	18fb      	adds	r3, r7, r3
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	2314      	movs	r3, #20
 8002bfc:	001a      	movs	r2, r3
 8002bfe:	2100      	movs	r1, #0
 8002c00:	f002 fb94 	bl	800532c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c04:	241c      	movs	r4, #28
 8002c06:	193b      	adds	r3, r7, r4
 8002c08:	0018      	movs	r0, r3
 8002c0a:	2328      	movs	r3, #40	; 0x28
 8002c0c:	001a      	movs	r2, r3
 8002c0e:	2100      	movs	r1, #0
 8002c10:	f002 fb8c 	bl	800532c <memset>
  if(uartHandle->Instance==USART1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a3d      	ldr	r2, [pc, #244]	; (8002d10 <HAL_UART_MspInit+0x124>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d13e      	bne.n	8002c9c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002c1e:	193b      	adds	r3, r7, r4
 8002c20:	2201      	movs	r2, #1
 8002c22:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002c24:	193b      	adds	r3, r7, r4
 8002c26:	2200      	movs	r2, #0
 8002c28:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c2a:	193b      	adds	r3, r7, r4
 8002c2c:	0018      	movs	r0, r3
 8002c2e:	f001 f8eb 	bl	8003e08 <HAL_RCCEx_PeriphCLKConfig>
 8002c32:	1e03      	subs	r3, r0, #0
 8002c34:	d001      	beq.n	8002c3a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002c36:	f7ff fde5 	bl	8002804 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c3a:	4b36      	ldr	r3, [pc, #216]	; (8002d14 <HAL_UART_MspInit+0x128>)
 8002c3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c3e:	4b35      	ldr	r3, [pc, #212]	; (8002d14 <HAL_UART_MspInit+0x128>)
 8002c40:	2180      	movs	r1, #128	; 0x80
 8002c42:	01c9      	lsls	r1, r1, #7
 8002c44:	430a      	orrs	r2, r1
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
 8002c48:	4b32      	ldr	r3, [pc, #200]	; (8002d14 <HAL_UART_MspInit+0x128>)
 8002c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	01db      	lsls	r3, r3, #7
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
 8002c54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c56:	4b2f      	ldr	r3, [pc, #188]	; (8002d14 <HAL_UART_MspInit+0x128>)
 8002c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5a:	4b2e      	ldr	r3, [pc, #184]	; (8002d14 <HAL_UART_MspInit+0x128>)
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	635a      	str	r2, [r3, #52]	; 0x34
 8002c62:	4b2c      	ldr	r3, [pc, #176]	; (8002d14 <HAL_UART_MspInit+0x128>)
 8002c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c66:	2202      	movs	r2, #2
 8002c68:	4013      	ands	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]
 8002c6c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c6e:	2144      	movs	r1, #68	; 0x44
 8002c70:	187b      	adds	r3, r7, r1
 8002c72:	22c0      	movs	r2, #192	; 0xc0
 8002c74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c76:	187b      	adds	r3, r7, r1
 8002c78:	2202      	movs	r2, #2
 8002c7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	187b      	adds	r3, r7, r1
 8002c7e:	2200      	movs	r2, #0
 8002c80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c82:	187b      	adds	r3, r7, r1
 8002c84:	2200      	movs	r2, #0
 8002c86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8002c88:	187b      	adds	r3, r7, r1
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c8e:	187b      	adds	r3, r7, r1
 8002c90:	4a21      	ldr	r2, [pc, #132]	; (8002d18 <HAL_UART_MspInit+0x12c>)
 8002c92:	0019      	movs	r1, r3
 8002c94:	0010      	movs	r0, r2
 8002c96:	f000 f9f5 	bl	8003084 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002c9a:	e035      	b.n	8002d08 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART2)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a1e      	ldr	r2, [pc, #120]	; (8002d1c <HAL_UART_MspInit+0x130>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d130      	bne.n	8002d08 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ca6:	4b1b      	ldr	r3, [pc, #108]	; (8002d14 <HAL_UART_MspInit+0x128>)
 8002ca8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002caa:	4b1a      	ldr	r3, [pc, #104]	; (8002d14 <HAL_UART_MspInit+0x128>)
 8002cac:	2180      	movs	r1, #128	; 0x80
 8002cae:	0289      	lsls	r1, r1, #10
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cb4:	4b17      	ldr	r3, [pc, #92]	; (8002d14 <HAL_UART_MspInit+0x128>)
 8002cb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cb8:	2380      	movs	r3, #128	; 0x80
 8002cba:	029b      	lsls	r3, r3, #10
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc2:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <HAL_UART_MspInit+0x128>)
 8002cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc6:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <HAL_UART_MspInit+0x128>)
 8002cc8:	2101      	movs	r1, #1
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <HAL_UART_MspInit+0x128>)
 8002cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T_VCP_TX_Pin|T_VCP_RX_Pin;
 8002cda:	2144      	movs	r1, #68	; 0x44
 8002cdc:	187b      	adds	r3, r7, r1
 8002cde:	220c      	movs	r2, #12
 8002ce0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce2:	187b      	adds	r3, r7, r1
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ce8:	187b      	adds	r3, r7, r1
 8002cea:	2201      	movs	r2, #1
 8002cec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cee:	187b      	adds	r3, r7, r1
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002cf4:	187b      	adds	r3, r7, r1
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfa:	187a      	adds	r2, r7, r1
 8002cfc:	23a0      	movs	r3, #160	; 0xa0
 8002cfe:	05db      	lsls	r3, r3, #23
 8002d00:	0011      	movs	r1, r2
 8002d02:	0018      	movs	r0, r3
 8002d04:	f000 f9be 	bl	8003084 <HAL_GPIO_Init>
}
 8002d08:	46c0      	nop			; (mov r8, r8)
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	b017      	add	sp, #92	; 0x5c
 8002d0e:	bd90      	pop	{r4, r7, pc}
 8002d10:	40013800 	.word	0x40013800
 8002d14:	40021000 	.word	0x40021000
 8002d18:	50000400 	.word	0x50000400
 8002d1c:	40004400 	.word	0x40004400

08002d20 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d20:	480d      	ldr	r0, [pc, #52]	; (8002d58 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d22:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002d24:	f7ff fe8e 	bl	8002a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d28:	480c      	ldr	r0, [pc, #48]	; (8002d5c <LoopForever+0x6>)
  ldr r1, =_edata
 8002d2a:	490d      	ldr	r1, [pc, #52]	; (8002d60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	; (8002d64 <LoopForever+0xe>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d30:	e002      	b.n	8002d38 <LoopCopyDataInit>

08002d32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d36:	3304      	adds	r3, #4

08002d38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d3c:	d3f9      	bcc.n	8002d32 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	; (8002d68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d40:	4c0a      	ldr	r4, [pc, #40]	; (8002d6c <LoopForever+0x16>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d44:	e001      	b.n	8002d4a <LoopFillZerobss>

08002d46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d48:	3204      	adds	r2, #4

08002d4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d4c:	d3fb      	bcc.n	8002d46 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d4e:	f002 fac9 	bl	80052e4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002d52:	f7ff fbab 	bl	80024ac <main>

08002d56 <LoopForever>:

LoopForever:
  b LoopForever
 8002d56:	e7fe      	b.n	8002d56 <LoopForever>
  ldr   r0, =_estack
 8002d58:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d60:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002d64:	0800879c 	.word	0x0800879c
  ldr r2, =_sbss
 8002d68:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002d6c:	200003a0 	.word	0x200003a0

08002d70 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d70:	e7fe      	b.n	8002d70 <ADC1_IRQHandler>
	...

08002d74 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d7a:	1dfb      	adds	r3, r7, #7
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_Init+0x3c>)
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <HAL_Init+0x3c>)
 8002d86:	2180      	movs	r1, #128	; 0x80
 8002d88:	0049      	lsls	r1, r1, #1
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d8e:	2000      	movs	r0, #0
 8002d90:	f000 f810 	bl	8002db4 <HAL_InitTick>
 8002d94:	1e03      	subs	r3, r0, #0
 8002d96:	d003      	beq.n	8002da0 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002d98:	1dfb      	adds	r3, r7, #7
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	e001      	b.n	8002da4 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002da0:	f7ff fd36 	bl	8002810 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002da4:	1dfb      	adds	r3, r7, #7
 8002da6:	781b      	ldrb	r3, [r3, #0]
}
 8002da8:	0018      	movs	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b002      	add	sp, #8
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40022000 	.word	0x40022000

08002db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db4:	b590      	push	{r4, r7, lr}
 8002db6:	b085      	sub	sp, #20
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002dbc:	230f      	movs	r3, #15
 8002dbe:	18fb      	adds	r3, r7, r3
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002dc4:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <HAL_InitTick+0x88>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d02b      	beq.n	8002e24 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002dcc:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <HAL_InitTick+0x8c>)
 8002dce:	681c      	ldr	r4, [r3, #0]
 8002dd0:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <HAL_InitTick+0x88>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	23fa      	movs	r3, #250	; 0xfa
 8002dd8:	0098      	lsls	r0, r3, #2
 8002dda:	f7fd f9af 	bl	800013c <__udivsi3>
 8002dde:	0003      	movs	r3, r0
 8002de0:	0019      	movs	r1, r3
 8002de2:	0020      	movs	r0, r4
 8002de4:	f7fd f9aa 	bl	800013c <__udivsi3>
 8002de8:	0003      	movs	r3, r0
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 f93d 	bl	800306a <HAL_SYSTICK_Config>
 8002df0:	1e03      	subs	r3, r0, #0
 8002df2:	d112      	bne.n	8002e1a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d80a      	bhi.n	8002e10 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	425b      	negs	r3, r3
 8002e00:	2200      	movs	r2, #0
 8002e02:	0018      	movs	r0, r3
 8002e04:	f000 f90c 	bl	8003020 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e08:	4b0e      	ldr	r3, [pc, #56]	; (8002e44 <HAL_InitTick+0x90>)
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	601a      	str	r2, [r3, #0]
 8002e0e:	e00d      	b.n	8002e2c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002e10:	230f      	movs	r3, #15
 8002e12:	18fb      	adds	r3, r7, r3
 8002e14:	2201      	movs	r2, #1
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e008      	b.n	8002e2c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e1a:	230f      	movs	r3, #15
 8002e1c:	18fb      	adds	r3, r7, r3
 8002e1e:	2201      	movs	r2, #1
 8002e20:	701a      	strb	r2, [r3, #0]
 8002e22:	e003      	b.n	8002e2c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e24:	230f      	movs	r3, #15
 8002e26:	18fb      	adds	r3, r7, r3
 8002e28:	2201      	movs	r2, #1
 8002e2a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002e2c:	230f      	movs	r3, #15
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	781b      	ldrb	r3, [r3, #0]
}
 8002e32:	0018      	movs	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	b005      	add	sp, #20
 8002e38:	bd90      	pop	{r4, r7, pc}
 8002e3a:	46c0      	nop			; (mov r8, r8)
 8002e3c:	20000008 	.word	0x20000008
 8002e40:	20000000 	.word	0x20000000
 8002e44:	20000004 	.word	0x20000004

08002e48 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e4c:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <HAL_IncTick+0x1c>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	001a      	movs	r2, r3
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_IncTick+0x20>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	18d2      	adds	r2, r2, r3
 8002e58:	4b03      	ldr	r3, [pc, #12]	; (8002e68 <HAL_IncTick+0x20>)
 8002e5a:	601a      	str	r2, [r3, #0]
}
 8002e5c:	46c0      	nop			; (mov r8, r8)
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	20000008 	.word	0x20000008
 8002e68:	2000038c 	.word	0x2000038c

08002e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e70:	4b02      	ldr	r3, [pc, #8]	; (8002e7c <HAL_GetTick+0x10>)
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	0018      	movs	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	2000038c 	.word	0x2000038c

08002e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e88:	f7ff fff0 	bl	8002e6c <HAL_GetTick>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	3301      	adds	r3, #1
 8002e98:	d005      	beq.n	8002ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_Delay+0x44>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	001a      	movs	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	189b      	adds	r3, r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	f7ff ffe0 	bl	8002e6c <HAL_GetTick>
 8002eac:	0002      	movs	r2, r0
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d8f7      	bhi.n	8002ea8 <HAL_Delay+0x28>
  {
  }
}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b004      	add	sp, #16
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	20000008 	.word	0x20000008

08002ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	0002      	movs	r2, r0
 8002ed0:	1dfb      	adds	r3, r7, #7
 8002ed2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ed4:	1dfb      	adds	r3, r7, #7
 8002ed6:	781b      	ldrb	r3, [r3, #0]
 8002ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8002eda:	d809      	bhi.n	8002ef0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002edc:	1dfb      	adds	r3, r7, #7
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	001a      	movs	r2, r3
 8002ee2:	231f      	movs	r3, #31
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <__NVIC_EnableIRQ+0x30>)
 8002ee8:	2101      	movs	r1, #1
 8002eea:	4091      	lsls	r1, r2
 8002eec:	000a      	movs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002ef0:	46c0      	nop			; (mov r8, r8)
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	b002      	add	sp, #8
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	e000e100 	.word	0xe000e100

08002efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002efc:	b590      	push	{r4, r7, lr}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	0002      	movs	r2, r0
 8002f04:	6039      	str	r1, [r7, #0]
 8002f06:	1dfb      	adds	r3, r7, #7
 8002f08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f0a:	1dfb      	adds	r3, r7, #7
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b7f      	cmp	r3, #127	; 0x7f
 8002f10:	d828      	bhi.n	8002f64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f12:	4a2f      	ldr	r2, [pc, #188]	; (8002fd0 <__NVIC_SetPriority+0xd4>)
 8002f14:	1dfb      	adds	r3, r7, #7
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	b25b      	sxtb	r3, r3
 8002f1a:	089b      	lsrs	r3, r3, #2
 8002f1c:	33c0      	adds	r3, #192	; 0xc0
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	589b      	ldr	r3, [r3, r2]
 8002f22:	1dfa      	adds	r2, r7, #7
 8002f24:	7812      	ldrb	r2, [r2, #0]
 8002f26:	0011      	movs	r1, r2
 8002f28:	2203      	movs	r2, #3
 8002f2a:	400a      	ands	r2, r1
 8002f2c:	00d2      	lsls	r2, r2, #3
 8002f2e:	21ff      	movs	r1, #255	; 0xff
 8002f30:	4091      	lsls	r1, r2
 8002f32:	000a      	movs	r2, r1
 8002f34:	43d2      	mvns	r2, r2
 8002f36:	401a      	ands	r2, r3
 8002f38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	019b      	lsls	r3, r3, #6
 8002f3e:	22ff      	movs	r2, #255	; 0xff
 8002f40:	401a      	ands	r2, r3
 8002f42:	1dfb      	adds	r3, r7, #7
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	0018      	movs	r0, r3
 8002f48:	2303      	movs	r3, #3
 8002f4a:	4003      	ands	r3, r0
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f50:	481f      	ldr	r0, [pc, #124]	; (8002fd0 <__NVIC_SetPriority+0xd4>)
 8002f52:	1dfb      	adds	r3, r7, #7
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	b25b      	sxtb	r3, r3
 8002f58:	089b      	lsrs	r3, r3, #2
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	33c0      	adds	r3, #192	; 0xc0
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f62:	e031      	b.n	8002fc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f64:	4a1b      	ldr	r2, [pc, #108]	; (8002fd4 <__NVIC_SetPriority+0xd8>)
 8002f66:	1dfb      	adds	r3, r7, #7
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	0019      	movs	r1, r3
 8002f6c:	230f      	movs	r3, #15
 8002f6e:	400b      	ands	r3, r1
 8002f70:	3b08      	subs	r3, #8
 8002f72:	089b      	lsrs	r3, r3, #2
 8002f74:	3306      	adds	r3, #6
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	18d3      	adds	r3, r2, r3
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	1dfa      	adds	r2, r7, #7
 8002f80:	7812      	ldrb	r2, [r2, #0]
 8002f82:	0011      	movs	r1, r2
 8002f84:	2203      	movs	r2, #3
 8002f86:	400a      	ands	r2, r1
 8002f88:	00d2      	lsls	r2, r2, #3
 8002f8a:	21ff      	movs	r1, #255	; 0xff
 8002f8c:	4091      	lsls	r1, r2
 8002f8e:	000a      	movs	r2, r1
 8002f90:	43d2      	mvns	r2, r2
 8002f92:	401a      	ands	r2, r3
 8002f94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	019b      	lsls	r3, r3, #6
 8002f9a:	22ff      	movs	r2, #255	; 0xff
 8002f9c:	401a      	ands	r2, r3
 8002f9e:	1dfb      	adds	r3, r7, #7
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	4003      	ands	r3, r0
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fac:	4809      	ldr	r0, [pc, #36]	; (8002fd4 <__NVIC_SetPriority+0xd8>)
 8002fae:	1dfb      	adds	r3, r7, #7
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	001c      	movs	r4, r3
 8002fb4:	230f      	movs	r3, #15
 8002fb6:	4023      	ands	r3, r4
 8002fb8:	3b08      	subs	r3, #8
 8002fba:	089b      	lsrs	r3, r3, #2
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	3306      	adds	r3, #6
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	18c3      	adds	r3, r0, r3
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	601a      	str	r2, [r3, #0]
}
 8002fc8:	46c0      	nop			; (mov r8, r8)
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	b003      	add	sp, #12
 8002fce:	bd90      	pop	{r4, r7, pc}
 8002fd0:	e000e100 	.word	0xe000e100
 8002fd4:	e000ed00 	.word	0xe000ed00

08002fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	1e5a      	subs	r2, r3, #1
 8002fe4:	2380      	movs	r3, #128	; 0x80
 8002fe6:	045b      	lsls	r3, r3, #17
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d301      	bcc.n	8002ff0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fec:	2301      	movs	r3, #1
 8002fee:	e010      	b.n	8003012 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ff0:	4b0a      	ldr	r3, [pc, #40]	; (800301c <SysTick_Config+0x44>)
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	3a01      	subs	r2, #1
 8002ff6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	425b      	negs	r3, r3
 8002ffc:	2103      	movs	r1, #3
 8002ffe:	0018      	movs	r0, r3
 8003000:	f7ff ff7c 	bl	8002efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003004:	4b05      	ldr	r3, [pc, #20]	; (800301c <SysTick_Config+0x44>)
 8003006:	2200      	movs	r2, #0
 8003008:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800300a:	4b04      	ldr	r3, [pc, #16]	; (800301c <SysTick_Config+0x44>)
 800300c:	2207      	movs	r2, #7
 800300e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003010:	2300      	movs	r3, #0
}
 8003012:	0018      	movs	r0, r3
 8003014:	46bd      	mov	sp, r7
 8003016:	b002      	add	sp, #8
 8003018:	bd80      	pop	{r7, pc}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	e000e010 	.word	0xe000e010

08003020 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	60b9      	str	r1, [r7, #8]
 8003028:	607a      	str	r2, [r7, #4]
 800302a:	210f      	movs	r1, #15
 800302c:	187b      	adds	r3, r7, r1
 800302e:	1c02      	adds	r2, r0, #0
 8003030:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003032:	68ba      	ldr	r2, [r7, #8]
 8003034:	187b      	adds	r3, r7, r1
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	b25b      	sxtb	r3, r3
 800303a:	0011      	movs	r1, r2
 800303c:	0018      	movs	r0, r3
 800303e:	f7ff ff5d 	bl	8002efc <__NVIC_SetPriority>
}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	46bd      	mov	sp, r7
 8003046:	b004      	add	sp, #16
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b082      	sub	sp, #8
 800304e:	af00      	add	r7, sp, #0
 8003050:	0002      	movs	r2, r0
 8003052:	1dfb      	adds	r3, r7, #7
 8003054:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003056:	1dfb      	adds	r3, r7, #7
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	b25b      	sxtb	r3, r3
 800305c:	0018      	movs	r0, r3
 800305e:	f7ff ff33 	bl	8002ec8 <__NVIC_EnableIRQ>
}
 8003062:	46c0      	nop			; (mov r8, r8)
 8003064:	46bd      	mov	sp, r7
 8003066:	b002      	add	sp, #8
 8003068:	bd80      	pop	{r7, pc}

0800306a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800306a:	b580      	push	{r7, lr}
 800306c:	b082      	sub	sp, #8
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	0018      	movs	r0, r3
 8003076:	f7ff ffaf 	bl	8002fd8 <SysTick_Config>
 800307a:	0003      	movs	r3, r0
}
 800307c:	0018      	movs	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	b002      	add	sp, #8
 8003082:	bd80      	pop	{r7, pc}

08003084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b086      	sub	sp, #24
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003092:	e147      	b.n	8003324 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2101      	movs	r1, #1
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	4091      	lsls	r1, r2
 800309e:	000a      	movs	r2, r1
 80030a0:	4013      	ands	r3, r2
 80030a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d100      	bne.n	80030ac <HAL_GPIO_Init+0x28>
 80030aa:	e138      	b.n	800331e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2203      	movs	r2, #3
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d005      	beq.n	80030c4 <HAL_GPIO_Init+0x40>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2203      	movs	r2, #3
 80030be:	4013      	ands	r3, r2
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d130      	bne.n	8003126 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	2203      	movs	r2, #3
 80030d0:	409a      	lsls	r2, r3
 80030d2:	0013      	movs	r3, r2
 80030d4:	43da      	mvns	r2, r3
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4013      	ands	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	409a      	lsls	r2, r3
 80030e6:	0013      	movs	r3, r2
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030fa:	2201      	movs	r2, #1
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	409a      	lsls	r2, r3
 8003100:	0013      	movs	r3, r2
 8003102:	43da      	mvns	r2, r3
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	091b      	lsrs	r3, r3, #4
 8003110:	2201      	movs	r2, #1
 8003112:	401a      	ands	r2, r3
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	409a      	lsls	r2, r3
 8003118:	0013      	movs	r3, r2
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	4313      	orrs	r3, r2
 800311e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	2203      	movs	r2, #3
 800312c:	4013      	ands	r3, r2
 800312e:	2b03      	cmp	r3, #3
 8003130:	d017      	beq.n	8003162 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	2203      	movs	r2, #3
 800313e:	409a      	lsls	r2, r3
 8003140:	0013      	movs	r3, r2
 8003142:	43da      	mvns	r2, r3
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	409a      	lsls	r2, r3
 8003154:	0013      	movs	r3, r2
 8003156:	693a      	ldr	r2, [r7, #16]
 8003158:	4313      	orrs	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2203      	movs	r2, #3
 8003168:	4013      	ands	r3, r2
 800316a:	2b02      	cmp	r3, #2
 800316c:	d123      	bne.n	80031b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	08da      	lsrs	r2, r3, #3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	3208      	adds	r2, #8
 8003176:	0092      	lsls	r2, r2, #2
 8003178:	58d3      	ldr	r3, [r2, r3]
 800317a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2207      	movs	r2, #7
 8003180:	4013      	ands	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	220f      	movs	r2, #15
 8003186:	409a      	lsls	r2, r3
 8003188:	0013      	movs	r3, r2
 800318a:	43da      	mvns	r2, r3
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4013      	ands	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2107      	movs	r1, #7
 800319a:	400b      	ands	r3, r1
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	409a      	lsls	r2, r3
 80031a0:	0013      	movs	r3, r2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	08da      	lsrs	r2, r3, #3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3208      	adds	r2, #8
 80031b0:	0092      	lsls	r2, r2, #2
 80031b2:	6939      	ldr	r1, [r7, #16]
 80031b4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	2203      	movs	r2, #3
 80031c2:	409a      	lsls	r2, r3
 80031c4:	0013      	movs	r3, r2
 80031c6:	43da      	mvns	r2, r3
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4013      	ands	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2203      	movs	r2, #3
 80031d4:	401a      	ands	r2, r3
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	409a      	lsls	r2, r3
 80031dc:	0013      	movs	r3, r2
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	23c0      	movs	r3, #192	; 0xc0
 80031f0:	029b      	lsls	r3, r3, #10
 80031f2:	4013      	ands	r3, r2
 80031f4:	d100      	bne.n	80031f8 <HAL_GPIO_Init+0x174>
 80031f6:	e092      	b.n	800331e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80031f8:	4a50      	ldr	r2, [pc, #320]	; (800333c <HAL_GPIO_Init+0x2b8>)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	089b      	lsrs	r3, r3, #2
 80031fe:	3318      	adds	r3, #24
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	589b      	ldr	r3, [r3, r2]
 8003204:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	2203      	movs	r2, #3
 800320a:	4013      	ands	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	220f      	movs	r2, #15
 8003210:	409a      	lsls	r2, r3
 8003212:	0013      	movs	r3, r2
 8003214:	43da      	mvns	r2, r3
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	4013      	ands	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	23a0      	movs	r3, #160	; 0xa0
 8003220:	05db      	lsls	r3, r3, #23
 8003222:	429a      	cmp	r2, r3
 8003224:	d013      	beq.n	800324e <HAL_GPIO_Init+0x1ca>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a45      	ldr	r2, [pc, #276]	; (8003340 <HAL_GPIO_Init+0x2bc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00d      	beq.n	800324a <HAL_GPIO_Init+0x1c6>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a44      	ldr	r2, [pc, #272]	; (8003344 <HAL_GPIO_Init+0x2c0>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <HAL_GPIO_Init+0x1c2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a43      	ldr	r2, [pc, #268]	; (8003348 <HAL_GPIO_Init+0x2c4>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d101      	bne.n	8003242 <HAL_GPIO_Init+0x1be>
 800323e:	2303      	movs	r3, #3
 8003240:	e006      	b.n	8003250 <HAL_GPIO_Init+0x1cc>
 8003242:	2305      	movs	r3, #5
 8003244:	e004      	b.n	8003250 <HAL_GPIO_Init+0x1cc>
 8003246:	2302      	movs	r3, #2
 8003248:	e002      	b.n	8003250 <HAL_GPIO_Init+0x1cc>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <HAL_GPIO_Init+0x1cc>
 800324e:	2300      	movs	r3, #0
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	2103      	movs	r1, #3
 8003254:	400a      	ands	r2, r1
 8003256:	00d2      	lsls	r2, r2, #3
 8003258:	4093      	lsls	r3, r2
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	4313      	orrs	r3, r2
 800325e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003260:	4936      	ldr	r1, [pc, #216]	; (800333c <HAL_GPIO_Init+0x2b8>)
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	089b      	lsrs	r3, r3, #2
 8003266:	3318      	adds	r3, #24
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800326e:	4a33      	ldr	r2, [pc, #204]	; (800333c <HAL_GPIO_Init+0x2b8>)
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	58d3      	ldr	r3, [r2, r3]
 8003274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	43da      	mvns	r2, r3
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	2380      	movs	r3, #128	; 0x80
 8003286:	025b      	lsls	r3, r3, #9
 8003288:	4013      	ands	r3, r2
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003294:	4929      	ldr	r1, [pc, #164]	; (800333c <HAL_GPIO_Init+0x2b8>)
 8003296:	2280      	movs	r2, #128	; 0x80
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800329c:	4a27      	ldr	r2, [pc, #156]	; (800333c <HAL_GPIO_Init+0x2b8>)
 800329e:	2384      	movs	r3, #132	; 0x84
 80032a0:	58d3      	ldr	r3, [r2, r3]
 80032a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	43da      	mvns	r2, r3
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	029b      	lsls	r3, r3, #10
 80032b6:	4013      	ands	r3, r2
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032c2:	491e      	ldr	r1, [pc, #120]	; (800333c <HAL_GPIO_Init+0x2b8>)
 80032c4:	2284      	movs	r2, #132	; 0x84
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032ca:	4b1c      	ldr	r3, [pc, #112]	; (800333c <HAL_GPIO_Init+0x2b8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	43da      	mvns	r2, r3
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	4013      	ands	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	2380      	movs	r3, #128	; 0x80
 80032e0:	035b      	lsls	r3, r3, #13
 80032e2:	4013      	ands	r3, r2
 80032e4:	d003      	beq.n	80032ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4313      	orrs	r3, r2
 80032ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032ee:	4b13      	ldr	r3, [pc, #76]	; (800333c <HAL_GPIO_Init+0x2b8>)
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80032f4:	4b11      	ldr	r3, [pc, #68]	; (800333c <HAL_GPIO_Init+0x2b8>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	43da      	mvns	r2, r3
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	2380      	movs	r3, #128	; 0x80
 800330a:	039b      	lsls	r3, r3, #14
 800330c:	4013      	ands	r3, r2
 800330e:	d003      	beq.n	8003318 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003318:	4b08      	ldr	r3, [pc, #32]	; (800333c <HAL_GPIO_Init+0x2b8>)
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	3301      	adds	r3, #1
 8003322:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	40da      	lsrs	r2, r3
 800332c:	1e13      	subs	r3, r2, #0
 800332e:	d000      	beq.n	8003332 <HAL_GPIO_Init+0x2ae>
 8003330:	e6b0      	b.n	8003094 <HAL_GPIO_Init+0x10>
  }
}
 8003332:	46c0      	nop			; (mov r8, r8)
 8003334:	46c0      	nop			; (mov r8, r8)
 8003336:	46bd      	mov	sp, r7
 8003338:	b006      	add	sp, #24
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40021800 	.word	0x40021800
 8003340:	50000400 	.word	0x50000400
 8003344:	50000800 	.word	0x50000800
 8003348:	50000c00 	.word	0x50000c00

0800334c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	0008      	movs	r0, r1
 8003356:	0011      	movs	r1, r2
 8003358:	1cbb      	adds	r3, r7, #2
 800335a:	1c02      	adds	r2, r0, #0
 800335c:	801a      	strh	r2, [r3, #0]
 800335e:	1c7b      	adds	r3, r7, #1
 8003360:	1c0a      	adds	r2, r1, #0
 8003362:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003364:	1c7b      	adds	r3, r7, #1
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d004      	beq.n	8003376 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800336c:	1cbb      	adds	r3, r7, #2
 800336e:	881a      	ldrh	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003374:	e003      	b.n	800337e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003376:	1cbb      	adds	r3, r7, #2
 8003378:	881a      	ldrh	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800337e:	46c0      	nop			; (mov r8, r8)
 8003380:	46bd      	mov	sp, r7
 8003382:	b002      	add	sp, #8
 8003384:	bd80      	pop	{r7, pc}
	...

08003388 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	0002      	movs	r2, r0
 8003390:	1dbb      	adds	r3, r7, #6
 8003392:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003394:	4b10      	ldr	r3, [pc, #64]	; (80033d8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	1dba      	adds	r2, r7, #6
 800339a:	8812      	ldrh	r2, [r2, #0]
 800339c:	4013      	ands	r3, r2
 800339e:	d008      	beq.n	80033b2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80033a0:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80033a2:	1dba      	adds	r2, r7, #6
 80033a4:	8812      	ldrh	r2, [r2, #0]
 80033a6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80033a8:	1dbb      	adds	r3, r7, #6
 80033aa:	881b      	ldrh	r3, [r3, #0]
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7ff f949 	bl	8002644 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80033b2:	4b09      	ldr	r3, [pc, #36]	; (80033d8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	1dba      	adds	r2, r7, #6
 80033b8:	8812      	ldrh	r2, [r2, #0]
 80033ba:	4013      	ands	r3, r2
 80033bc:	d008      	beq.n	80033d0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80033c0:	1dba      	adds	r2, r7, #6
 80033c2:	8812      	ldrh	r2, [r2, #0]
 80033c4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80033c6:	1dbb      	adds	r3, r7, #6
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	0018      	movs	r0, r3
 80033cc:	f7ff f94e 	bl	800266c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80033d0:	46c0      	nop			; (mov r8, r8)
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b002      	add	sp, #8
 80033d6:	bd80      	pop	{r7, pc}
 80033d8:	40021800 	.word	0x40021800

080033dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80033e4:	4b19      	ldr	r3, [pc, #100]	; (800344c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a19      	ldr	r2, [pc, #100]	; (8003450 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80033ea:	4013      	ands	r3, r2
 80033ec:	0019      	movs	r1, r3
 80033ee:	4b17      	ldr	r3, [pc, #92]	; (800344c <HAL_PWREx_ControlVoltageScaling+0x70>)
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	2380      	movs	r3, #128	; 0x80
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d11f      	bne.n	8003440 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003400:	4b14      	ldr	r3, [pc, #80]	; (8003454 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	0013      	movs	r3, r2
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	189b      	adds	r3, r3, r2
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	4912      	ldr	r1, [pc, #72]	; (8003458 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800340e:	0018      	movs	r0, r3
 8003410:	f7fc fe94 	bl	800013c <__udivsi3>
 8003414:	0003      	movs	r3, r0
 8003416:	3301      	adds	r3, #1
 8003418:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800341a:	e008      	b.n	800342e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	3b01      	subs	r3, #1
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e001      	b.n	800342e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e009      	b.n	8003442 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800342e:	4b07      	ldr	r3, [pc, #28]	; (800344c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003430:	695a      	ldr	r2, [r3, #20]
 8003432:	2380      	movs	r3, #128	; 0x80
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	401a      	ands	r2, r3
 8003438:	2380      	movs	r3, #128	; 0x80
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	429a      	cmp	r2, r3
 800343e:	d0ed      	beq.n	800341c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	0018      	movs	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	b004      	add	sp, #16
 8003448:	bd80      	pop	{r7, pc}
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	40007000 	.word	0x40007000
 8003450:	fffff9ff 	.word	0xfffff9ff
 8003454:	20000000 	.word	0x20000000
 8003458:	000f4240 	.word	0x000f4240

0800345c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003460:	4b03      	ldr	r3, [pc, #12]	; (8003470 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	23e0      	movs	r3, #224	; 0xe0
 8003466:	01db      	lsls	r3, r3, #7
 8003468:	4013      	ands	r3, r2
}
 800346a:	0018      	movs	r0, r3
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40021000 	.word	0x40021000

08003474 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b088      	sub	sp, #32
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e304      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2201      	movs	r2, #1
 800348c:	4013      	ands	r3, r2
 800348e:	d100      	bne.n	8003492 <HAL_RCC_OscConfig+0x1e>
 8003490:	e07c      	b.n	800358c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003492:	4bc3      	ldr	r3, [pc, #780]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2238      	movs	r2, #56	; 0x38
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800349c:	4bc0      	ldr	r3, [pc, #768]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2203      	movs	r2, #3
 80034a2:	4013      	ands	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	2b10      	cmp	r3, #16
 80034aa:	d102      	bne.n	80034b2 <HAL_RCC_OscConfig+0x3e>
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d002      	beq.n	80034b8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d10b      	bne.n	80034d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b8:	4bb9      	ldr	r3, [pc, #740]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	2380      	movs	r3, #128	; 0x80
 80034be:	029b      	lsls	r3, r3, #10
 80034c0:	4013      	ands	r3, r2
 80034c2:	d062      	beq.n	800358a <HAL_RCC_OscConfig+0x116>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d15e      	bne.n	800358a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e2df      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685a      	ldr	r2, [r3, #4]
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	025b      	lsls	r3, r3, #9
 80034d8:	429a      	cmp	r2, r3
 80034da:	d107      	bne.n	80034ec <HAL_RCC_OscConfig+0x78>
 80034dc:	4bb0      	ldr	r3, [pc, #704]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	4baf      	ldr	r3, [pc, #700]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 80034e2:	2180      	movs	r1, #128	; 0x80
 80034e4:	0249      	lsls	r1, r1, #9
 80034e6:	430a      	orrs	r2, r1
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e020      	b.n	800352e <HAL_RCC_OscConfig+0xba>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	23a0      	movs	r3, #160	; 0xa0
 80034f2:	02db      	lsls	r3, r3, #11
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d10e      	bne.n	8003516 <HAL_RCC_OscConfig+0xa2>
 80034f8:	4ba9      	ldr	r3, [pc, #676]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	4ba8      	ldr	r3, [pc, #672]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 80034fe:	2180      	movs	r1, #128	; 0x80
 8003500:	02c9      	lsls	r1, r1, #11
 8003502:	430a      	orrs	r2, r1
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	4ba6      	ldr	r3, [pc, #664]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	4ba5      	ldr	r3, [pc, #660]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 800350c:	2180      	movs	r1, #128	; 0x80
 800350e:	0249      	lsls	r1, r1, #9
 8003510:	430a      	orrs	r2, r1
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	e00b      	b.n	800352e <HAL_RCC_OscConfig+0xba>
 8003516:	4ba2      	ldr	r3, [pc, #648]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4ba1      	ldr	r3, [pc, #644]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 800351c:	49a1      	ldr	r1, [pc, #644]	; (80037a4 <HAL_RCC_OscConfig+0x330>)
 800351e:	400a      	ands	r2, r1
 8003520:	601a      	str	r2, [r3, #0]
 8003522:	4b9f      	ldr	r3, [pc, #636]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	4b9e      	ldr	r3, [pc, #632]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 8003528:	499f      	ldr	r1, [pc, #636]	; (80037a8 <HAL_RCC_OscConfig+0x334>)
 800352a:	400a      	ands	r2, r1
 800352c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d014      	beq.n	8003560 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003536:	f7ff fc99 	bl	8002e6c <HAL_GetTick>
 800353a:	0003      	movs	r3, r0
 800353c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800353e:	e008      	b.n	8003552 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003540:	f7ff fc94 	bl	8002e6c <HAL_GetTick>
 8003544:	0002      	movs	r2, r0
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b64      	cmp	r3, #100	; 0x64
 800354c:	d901      	bls.n	8003552 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e29e      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003552:	4b93      	ldr	r3, [pc, #588]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	2380      	movs	r3, #128	; 0x80
 8003558:	029b      	lsls	r3, r3, #10
 800355a:	4013      	ands	r3, r2
 800355c:	d0f0      	beq.n	8003540 <HAL_RCC_OscConfig+0xcc>
 800355e:	e015      	b.n	800358c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003560:	f7ff fc84 	bl	8002e6c <HAL_GetTick>
 8003564:	0003      	movs	r3, r0
 8003566:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800356a:	f7ff fc7f 	bl	8002e6c <HAL_GetTick>
 800356e:	0002      	movs	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b64      	cmp	r3, #100	; 0x64
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e289      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800357c:	4b88      	ldr	r3, [pc, #544]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	2380      	movs	r3, #128	; 0x80
 8003582:	029b      	lsls	r3, r3, #10
 8003584:	4013      	ands	r3, r2
 8003586:	d1f0      	bne.n	800356a <HAL_RCC_OscConfig+0xf6>
 8003588:	e000      	b.n	800358c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800358a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2202      	movs	r2, #2
 8003592:	4013      	ands	r3, r2
 8003594:	d100      	bne.n	8003598 <HAL_RCC_OscConfig+0x124>
 8003596:	e099      	b.n	80036cc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003598:	4b81      	ldr	r3, [pc, #516]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2238      	movs	r2, #56	; 0x38
 800359e:	4013      	ands	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035a2:	4b7f      	ldr	r3, [pc, #508]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	2203      	movs	r2, #3
 80035a8:	4013      	ands	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	2b10      	cmp	r3, #16
 80035b0:	d102      	bne.n	80035b8 <HAL_RCC_OscConfig+0x144>
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d002      	beq.n	80035be <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d135      	bne.n	800362a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035be:	4b78      	ldr	r3, [pc, #480]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	2380      	movs	r3, #128	; 0x80
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4013      	ands	r3, r2
 80035c8:	d005      	beq.n	80035d6 <HAL_RCC_OscConfig+0x162>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e25c      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d6:	4b72      	ldr	r3, [pc, #456]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4a74      	ldr	r2, [pc, #464]	; (80037ac <HAL_RCC_OscConfig+0x338>)
 80035dc:	4013      	ands	r3, r2
 80035de:	0019      	movs	r1, r3
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	021a      	lsls	r2, r3, #8
 80035e6:	4b6e      	ldr	r3, [pc, #440]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 80035e8:	430a      	orrs	r2, r1
 80035ea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d112      	bne.n	8003618 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80035f2:	4b6b      	ldr	r3, [pc, #428]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a6e      	ldr	r2, [pc, #440]	; (80037b0 <HAL_RCC_OscConfig+0x33c>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	0019      	movs	r1, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	691a      	ldr	r2, [r3, #16]
 8003600:	4b67      	ldr	r3, [pc, #412]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 8003602:	430a      	orrs	r2, r1
 8003604:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003606:	4b66      	ldr	r3, [pc, #408]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	0adb      	lsrs	r3, r3, #11
 800360c:	2207      	movs	r2, #7
 800360e:	4013      	ands	r3, r2
 8003610:	4a68      	ldr	r2, [pc, #416]	; (80037b4 <HAL_RCC_OscConfig+0x340>)
 8003612:	40da      	lsrs	r2, r3
 8003614:	4b68      	ldr	r3, [pc, #416]	; (80037b8 <HAL_RCC_OscConfig+0x344>)
 8003616:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003618:	4b68      	ldr	r3, [pc, #416]	; (80037bc <HAL_RCC_OscConfig+0x348>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	0018      	movs	r0, r3
 800361e:	f7ff fbc9 	bl	8002db4 <HAL_InitTick>
 8003622:	1e03      	subs	r3, r0, #0
 8003624:	d051      	beq.n	80036ca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e232      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d030      	beq.n	8003694 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003632:	4b5b      	ldr	r3, [pc, #364]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a5e      	ldr	r2, [pc, #376]	; (80037b0 <HAL_RCC_OscConfig+0x33c>)
 8003638:	4013      	ands	r3, r2
 800363a:	0019      	movs	r1, r3
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691a      	ldr	r2, [r3, #16]
 8003640:	4b57      	ldr	r3, [pc, #348]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 8003642:	430a      	orrs	r2, r1
 8003644:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003646:	4b56      	ldr	r3, [pc, #344]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b55      	ldr	r3, [pc, #340]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 800364c:	2180      	movs	r1, #128	; 0x80
 800364e:	0049      	lsls	r1, r1, #1
 8003650:	430a      	orrs	r2, r1
 8003652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003654:	f7ff fc0a 	bl	8002e6c <HAL_GetTick>
 8003658:	0003      	movs	r3, r0
 800365a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365e:	f7ff fc05 	bl	8002e6c <HAL_GetTick>
 8003662:	0002      	movs	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e20f      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003670:	4b4b      	ldr	r3, [pc, #300]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	4013      	ands	r3, r2
 800367a:	d0f0      	beq.n	800365e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367c:	4b48      	ldr	r3, [pc, #288]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	4a4a      	ldr	r2, [pc, #296]	; (80037ac <HAL_RCC_OscConfig+0x338>)
 8003682:	4013      	ands	r3, r2
 8003684:	0019      	movs	r1, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	021a      	lsls	r2, r3, #8
 800368c:	4b44      	ldr	r3, [pc, #272]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	e01b      	b.n	80036cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003694:	4b42      	ldr	r3, [pc, #264]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4b41      	ldr	r3, [pc, #260]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 800369a:	4949      	ldr	r1, [pc, #292]	; (80037c0 <HAL_RCC_OscConfig+0x34c>)
 800369c:	400a      	ands	r2, r1
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7ff fbe4 	bl	8002e6c <HAL_GetTick>
 80036a4:	0003      	movs	r3, r0
 80036a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036aa:	f7ff fbdf 	bl	8002e6c <HAL_GetTick>
 80036ae:	0002      	movs	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e1e9      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036bc:	4b38      	ldr	r3, [pc, #224]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4013      	ands	r3, r2
 80036c6:	d1f0      	bne.n	80036aa <HAL_RCC_OscConfig+0x236>
 80036c8:	e000      	b.n	80036cc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2208      	movs	r2, #8
 80036d2:	4013      	ands	r3, r2
 80036d4:	d047      	beq.n	8003766 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80036d6:	4b32      	ldr	r3, [pc, #200]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	2238      	movs	r2, #56	; 0x38
 80036dc:	4013      	ands	r3, r2
 80036de:	2b18      	cmp	r3, #24
 80036e0:	d10a      	bne.n	80036f8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80036e2:	4b2f      	ldr	r3, [pc, #188]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 80036e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e6:	2202      	movs	r2, #2
 80036e8:	4013      	ands	r3, r2
 80036ea:	d03c      	beq.n	8003766 <HAL_RCC_OscConfig+0x2f2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d138      	bne.n	8003766 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e1cb      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d019      	beq.n	8003734 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003700:	4b27      	ldr	r3, [pc, #156]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 8003702:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003704:	4b26      	ldr	r3, [pc, #152]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 8003706:	2101      	movs	r1, #1
 8003708:	430a      	orrs	r2, r1
 800370a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370c:	f7ff fbae 	bl	8002e6c <HAL_GetTick>
 8003710:	0003      	movs	r3, r0
 8003712:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003716:	f7ff fba9 	bl	8002e6c <HAL_GetTick>
 800371a:	0002      	movs	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e1b3      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 800372a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800372c:	2202      	movs	r2, #2
 800372e:	4013      	ands	r3, r2
 8003730:	d0f1      	beq.n	8003716 <HAL_RCC_OscConfig+0x2a2>
 8003732:	e018      	b.n	8003766 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003734:	4b1a      	ldr	r3, [pc, #104]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 8003736:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003738:	4b19      	ldr	r3, [pc, #100]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 800373a:	2101      	movs	r1, #1
 800373c:	438a      	bics	r2, r1
 800373e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7ff fb94 	bl	8002e6c <HAL_GetTick>
 8003744:	0003      	movs	r3, r0
 8003746:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800374a:	f7ff fb8f 	bl	8002e6c <HAL_GetTick>
 800374e:	0002      	movs	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e199      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800375c:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 800375e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003760:	2202      	movs	r2, #2
 8003762:	4013      	ands	r3, r2
 8003764:	d1f1      	bne.n	800374a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2204      	movs	r2, #4
 800376c:	4013      	ands	r3, r2
 800376e:	d100      	bne.n	8003772 <HAL_RCC_OscConfig+0x2fe>
 8003770:	e0c6      	b.n	8003900 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003772:	231f      	movs	r3, #31
 8003774:	18fb      	adds	r3, r7, r3
 8003776:	2200      	movs	r2, #0
 8003778:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800377a:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2238      	movs	r2, #56	; 0x38
 8003780:	4013      	ands	r3, r2
 8003782:	2b20      	cmp	r3, #32
 8003784:	d11e      	bne.n	80037c4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003786:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <HAL_RCC_OscConfig+0x32c>)
 8003788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800378a:	2202      	movs	r2, #2
 800378c:	4013      	ands	r3, r2
 800378e:	d100      	bne.n	8003792 <HAL_RCC_OscConfig+0x31e>
 8003790:	e0b6      	b.n	8003900 <HAL_RCC_OscConfig+0x48c>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d000      	beq.n	800379c <HAL_RCC_OscConfig+0x328>
 800379a:	e0b1      	b.n	8003900 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e177      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>
 80037a0:	40021000 	.word	0x40021000
 80037a4:	fffeffff 	.word	0xfffeffff
 80037a8:	fffbffff 	.word	0xfffbffff
 80037ac:	ffff80ff 	.word	0xffff80ff
 80037b0:	ffffc7ff 	.word	0xffffc7ff
 80037b4:	00f42400 	.word	0x00f42400
 80037b8:	20000000 	.word	0x20000000
 80037bc:	20000004 	.word	0x20000004
 80037c0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80037c4:	4bb4      	ldr	r3, [pc, #720]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 80037c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037c8:	2380      	movs	r3, #128	; 0x80
 80037ca:	055b      	lsls	r3, r3, #21
 80037cc:	4013      	ands	r3, r2
 80037ce:	d101      	bne.n	80037d4 <HAL_RCC_OscConfig+0x360>
 80037d0:	2301      	movs	r3, #1
 80037d2:	e000      	b.n	80037d6 <HAL_RCC_OscConfig+0x362>
 80037d4:	2300      	movs	r3, #0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d011      	beq.n	80037fe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80037da:	4baf      	ldr	r3, [pc, #700]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 80037dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037de:	4bae      	ldr	r3, [pc, #696]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 80037e0:	2180      	movs	r1, #128	; 0x80
 80037e2:	0549      	lsls	r1, r1, #21
 80037e4:	430a      	orrs	r2, r1
 80037e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80037e8:	4bab      	ldr	r3, [pc, #684]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 80037ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037ec:	2380      	movs	r3, #128	; 0x80
 80037ee:	055b      	lsls	r3, r3, #21
 80037f0:	4013      	ands	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80037f6:	231f      	movs	r3, #31
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	2201      	movs	r2, #1
 80037fc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037fe:	4ba7      	ldr	r3, [pc, #668]	; (8003a9c <HAL_RCC_OscConfig+0x628>)
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4013      	ands	r3, r2
 8003808:	d11a      	bne.n	8003840 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800380a:	4ba4      	ldr	r3, [pc, #656]	; (8003a9c <HAL_RCC_OscConfig+0x628>)
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	4ba3      	ldr	r3, [pc, #652]	; (8003a9c <HAL_RCC_OscConfig+0x628>)
 8003810:	2180      	movs	r1, #128	; 0x80
 8003812:	0049      	lsls	r1, r1, #1
 8003814:	430a      	orrs	r2, r1
 8003816:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003818:	f7ff fb28 	bl	8002e6c <HAL_GetTick>
 800381c:	0003      	movs	r3, r0
 800381e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003822:	f7ff fb23 	bl	8002e6c <HAL_GetTick>
 8003826:	0002      	movs	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e12d      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003834:	4b99      	ldr	r3, [pc, #612]	; (8003a9c <HAL_RCC_OscConfig+0x628>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	2380      	movs	r3, #128	; 0x80
 800383a:	005b      	lsls	r3, r3, #1
 800383c:	4013      	ands	r3, r2
 800383e:	d0f0      	beq.n	8003822 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d106      	bne.n	8003856 <HAL_RCC_OscConfig+0x3e2>
 8003848:	4b93      	ldr	r3, [pc, #588]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 800384a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800384c:	4b92      	ldr	r3, [pc, #584]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 800384e:	2101      	movs	r1, #1
 8003850:	430a      	orrs	r2, r1
 8003852:	65da      	str	r2, [r3, #92]	; 0x5c
 8003854:	e01c      	b.n	8003890 <HAL_RCC_OscConfig+0x41c>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b05      	cmp	r3, #5
 800385c:	d10c      	bne.n	8003878 <HAL_RCC_OscConfig+0x404>
 800385e:	4b8e      	ldr	r3, [pc, #568]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 8003860:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003862:	4b8d      	ldr	r3, [pc, #564]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 8003864:	2104      	movs	r1, #4
 8003866:	430a      	orrs	r2, r1
 8003868:	65da      	str	r2, [r3, #92]	; 0x5c
 800386a:	4b8b      	ldr	r3, [pc, #556]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 800386c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800386e:	4b8a      	ldr	r3, [pc, #552]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 8003870:	2101      	movs	r1, #1
 8003872:	430a      	orrs	r2, r1
 8003874:	65da      	str	r2, [r3, #92]	; 0x5c
 8003876:	e00b      	b.n	8003890 <HAL_RCC_OscConfig+0x41c>
 8003878:	4b87      	ldr	r3, [pc, #540]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 800387a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800387c:	4b86      	ldr	r3, [pc, #536]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 800387e:	2101      	movs	r1, #1
 8003880:	438a      	bics	r2, r1
 8003882:	65da      	str	r2, [r3, #92]	; 0x5c
 8003884:	4b84      	ldr	r3, [pc, #528]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 8003886:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003888:	4b83      	ldr	r3, [pc, #524]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 800388a:	2104      	movs	r1, #4
 800388c:	438a      	bics	r2, r1
 800388e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d014      	beq.n	80038c2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003898:	f7ff fae8 	bl	8002e6c <HAL_GetTick>
 800389c:	0003      	movs	r3, r0
 800389e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038a0:	e009      	b.n	80038b6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a2:	f7ff fae3 	bl	8002e6c <HAL_GetTick>
 80038a6:	0002      	movs	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	4a7c      	ldr	r2, [pc, #496]	; (8003aa0 <HAL_RCC_OscConfig+0x62c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e0ec      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80038b6:	4b78      	ldr	r3, [pc, #480]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 80038b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ba:	2202      	movs	r2, #2
 80038bc:	4013      	ands	r3, r2
 80038be:	d0f0      	beq.n	80038a2 <HAL_RCC_OscConfig+0x42e>
 80038c0:	e013      	b.n	80038ea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c2:	f7ff fad3 	bl	8002e6c <HAL_GetTick>
 80038c6:	0003      	movs	r3, r0
 80038c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038ca:	e009      	b.n	80038e0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038cc:	f7ff face 	bl	8002e6c <HAL_GetTick>
 80038d0:	0002      	movs	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	4a72      	ldr	r2, [pc, #456]	; (8003aa0 <HAL_RCC_OscConfig+0x62c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e0d7      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038e0:	4b6d      	ldr	r3, [pc, #436]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 80038e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e4:	2202      	movs	r2, #2
 80038e6:	4013      	ands	r3, r2
 80038e8:	d1f0      	bne.n	80038cc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80038ea:	231f      	movs	r3, #31
 80038ec:	18fb      	adds	r3, r7, r3
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d105      	bne.n	8003900 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80038f4:	4b68      	ldr	r3, [pc, #416]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 80038f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80038f8:	4b67      	ldr	r3, [pc, #412]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 80038fa:	496a      	ldr	r1, [pc, #424]	; (8003aa4 <HAL_RCC_OscConfig+0x630>)
 80038fc:	400a      	ands	r2, r1
 80038fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	69db      	ldr	r3, [r3, #28]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d100      	bne.n	800390a <HAL_RCC_OscConfig+0x496>
 8003908:	e0c1      	b.n	8003a8e <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800390a:	4b63      	ldr	r3, [pc, #396]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2238      	movs	r2, #56	; 0x38
 8003910:	4013      	ands	r3, r2
 8003912:	2b10      	cmp	r3, #16
 8003914:	d100      	bne.n	8003918 <HAL_RCC_OscConfig+0x4a4>
 8003916:	e081      	b.n	8003a1c <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d156      	bne.n	80039ce <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003920:	4b5d      	ldr	r3, [pc, #372]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4b5c      	ldr	r3, [pc, #368]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 8003926:	4960      	ldr	r1, [pc, #384]	; (8003aa8 <HAL_RCC_OscConfig+0x634>)
 8003928:	400a      	ands	r2, r1
 800392a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800392c:	f7ff fa9e 	bl	8002e6c <HAL_GetTick>
 8003930:	0003      	movs	r3, r0
 8003932:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003936:	f7ff fa99 	bl	8002e6c <HAL_GetTick>
 800393a:	0002      	movs	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e0a3      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003948:	4b53      	ldr	r3, [pc, #332]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	2380      	movs	r3, #128	; 0x80
 800394e:	049b      	lsls	r3, r3, #18
 8003950:	4013      	ands	r3, r2
 8003952:	d1f0      	bne.n	8003936 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003954:	4b50      	ldr	r3, [pc, #320]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4a54      	ldr	r2, [pc, #336]	; (8003aac <HAL_RCC_OscConfig+0x638>)
 800395a:	4013      	ands	r3, r2
 800395c:	0019      	movs	r1, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1a      	ldr	r2, [r3, #32]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396c:	021b      	lsls	r3, r3, #8
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003974:	431a      	orrs	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	431a      	orrs	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003980:	431a      	orrs	r2, r3
 8003982:	4b45      	ldr	r3, [pc, #276]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 8003984:	430a      	orrs	r2, r1
 8003986:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003988:	4b43      	ldr	r3, [pc, #268]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	4b42      	ldr	r3, [pc, #264]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 800398e:	2180      	movs	r1, #128	; 0x80
 8003990:	0449      	lsls	r1, r1, #17
 8003992:	430a      	orrs	r2, r1
 8003994:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003996:	4b40      	ldr	r3, [pc, #256]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 8003998:	68da      	ldr	r2, [r3, #12]
 800399a:	4b3f      	ldr	r3, [pc, #252]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 800399c:	2180      	movs	r1, #128	; 0x80
 800399e:	0549      	lsls	r1, r1, #21
 80039a0:	430a      	orrs	r2, r1
 80039a2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a4:	f7ff fa62 	bl	8002e6c <HAL_GetTick>
 80039a8:	0003      	movs	r3, r0
 80039aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ae:	f7ff fa5d 	bl	8002e6c <HAL_GetTick>
 80039b2:	0002      	movs	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e067      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c0:	4b35      	ldr	r3, [pc, #212]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	049b      	lsls	r3, r3, #18
 80039c8:	4013      	ands	r3, r2
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCC_OscConfig+0x53a>
 80039cc:	e05f      	b.n	8003a8e <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ce:	4b32      	ldr	r3, [pc, #200]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4b31      	ldr	r3, [pc, #196]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 80039d4:	4934      	ldr	r1, [pc, #208]	; (8003aa8 <HAL_RCC_OscConfig+0x634>)
 80039d6:	400a      	ands	r2, r1
 80039d8:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80039da:	4b2f      	ldr	r3, [pc, #188]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	4b2e      	ldr	r3, [pc, #184]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 80039e0:	2103      	movs	r1, #3
 80039e2:	438a      	bics	r2, r1
 80039e4:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80039e6:	4b2c      	ldr	r3, [pc, #176]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 80039e8:	68da      	ldr	r2, [r3, #12]
 80039ea:	4b2b      	ldr	r3, [pc, #172]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 80039ec:	4930      	ldr	r1, [pc, #192]	; (8003ab0 <HAL_RCC_OscConfig+0x63c>)
 80039ee:	400a      	ands	r2, r1
 80039f0:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f2:	f7ff fa3b 	bl	8002e6c <HAL_GetTick>
 80039f6:	0003      	movs	r3, r0
 80039f8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039fc:	f7ff fa36 	bl	8002e6c <HAL_GetTick>
 8003a00:	0002      	movs	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e040      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a0e:	4b22      	ldr	r3, [pc, #136]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	2380      	movs	r3, #128	; 0x80
 8003a14:	049b      	lsls	r3, r3, #18
 8003a16:	4013      	ands	r3, r2
 8003a18:	d1f0      	bne.n	80039fc <HAL_RCC_OscConfig+0x588>
 8003a1a:	e038      	b.n	8003a8e <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e033      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003a28:	4b1b      	ldr	r3, [pc, #108]	; (8003a98 <HAL_RCC_OscConfig+0x624>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2203      	movs	r2, #3
 8003a32:	401a      	ands	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d126      	bne.n	8003a8a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	2270      	movs	r2, #112	; 0x70
 8003a40:	401a      	ands	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d11f      	bne.n	8003a8a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	23fe      	movs	r3, #254	; 0xfe
 8003a4e:	01db      	lsls	r3, r3, #7
 8003a50:	401a      	ands	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a56:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d116      	bne.n	8003a8a <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a5c:	697a      	ldr	r2, [r7, #20]
 8003a5e:	23f8      	movs	r3, #248	; 0xf8
 8003a60:	039b      	lsls	r3, r3, #14
 8003a62:	401a      	ands	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d10e      	bne.n	8003a8a <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	23e0      	movs	r3, #224	; 0xe0
 8003a70:	051b      	lsls	r3, r3, #20
 8003a72:	401a      	ands	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d106      	bne.n	8003a8a <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	0f5b      	lsrs	r3, r3, #29
 8003a80:	075a      	lsls	r2, r3, #29
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003a86:	429a      	cmp	r2, r3
 8003a88:	d001      	beq.n	8003a8e <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e000      	b.n	8003a90 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b008      	add	sp, #32
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	40007000 	.word	0x40007000
 8003aa0:	00001388 	.word	0x00001388
 8003aa4:	efffffff 	.word	0xefffffff
 8003aa8:	feffffff 	.word	0xfeffffff
 8003aac:	11c1808c 	.word	0x11c1808c
 8003ab0:	eefeffff 	.word	0xeefeffff

08003ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0e9      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b76      	ldr	r3, [pc, #472]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2207      	movs	r2, #7
 8003ace:	4013      	ands	r3, r2
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d91e      	bls.n	8003b14 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b73      	ldr	r3, [pc, #460]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2207      	movs	r2, #7
 8003adc:	4393      	bics	r3, r2
 8003ade:	0019      	movs	r1, r3
 8003ae0:	4b70      	ldr	r3, [pc, #448]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ae8:	f7ff f9c0 	bl	8002e6c <HAL_GetTick>
 8003aec:	0003      	movs	r3, r0
 8003aee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003af0:	e009      	b.n	8003b06 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af2:	f7ff f9bb 	bl	8002e6c <HAL_GetTick>
 8003af6:	0002      	movs	r2, r0
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	4a6a      	ldr	r2, [pc, #424]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f4>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e0ca      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003b06:	4b67      	ldr	r3, [pc, #412]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2207      	movs	r2, #7
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d1ee      	bne.n	8003af2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2202      	movs	r2, #2
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d015      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2204      	movs	r2, #4
 8003b24:	4013      	ands	r3, r2
 8003b26:	d006      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003b28:	4b60      	ldr	r3, [pc, #384]	; (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	4b5f      	ldr	r3, [pc, #380]	; (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003b2e:	21e0      	movs	r1, #224	; 0xe0
 8003b30:	01c9      	lsls	r1, r1, #7
 8003b32:	430a      	orrs	r2, r1
 8003b34:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b36:	4b5d      	ldr	r3, [pc, #372]	; (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	4a5d      	ldr	r2, [pc, #372]	; (8003cb0 <HAL_RCC_ClockConfig+0x1fc>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	0019      	movs	r1, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	4b59      	ldr	r3, [pc, #356]	; (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003b46:	430a      	orrs	r2, r1
 8003b48:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	4013      	ands	r3, r2
 8003b52:	d057      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d107      	bne.n	8003b6c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b5c:	4b53      	ldr	r3, [pc, #332]	; (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	029b      	lsls	r3, r3, #10
 8003b64:	4013      	ands	r3, r2
 8003b66:	d12b      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e097      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d107      	bne.n	8003b84 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b74:	4b4d      	ldr	r3, [pc, #308]	; (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	2380      	movs	r3, #128	; 0x80
 8003b7a:	049b      	lsls	r3, r3, #18
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d11f      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e08b      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d107      	bne.n	8003b9c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b8c:	4b47      	ldr	r3, [pc, #284]	; (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4013      	ands	r3, r2
 8003b96:	d113      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e07f      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d106      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ba4:	4b41      	ldr	r3, [pc, #260]	; (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ba8:	2202      	movs	r2, #2
 8003baa:	4013      	ands	r3, r2
 8003bac:	d108      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e074      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bb2:	4b3e      	ldr	r3, [pc, #248]	; (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	4013      	ands	r3, r2
 8003bba:	d101      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e06d      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003bc0:	4b3a      	ldr	r3, [pc, #232]	; (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2207      	movs	r2, #7
 8003bc6:	4393      	bics	r3, r2
 8003bc8:	0019      	movs	r1, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	4b37      	ldr	r3, [pc, #220]	; (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd4:	f7ff f94a 	bl	8002e6c <HAL_GetTick>
 8003bd8:	0003      	movs	r3, r0
 8003bda:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bdc:	e009      	b.n	8003bf2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bde:	f7ff f945 	bl	8002e6c <HAL_GetTick>
 8003be2:	0002      	movs	r2, r0
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	4a2f      	ldr	r2, [pc, #188]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f4>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e054      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bf2:	4b2e      	ldr	r3, [pc, #184]	; (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2238      	movs	r2, #56	; 0x38
 8003bf8:	401a      	ands	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d1ec      	bne.n	8003bde <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c04:	4b27      	ldr	r3, [pc, #156]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2207      	movs	r2, #7
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d21e      	bcs.n	8003c50 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c12:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2207      	movs	r2, #7
 8003c18:	4393      	bics	r3, r2
 8003c1a:	0019      	movs	r1, r3
 8003c1c:	4b21      	ldr	r3, [pc, #132]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c24:	f7ff f922 	bl	8002e6c <HAL_GetTick>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c2c:	e009      	b.n	8003c42 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c2e:	f7ff f91d 	bl	8002e6c <HAL_GetTick>
 8003c32:	0002      	movs	r2, r0
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	4a1b      	ldr	r2, [pc, #108]	; (8003ca8 <HAL_RCC_ClockConfig+0x1f4>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e02c      	b.n	8003c9c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003c42:	4b18      	ldr	r3, [pc, #96]	; (8003ca4 <HAL_RCC_ClockConfig+0x1f0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2207      	movs	r2, #7
 8003c48:	4013      	ands	r3, r2
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d1ee      	bne.n	8003c2e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2204      	movs	r2, #4
 8003c56:	4013      	ands	r3, r2
 8003c58:	d009      	beq.n	8003c6e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c5a:	4b14      	ldr	r3, [pc, #80]	; (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	4a15      	ldr	r2, [pc, #84]	; (8003cb4 <HAL_RCC_ClockConfig+0x200>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	0019      	movs	r1, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	4b10      	ldr	r3, [pc, #64]	; (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003c6e:	f000 f829 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8003c72:	0001      	movs	r1, r0
 8003c74:	4b0d      	ldr	r3, [pc, #52]	; (8003cac <HAL_RCC_ClockConfig+0x1f8>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	0a1b      	lsrs	r3, r3, #8
 8003c7a:	220f      	movs	r2, #15
 8003c7c:	401a      	ands	r2, r3
 8003c7e:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <HAL_RCC_ClockConfig+0x204>)
 8003c80:	0092      	lsls	r2, r2, #2
 8003c82:	58d3      	ldr	r3, [r2, r3]
 8003c84:	221f      	movs	r2, #31
 8003c86:	4013      	ands	r3, r2
 8003c88:	000a      	movs	r2, r1
 8003c8a:	40da      	lsrs	r2, r3
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <HAL_RCC_ClockConfig+0x208>)
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c90:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <HAL_RCC_ClockConfig+0x20c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	0018      	movs	r0, r3
 8003c96:	f7ff f88d 	bl	8002db4 <HAL_InitTick>
 8003c9a:	0003      	movs	r3, r0
}
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	b004      	add	sp, #16
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	40022000 	.word	0x40022000
 8003ca8:	00001388 	.word	0x00001388
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	fffff0ff 	.word	0xfffff0ff
 8003cb4:	ffff8fff 	.word	0xffff8fff
 8003cb8:	08008328 	.word	0x08008328
 8003cbc:	20000000 	.word	0x20000000
 8003cc0:	20000004 	.word	0x20000004

08003cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cca:	4b3c      	ldr	r3, [pc, #240]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2238      	movs	r2, #56	; 0x38
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d10f      	bne.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003cd4:	4b39      	ldr	r3, [pc, #228]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	0adb      	lsrs	r3, r3, #11
 8003cda:	2207      	movs	r2, #7
 8003cdc:	4013      	ands	r3, r2
 8003cde:	2201      	movs	r2, #1
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	0013      	movs	r3, r2
 8003ce4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003ce6:	6839      	ldr	r1, [r7, #0]
 8003ce8:	4835      	ldr	r0, [pc, #212]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003cea:	f7fc fa27 	bl	800013c <__udivsi3>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	e05d      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cf4:	4b31      	ldr	r3, [pc, #196]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	2238      	movs	r2, #56	; 0x38
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d102      	bne.n	8003d06 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d00:	4b30      	ldr	r3, [pc, #192]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003d02:	613b      	str	r3, [r7, #16]
 8003d04:	e054      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d06:	4b2d      	ldr	r3, [pc, #180]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2238      	movs	r2, #56	; 0x38
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b10      	cmp	r3, #16
 8003d10:	d138      	bne.n	8003d84 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003d12:	4b2a      	ldr	r3, [pc, #168]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	2203      	movs	r2, #3
 8003d18:	4013      	ands	r3, r2
 8003d1a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d1c:	4b27      	ldr	r3, [pc, #156]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	091b      	lsrs	r3, r3, #4
 8003d22:	2207      	movs	r2, #7
 8003d24:	4013      	ands	r3, r2
 8003d26:	3301      	adds	r3, #1
 8003d28:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	d10d      	bne.n	8003d4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d30:	68b9      	ldr	r1, [r7, #8]
 8003d32:	4824      	ldr	r0, [pc, #144]	; (8003dc4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003d34:	f7fc fa02 	bl	800013c <__udivsi3>
 8003d38:	0003      	movs	r3, r0
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	4b1f      	ldr	r3, [pc, #124]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	0a1b      	lsrs	r3, r3, #8
 8003d42:	227f      	movs	r2, #127	; 0x7f
 8003d44:	4013      	ands	r3, r2
 8003d46:	434b      	muls	r3, r1
 8003d48:	617b      	str	r3, [r7, #20]
        break;
 8003d4a:	e00d      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	481c      	ldr	r0, [pc, #112]	; (8003dc0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003d50:	f7fc f9f4 	bl	800013c <__udivsi3>
 8003d54:	0003      	movs	r3, r0
 8003d56:	0019      	movs	r1, r3
 8003d58:	4b18      	ldr	r3, [pc, #96]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	227f      	movs	r2, #127	; 0x7f
 8003d60:	4013      	ands	r3, r2
 8003d62:	434b      	muls	r3, r1
 8003d64:	617b      	str	r3, [r7, #20]
        break;
 8003d66:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003d68:	4b14      	ldr	r3, [pc, #80]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	0f5b      	lsrs	r3, r3, #29
 8003d6e:	2207      	movs	r2, #7
 8003d70:	4013      	ands	r3, r2
 8003d72:	3301      	adds	r3, #1
 8003d74:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	6978      	ldr	r0, [r7, #20]
 8003d7a:	f7fc f9df 	bl	800013c <__udivsi3>
 8003d7e:	0003      	movs	r3, r0
 8003d80:	613b      	str	r3, [r7, #16]
 8003d82:	e015      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003d84:	4b0d      	ldr	r3, [pc, #52]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2238      	movs	r2, #56	; 0x38
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d103      	bne.n	8003d98 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	021b      	lsls	r3, r3, #8
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	e00b      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003d98:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <HAL_RCC_GetSysClockFreq+0xf8>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2238      	movs	r2, #56	; 0x38
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2b18      	cmp	r3, #24
 8003da2:	d103      	bne.n	8003dac <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003da4:	23fa      	movs	r3, #250	; 0xfa
 8003da6:	01db      	lsls	r3, r3, #7
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	e001      	b.n	8003db0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003db0:	693b      	ldr	r3, [r7, #16]
}
 8003db2:	0018      	movs	r0, r3
 8003db4:	46bd      	mov	sp, r7
 8003db6:	b006      	add	sp, #24
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	46c0      	nop			; (mov r8, r8)
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	00f42400 	.word	0x00f42400
 8003dc4:	007a1200 	.word	0x007a1200

08003dc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dcc:	4b02      	ldr	r3, [pc, #8]	; (8003dd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003dce:	681b      	ldr	r3, [r3, #0]
}
 8003dd0:	0018      	movs	r0, r3
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	20000000 	.word	0x20000000

08003ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ddc:	b5b0      	push	{r4, r5, r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003de0:	f7ff fff2 	bl	8003dc8 <HAL_RCC_GetHCLKFreq>
 8003de4:	0004      	movs	r4, r0
 8003de6:	f7ff fb39 	bl	800345c <LL_RCC_GetAPB1Prescaler>
 8003dea:	0003      	movs	r3, r0
 8003dec:	0b1a      	lsrs	r2, r3, #12
 8003dee:	4b05      	ldr	r3, [pc, #20]	; (8003e04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003df0:	0092      	lsls	r2, r2, #2
 8003df2:	58d3      	ldr	r3, [r2, r3]
 8003df4:	221f      	movs	r2, #31
 8003df6:	4013      	ands	r3, r2
 8003df8:	40dc      	lsrs	r4, r3
 8003dfa:	0023      	movs	r3, r4
}
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bdb0      	pop	{r4, r5, r7, pc}
 8003e02:	46c0      	nop			; (mov r8, r8)
 8003e04:	08008368 	.word	0x08008368

08003e08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003e10:	2313      	movs	r3, #19
 8003e12:	18fb      	adds	r3, r7, r3
 8003e14:	2200      	movs	r2, #0
 8003e16:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e18:	2312      	movs	r3, #18
 8003e1a:	18fb      	adds	r3, r7, r3
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	2380      	movs	r3, #128	; 0x80
 8003e26:	029b      	lsls	r3, r3, #10
 8003e28:	4013      	ands	r3, r2
 8003e2a:	d100      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003e2c:	e0a3      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2e:	2011      	movs	r0, #17
 8003e30:	183b      	adds	r3, r7, r0
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e36:	4ba5      	ldr	r3, [pc, #660]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	055b      	lsls	r3, r3, #21
 8003e3e:	4013      	ands	r3, r2
 8003e40:	d110      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e42:	4ba2      	ldr	r3, [pc, #648]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e46:	4ba1      	ldr	r3, [pc, #644]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e48:	2180      	movs	r1, #128	; 0x80
 8003e4a:	0549      	lsls	r1, r1, #21
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e50:	4b9e      	ldr	r3, [pc, #632]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003e52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e54:	2380      	movs	r3, #128	; 0x80
 8003e56:	055b      	lsls	r3, r3, #21
 8003e58:	4013      	ands	r3, r2
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5e:	183b      	adds	r3, r7, r0
 8003e60:	2201      	movs	r2, #1
 8003e62:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e64:	4b9a      	ldr	r3, [pc, #616]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4b99      	ldr	r3, [pc, #612]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003e6a:	2180      	movs	r1, #128	; 0x80
 8003e6c:	0049      	lsls	r1, r1, #1
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e72:	f7fe fffb 	bl	8002e6c <HAL_GetTick>
 8003e76:	0003      	movs	r3, r0
 8003e78:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e7a:	e00b      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7c:	f7fe fff6 	bl	8002e6c <HAL_GetTick>
 8003e80:	0002      	movs	r2, r0
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d904      	bls.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003e8a:	2313      	movs	r3, #19
 8003e8c:	18fb      	adds	r3, r7, r3
 8003e8e:	2203      	movs	r2, #3
 8003e90:	701a      	strb	r2, [r3, #0]
        break;
 8003e92:	e005      	b.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e94:	4b8e      	ldr	r3, [pc, #568]	; (80040d0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	005b      	lsls	r3, r3, #1
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d0ed      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003ea0:	2313      	movs	r3, #19
 8003ea2:	18fb      	adds	r3, r7, r3
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d154      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003eaa:	4b88      	ldr	r3, [pc, #544]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003eac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003eae:	23c0      	movs	r3, #192	; 0xc0
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d019      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d014      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003ec6:	4b81      	ldr	r3, [pc, #516]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eca:	4a82      	ldr	r2, [pc, #520]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ed0:	4b7e      	ldr	r3, [pc, #504]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ed2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ed4:	4b7d      	ldr	r3, [pc, #500]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ed6:	2180      	movs	r1, #128	; 0x80
 8003ed8:	0249      	lsls	r1, r1, #9
 8003eda:	430a      	orrs	r2, r1
 8003edc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ede:	4b7b      	ldr	r3, [pc, #492]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ee0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ee2:	4b7a      	ldr	r3, [pc, #488]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ee4:	497c      	ldr	r1, [pc, #496]	; (80040d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 8003ee6:	400a      	ands	r2, r1
 8003ee8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003eea:	4b78      	ldr	r3, [pc, #480]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ef0:	697b      	ldr	r3, [r7, #20]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	d016      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fe ffb8 	bl	8002e6c <HAL_GetTick>
 8003efc:	0003      	movs	r3, r0
 8003efe:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f00:	e00c      	b.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f02:	f7fe ffb3 	bl	8002e6c <HAL_GetTick>
 8003f06:	0002      	movs	r2, r0
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	4a73      	ldr	r2, [pc, #460]	; (80040dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d904      	bls.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003f12:	2313      	movs	r3, #19
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	2203      	movs	r2, #3
 8003f18:	701a      	strb	r2, [r3, #0]
            break;
 8003f1a:	e004      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f1c:	4b6b      	ldr	r3, [pc, #428]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f20:	2202      	movs	r2, #2
 8003f22:	4013      	ands	r3, r2
 8003f24:	d0ed      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003f26:	2313      	movs	r3, #19
 8003f28:	18fb      	adds	r3, r7, r3
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f30:	4b66      	ldr	r3, [pc, #408]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f34:	4a67      	ldr	r2, [pc, #412]	; (80040d4 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	0019      	movs	r1, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f3e:	4b63      	ldr	r3, [pc, #396]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f40:	430a      	orrs	r2, r1
 8003f42:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f44:	e00c      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f46:	2312      	movs	r3, #18
 8003f48:	18fb      	adds	r3, r7, r3
 8003f4a:	2213      	movs	r2, #19
 8003f4c:	18ba      	adds	r2, r7, r2
 8003f4e:	7812      	ldrb	r2, [r2, #0]
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	e005      	b.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f54:	2312      	movs	r3, #18
 8003f56:	18fb      	adds	r3, r7, r3
 8003f58:	2213      	movs	r2, #19
 8003f5a:	18ba      	adds	r2, r7, r2
 8003f5c:	7812      	ldrb	r2, [r2, #0]
 8003f5e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f60:	2311      	movs	r3, #17
 8003f62:	18fb      	adds	r3, r7, r3
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d105      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f6a:	4b58      	ldr	r3, [pc, #352]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f6e:	4b57      	ldr	r3, [pc, #348]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f70:	495b      	ldr	r1, [pc, #364]	; (80040e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8003f72:	400a      	ands	r2, r1
 8003f74:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	d009      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f80:	4b52      	ldr	r3, [pc, #328]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f84:	2203      	movs	r2, #3
 8003f86:	4393      	bics	r3, r2
 8003f88:	0019      	movs	r1, r3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685a      	ldr	r2, [r3, #4]
 8003f8e:	4b4f      	ldr	r3, [pc, #316]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003f90:	430a      	orrs	r2, r1
 8003f92:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2210      	movs	r2, #16
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d009      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f9e:	4b4b      	ldr	r3, [pc, #300]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa2:	4a50      	ldr	r2, [pc, #320]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	0019      	movs	r1, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	4b47      	ldr	r3, [pc, #284]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	2380      	movs	r3, #128	; 0x80
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4013      	ands	r3, r2
 8003fbc:	d009      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fbe:	4b43      	ldr	r3, [pc, #268]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc2:	4a49      	ldr	r2, [pc, #292]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	0019      	movs	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	695a      	ldr	r2, [r3, #20]
 8003fcc:	4b3f      	ldr	r3, [pc, #252]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	2380      	movs	r3, #128	; 0x80
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d009      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fde:	4b3b      	ldr	r3, [pc, #236]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe2:	4a42      	ldr	r2, [pc, #264]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	0019      	movs	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699a      	ldr	r2, [r3, #24]
 8003fec:	4b37      	ldr	r3, [pc, #220]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003fee:	430a      	orrs	r2, r1
 8003ff0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	d009      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ffc:	4b33      	ldr	r3, [pc, #204]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8003ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004000:	4a3b      	ldr	r2, [pc, #236]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004002:	4013      	ands	r3, r2
 8004004:	0019      	movs	r1, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	68da      	ldr	r2, [r3, #12]
 800400a:	4b30      	ldr	r3, [pc, #192]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800400c:	430a      	orrs	r2, r1
 800400e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	2380      	movs	r3, #128	; 0x80
 8004016:	01db      	lsls	r3, r3, #7
 8004018:	4013      	ands	r3, r2
 800401a:	d015      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800401c:	4b2b      	ldr	r3, [pc, #172]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800401e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	0899      	lsrs	r1, r3, #2
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	4b28      	ldr	r3, [pc, #160]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800402a:	430a      	orrs	r2, r1
 800402c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69da      	ldr	r2, [r3, #28]
 8004032:	2380      	movs	r3, #128	; 0x80
 8004034:	05db      	lsls	r3, r3, #23
 8004036:	429a      	cmp	r2, r3
 8004038:	d106      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800403a:	4b24      	ldr	r3, [pc, #144]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800403c:	68da      	ldr	r2, [r3, #12]
 800403e:	4b23      	ldr	r3, [pc, #140]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004040:	2180      	movs	r1, #128	; 0x80
 8004042:	0249      	lsls	r1, r1, #9
 8004044:	430a      	orrs	r2, r1
 8004046:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	2380      	movs	r3, #128	; 0x80
 800404e:	039b      	lsls	r3, r3, #14
 8004050:	4013      	ands	r3, r2
 8004052:	d016      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004054:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004058:	4a26      	ldr	r2, [pc, #152]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800405a:	4013      	ands	r3, r2
 800405c:	0019      	movs	r1, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1a      	ldr	r2, [r3, #32]
 8004062:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004064:	430a      	orrs	r2, r1
 8004066:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a1a      	ldr	r2, [r3, #32]
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	03db      	lsls	r3, r3, #15
 8004070:	429a      	cmp	r2, r3
 8004072:	d106      	bne.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004074:	4b15      	ldr	r3, [pc, #84]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	4b14      	ldr	r3, [pc, #80]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800407a:	2180      	movs	r1, #128	; 0x80
 800407c:	0449      	lsls	r1, r1, #17
 800407e:	430a      	orrs	r2, r1
 8004080:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	2380      	movs	r3, #128	; 0x80
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	4013      	ands	r3, r2
 800408c:	d016      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800408e:	4b0f      	ldr	r3, [pc, #60]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004092:	4a19      	ldr	r2, [pc, #100]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004094:	4013      	ands	r3, r2
 8004096:	0019      	movs	r1, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	4b0b      	ldr	r3, [pc, #44]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800409e:	430a      	orrs	r2, r1
 80040a0:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691a      	ldr	r2, [r3, #16]
 80040a6:	2380      	movs	r3, #128	; 0x80
 80040a8:	01db      	lsls	r3, r3, #7
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d106      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80040ae:	4b07      	ldr	r3, [pc, #28]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040b0:	68da      	ldr	r2, [r3, #12]
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80040b4:	2180      	movs	r1, #128	; 0x80
 80040b6:	0249      	lsls	r1, r1, #9
 80040b8:	430a      	orrs	r2, r1
 80040ba:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80040bc:	2312      	movs	r3, #18
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	781b      	ldrb	r3, [r3, #0]
}
 80040c2:	0018      	movs	r0, r3
 80040c4:	46bd      	mov	sp, r7
 80040c6:	b006      	add	sp, #24
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	40021000 	.word	0x40021000
 80040d0:	40007000 	.word	0x40007000
 80040d4:	fffffcff 	.word	0xfffffcff
 80040d8:	fffeffff 	.word	0xfffeffff
 80040dc:	00001388 	.word	0x00001388
 80040e0:	efffffff 	.word	0xefffffff
 80040e4:	fffff3ff 	.word	0xfffff3ff
 80040e8:	fff3ffff 	.word	0xfff3ffff
 80040ec:	ffcfffff 	.word	0xffcfffff
 80040f0:	ffffcfff 	.word	0xffffcfff
 80040f4:	ffbfffff 	.word	0xffbfffff
 80040f8:	ffff3fff 	.word	0xffff3fff

080040fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e04a      	b.n	80041a4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	223d      	movs	r2, #61	; 0x3d
 8004112:	5c9b      	ldrb	r3, [r3, r2]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d107      	bne.n	800412a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	223c      	movs	r2, #60	; 0x3c
 800411e:	2100      	movs	r1, #0
 8004120:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	0018      	movs	r0, r3
 8004126:	f7fe fcb7 	bl	8002a98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	223d      	movs	r2, #61	; 0x3d
 800412e:	2102      	movs	r1, #2
 8004130:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	3304      	adds	r3, #4
 800413a:	0019      	movs	r1, r3
 800413c:	0010      	movs	r0, r2
 800413e:	f000 f9e3 	bl	8004508 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2248      	movs	r2, #72	; 0x48
 8004146:	2101      	movs	r1, #1
 8004148:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	223e      	movs	r2, #62	; 0x3e
 800414e:	2101      	movs	r1, #1
 8004150:	5499      	strb	r1, [r3, r2]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	223f      	movs	r2, #63	; 0x3f
 8004156:	2101      	movs	r1, #1
 8004158:	5499      	strb	r1, [r3, r2]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2240      	movs	r2, #64	; 0x40
 800415e:	2101      	movs	r1, #1
 8004160:	5499      	strb	r1, [r3, r2]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2241      	movs	r2, #65	; 0x41
 8004166:	2101      	movs	r1, #1
 8004168:	5499      	strb	r1, [r3, r2]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2242      	movs	r2, #66	; 0x42
 800416e:	2101      	movs	r1, #1
 8004170:	5499      	strb	r1, [r3, r2]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2243      	movs	r2, #67	; 0x43
 8004176:	2101      	movs	r1, #1
 8004178:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2244      	movs	r2, #68	; 0x44
 800417e:	2101      	movs	r1, #1
 8004180:	5499      	strb	r1, [r3, r2]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2245      	movs	r2, #69	; 0x45
 8004186:	2101      	movs	r1, #1
 8004188:	5499      	strb	r1, [r3, r2]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2246      	movs	r2, #70	; 0x46
 800418e:	2101      	movs	r1, #1
 8004190:	5499      	strb	r1, [r3, r2]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2247      	movs	r2, #71	; 0x47
 8004196:	2101      	movs	r1, #1
 8004198:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	223d      	movs	r2, #61	; 0x3d
 800419e:	2101      	movs	r1, #1
 80041a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	0018      	movs	r0, r3
 80041a6:	46bd      	mov	sp, r7
 80041a8:	b002      	add	sp, #8
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	223d      	movs	r2, #61	; 0x3d
 80041b8:	5c9b      	ldrb	r3, [r3, r2]
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d001      	beq.n	80041c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e03d      	b.n	8004240 <HAL_TIM_Base_Start_IT+0x94>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	223d      	movs	r2, #61	; 0x3d
 80041c8:	2102      	movs	r1, #2
 80041ca:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68da      	ldr	r2, [r3, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2101      	movs	r1, #1
 80041d8:	430a      	orrs	r2, r1
 80041da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a19      	ldr	r2, [pc, #100]	; (8004248 <HAL_TIM_Base_Start_IT+0x9c>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00a      	beq.n	80041fc <HAL_TIM_Base_Start_IT+0x50>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	2380      	movs	r3, #128	; 0x80
 80041ec:	05db      	lsls	r3, r3, #23
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d004      	beq.n	80041fc <HAL_TIM_Base_Start_IT+0x50>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a15      	ldr	r2, [pc, #84]	; (800424c <HAL_TIM_Base_Start_IT+0xa0>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d116      	bne.n	800422a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	4a13      	ldr	r2, [pc, #76]	; (8004250 <HAL_TIM_Base_Start_IT+0xa4>)
 8004204:	4013      	ands	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2b06      	cmp	r3, #6
 800420c:	d016      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x90>
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	2380      	movs	r3, #128	; 0x80
 8004212:	025b      	lsls	r3, r3, #9
 8004214:	429a      	cmp	r2, r3
 8004216:	d011      	beq.n	800423c <HAL_TIM_Base_Start_IT+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2101      	movs	r1, #1
 8004224:	430a      	orrs	r2, r1
 8004226:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004228:	e008      	b.n	800423c <HAL_TIM_Base_Start_IT+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2101      	movs	r1, #1
 8004236:	430a      	orrs	r2, r1
 8004238:	601a      	str	r2, [r3, #0]
 800423a:	e000      	b.n	800423e <HAL_TIM_Base_Start_IT+0x92>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800423c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	0018      	movs	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	b004      	add	sp, #16
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40012c00 	.word	0x40012c00
 800424c:	40000400 	.word	0x40000400
 8004250:	00010007 	.word	0x00010007

08004254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	2202      	movs	r2, #2
 8004264:	4013      	ands	r3, r2
 8004266:	2b02      	cmp	r3, #2
 8004268:	d124      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	2202      	movs	r2, #2
 8004272:	4013      	ands	r3, r2
 8004274:	2b02      	cmp	r3, #2
 8004276:	d11d      	bne.n	80042b4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2203      	movs	r2, #3
 800427e:	4252      	negs	r2, r2
 8004280:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	2203      	movs	r2, #3
 8004290:	4013      	ands	r3, r2
 8004292:	d004      	beq.n	800429e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	0018      	movs	r0, r3
 8004298:	f000 f91e 	bl	80044d8 <HAL_TIM_IC_CaptureCallback>
 800429c:	e007      	b.n	80042ae <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	0018      	movs	r0, r3
 80042a2:	f000 f911 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	0018      	movs	r0, r3
 80042aa:	f000 f91d 	bl	80044e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2204      	movs	r2, #4
 80042bc:	4013      	ands	r3, r2
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d125      	bne.n	800430e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2204      	movs	r2, #4
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d11e      	bne.n	800430e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2205      	movs	r2, #5
 80042d6:	4252      	negs	r2, r2
 80042d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2202      	movs	r2, #2
 80042de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	23c0      	movs	r3, #192	; 0xc0
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	4013      	ands	r3, r2
 80042ec:	d004      	beq.n	80042f8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	0018      	movs	r0, r3
 80042f2:	f000 f8f1 	bl	80044d8 <HAL_TIM_IC_CaptureCallback>
 80042f6:	e007      	b.n	8004308 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	0018      	movs	r0, r3
 80042fc:	f000 f8e4 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	0018      	movs	r0, r3
 8004304:	f000 f8f0 	bl	80044e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	691b      	ldr	r3, [r3, #16]
 8004314:	2208      	movs	r2, #8
 8004316:	4013      	ands	r3, r2
 8004318:	2b08      	cmp	r3, #8
 800431a:	d124      	bne.n	8004366 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2208      	movs	r2, #8
 8004324:	4013      	ands	r3, r2
 8004326:	2b08      	cmp	r3, #8
 8004328:	d11d      	bne.n	8004366 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2209      	movs	r2, #9
 8004330:	4252      	negs	r2, r2
 8004332:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2204      	movs	r2, #4
 8004338:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69db      	ldr	r3, [r3, #28]
 8004340:	2203      	movs	r2, #3
 8004342:	4013      	ands	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	0018      	movs	r0, r3
 800434a:	f000 f8c5 	bl	80044d8 <HAL_TIM_IC_CaptureCallback>
 800434e:	e007      	b.n	8004360 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	0018      	movs	r0, r3
 8004354:	f000 f8b8 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	0018      	movs	r0, r3
 800435c:	f000 f8c4 	bl	80044e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	2210      	movs	r2, #16
 800436e:	4013      	ands	r3, r2
 8004370:	2b10      	cmp	r3, #16
 8004372:	d125      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2210      	movs	r2, #16
 800437c:	4013      	ands	r3, r2
 800437e:	2b10      	cmp	r3, #16
 8004380:	d11e      	bne.n	80043c0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2211      	movs	r2, #17
 8004388:	4252      	negs	r2, r2
 800438a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2208      	movs	r2, #8
 8004390:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	69da      	ldr	r2, [r3, #28]
 8004398:	23c0      	movs	r3, #192	; 0xc0
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4013      	ands	r3, r2
 800439e:	d004      	beq.n	80043aa <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	0018      	movs	r0, r3
 80043a4:	f000 f898 	bl	80044d8 <HAL_TIM_IC_CaptureCallback>
 80043a8:	e007      	b.n	80043ba <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	0018      	movs	r0, r3
 80043ae:	f000 f88b 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	0018      	movs	r0, r3
 80043b6:	f000 f897 	bl	80044e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2200      	movs	r2, #0
 80043be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	691b      	ldr	r3, [r3, #16]
 80043c6:	2201      	movs	r2, #1
 80043c8:	4013      	ands	r3, r2
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d10f      	bne.n	80043ee <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	2201      	movs	r2, #1
 80043d6:	4013      	ands	r3, r2
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d108      	bne.n	80043ee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2202      	movs	r2, #2
 80043e2:	4252      	negs	r2, r2
 80043e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	0018      	movs	r0, r3
 80043ea:	f000 f865 	bl	80044b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	2280      	movs	r2, #128	; 0x80
 80043f6:	4013      	ands	r3, r2
 80043f8:	2b80      	cmp	r3, #128	; 0x80
 80043fa:	d10f      	bne.n	800441c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	2280      	movs	r2, #128	; 0x80
 8004404:	4013      	ands	r3, r2
 8004406:	2b80      	cmp	r3, #128	; 0x80
 8004408:	d108      	bne.n	800441c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2281      	movs	r2, #129	; 0x81
 8004410:	4252      	negs	r2, r2
 8004412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	0018      	movs	r0, r3
 8004418:	f000 f8f4 	bl	8004604 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	2380      	movs	r3, #128	; 0x80
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	401a      	ands	r2, r3
 8004428:	2380      	movs	r3, #128	; 0x80
 800442a:	005b      	lsls	r3, r3, #1
 800442c:	429a      	cmp	r2, r3
 800442e:	d10e      	bne.n	800444e <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	2280      	movs	r2, #128	; 0x80
 8004438:	4013      	ands	r3, r2
 800443a:	2b80      	cmp	r3, #128	; 0x80
 800443c:	d107      	bne.n	800444e <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a1c      	ldr	r2, [pc, #112]	; (80044b4 <HAL_TIM_IRQHandler+0x260>)
 8004444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	0018      	movs	r0, r3
 800444a:	f000 f8e3 	bl	8004614 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	2240      	movs	r2, #64	; 0x40
 8004456:	4013      	ands	r3, r2
 8004458:	2b40      	cmp	r3, #64	; 0x40
 800445a:	d10f      	bne.n	800447c <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	2240      	movs	r2, #64	; 0x40
 8004464:	4013      	ands	r3, r2
 8004466:	2b40      	cmp	r3, #64	; 0x40
 8004468:	d108      	bne.n	800447c <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2241      	movs	r2, #65	; 0x41
 8004470:	4252      	negs	r2, r2
 8004472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	0018      	movs	r0, r3
 8004478:	f000 f83e 	bl	80044f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2220      	movs	r2, #32
 8004484:	4013      	ands	r3, r2
 8004486:	2b20      	cmp	r3, #32
 8004488:	d10f      	bne.n	80044aa <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2220      	movs	r2, #32
 8004492:	4013      	ands	r3, r2
 8004494:	2b20      	cmp	r3, #32
 8004496:	d108      	bne.n	80044aa <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2221      	movs	r2, #33	; 0x21
 800449e:	4252      	negs	r2, r2
 80044a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	0018      	movs	r0, r3
 80044a6:	f000 f8a5 	bl	80045f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044aa:	46c0      	nop			; (mov r8, r8)
 80044ac:	46bd      	mov	sp, r7
 80044ae:	b002      	add	sp, #8
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	fffffeff 	.word	0xfffffeff

080044b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044c0:	46c0      	nop			; (mov r8, r8)
 80044c2:	46bd      	mov	sp, r7
 80044c4:	b002      	add	sp, #8
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044d0:	46c0      	nop			; (mov r8, r8)
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b002      	add	sp, #8
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044e0:	46c0      	nop			; (mov r8, r8)
 80044e2:	46bd      	mov	sp, r7
 80044e4:	b002      	add	sp, #8
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b082      	sub	sp, #8
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044f0:	46c0      	nop			; (mov r8, r8)
 80044f2:	46bd      	mov	sp, r7
 80044f4:	b002      	add	sp, #8
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004500:	46c0      	nop			; (mov r8, r8)
 8004502:	46bd      	mov	sp, r7
 8004504:	b002      	add	sp, #8
 8004506:	bd80      	pop	{r7, pc}

08004508 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	4a30      	ldr	r2, [pc, #192]	; (80045dc <TIM_Base_SetConfig+0xd4>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d008      	beq.n	8004532 <TIM_Base_SetConfig+0x2a>
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	2380      	movs	r3, #128	; 0x80
 8004524:	05db      	lsls	r3, r3, #23
 8004526:	429a      	cmp	r2, r3
 8004528:	d003      	beq.n	8004532 <TIM_Base_SetConfig+0x2a>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a2c      	ldr	r2, [pc, #176]	; (80045e0 <TIM_Base_SetConfig+0xd8>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d108      	bne.n	8004544 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2270      	movs	r2, #112	; 0x70
 8004536:	4393      	bics	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	4313      	orrs	r3, r2
 8004542:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a25      	ldr	r2, [pc, #148]	; (80045dc <TIM_Base_SetConfig+0xd4>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d014      	beq.n	8004576 <TIM_Base_SetConfig+0x6e>
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	2380      	movs	r3, #128	; 0x80
 8004550:	05db      	lsls	r3, r3, #23
 8004552:	429a      	cmp	r2, r3
 8004554:	d00f      	beq.n	8004576 <TIM_Base_SetConfig+0x6e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a21      	ldr	r2, [pc, #132]	; (80045e0 <TIM_Base_SetConfig+0xd8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00b      	beq.n	8004576 <TIM_Base_SetConfig+0x6e>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a20      	ldr	r2, [pc, #128]	; (80045e4 <TIM_Base_SetConfig+0xdc>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <TIM_Base_SetConfig+0x6e>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a1f      	ldr	r2, [pc, #124]	; (80045e8 <TIM_Base_SetConfig+0xe0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d003      	beq.n	8004576 <TIM_Base_SetConfig+0x6e>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <TIM_Base_SetConfig+0xe4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d108      	bne.n	8004588 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <TIM_Base_SetConfig+0xe8>)
 800457a:	4013      	ands	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2280      	movs	r2, #128	; 0x80
 800458c:	4393      	bics	r3, r2
 800458e:	001a      	movs	r2, r3
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	4313      	orrs	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a0a      	ldr	r2, [pc, #40]	; (80045dc <TIM_Base_SetConfig+0xd4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d007      	beq.n	80045c6 <TIM_Base_SetConfig+0xbe>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a0b      	ldr	r2, [pc, #44]	; (80045e8 <TIM_Base_SetConfig+0xe0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d003      	beq.n	80045c6 <TIM_Base_SetConfig+0xbe>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a0a      	ldr	r2, [pc, #40]	; (80045ec <TIM_Base_SetConfig+0xe4>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d103      	bne.n	80045ce <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	615a      	str	r2, [r3, #20]
}
 80045d4:	46c0      	nop			; (mov r8, r8)
 80045d6:	46bd      	mov	sp, r7
 80045d8:	b004      	add	sp, #16
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	40012c00 	.word	0x40012c00
 80045e0:	40000400 	.word	0x40000400
 80045e4:	40002000 	.word	0x40002000
 80045e8:	40014400 	.word	0x40014400
 80045ec:	40014800 	.word	0x40014800
 80045f0:	fffffcff 	.word	0xfffffcff

080045f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045fc:	46c0      	nop			; (mov r8, r8)
 80045fe:	46bd      	mov	sp, r7
 8004600:	b002      	add	sp, #8
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800460c:	46c0      	nop			; (mov r8, r8)
 800460e:	46bd      	mov	sp, r7
 8004610:	b002      	add	sp, #8
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800461c:	46c0      	nop			; (mov r8, r8)
 800461e:	46bd      	mov	sp, r7
 8004620:	b002      	add	sp, #8
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e046      	b.n	80046c4 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2284      	movs	r2, #132	; 0x84
 800463a:	589b      	ldr	r3, [r3, r2]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d107      	bne.n	8004650 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2280      	movs	r2, #128	; 0x80
 8004644:	2100      	movs	r1, #0
 8004646:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	0018      	movs	r0, r3
 800464c:	f7fe face 	bl	8002bec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2284      	movs	r2, #132	; 0x84
 8004654:	2124      	movs	r1, #36	; 0x24
 8004656:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2101      	movs	r1, #1
 8004664:	438a      	bics	r2, r1
 8004666:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	0018      	movs	r0, r3
 800466c:	f000 f8dc 	bl	8004828 <UART_SetConfig>
 8004670:	0003      	movs	r3, r0
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e024      	b.n	80046c4 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	0018      	movs	r0, r3
 8004686:	f000 fb47 	bl	8004d18 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685a      	ldr	r2, [r3, #4]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	490d      	ldr	r1, [pc, #52]	; (80046cc <HAL_UART_Init+0xa8>)
 8004696:	400a      	ands	r2, r1
 8004698:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	212a      	movs	r1, #42	; 0x2a
 80046a6:	438a      	bics	r2, r1
 80046a8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2101      	movs	r1, #1
 80046b6:	430a      	orrs	r2, r1
 80046b8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	0018      	movs	r0, r3
 80046be:	f000 fbdf 	bl	8004e80 <UART_CheckIdleState>
 80046c2:	0003      	movs	r3, r0
}
 80046c4:	0018      	movs	r0, r3
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b002      	add	sp, #8
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	ffffb7ff 	.word	0xffffb7ff

080046d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08a      	sub	sp, #40	; 0x28
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	603b      	str	r3, [r7, #0]
 80046dc:	1dbb      	adds	r3, r7, #6
 80046de:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2284      	movs	r2, #132	; 0x84
 80046e4:	589b      	ldr	r3, [r3, r2]
 80046e6:	2b20      	cmp	r3, #32
 80046e8:	d000      	beq.n	80046ec <HAL_UART_Transmit+0x1c>
 80046ea:	e097      	b.n	800481c <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_UART_Transmit+0x2a>
 80046f2:	1dbb      	adds	r3, r7, #6
 80046f4:	881b      	ldrh	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d101      	bne.n	80046fe <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e08f      	b.n	800481e <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	2380      	movs	r3, #128	; 0x80
 8004704:	015b      	lsls	r3, r3, #5
 8004706:	429a      	cmp	r2, r3
 8004708:	d109      	bne.n	800471e <HAL_UART_Transmit+0x4e>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d105      	bne.n	800471e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2201      	movs	r2, #1
 8004716:	4013      	ands	r3, r2
 8004718:	d001      	beq.n	800471e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e07f      	b.n	800481e <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2280      	movs	r2, #128	; 0x80
 8004722:	5c9b      	ldrb	r3, [r3, r2]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_UART_Transmit+0x5c>
 8004728:	2302      	movs	r3, #2
 800472a:	e078      	b.n	800481e <HAL_UART_Transmit+0x14e>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2280      	movs	r2, #128	; 0x80
 8004730:	2101      	movs	r1, #1
 8004732:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	228c      	movs	r2, #140	; 0x8c
 8004738:	2100      	movs	r1, #0
 800473a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2284      	movs	r2, #132	; 0x84
 8004740:	2121      	movs	r1, #33	; 0x21
 8004742:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004744:	f7fe fb92 	bl	8002e6c <HAL_GetTick>
 8004748:	0003      	movs	r3, r0
 800474a:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	1dba      	adds	r2, r7, #6
 8004750:	2154      	movs	r1, #84	; 0x54
 8004752:	8812      	ldrh	r2, [r2, #0]
 8004754:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	1dba      	adds	r2, r7, #6
 800475a:	2156      	movs	r1, #86	; 0x56
 800475c:	8812      	ldrh	r2, [r2, #0]
 800475e:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	689a      	ldr	r2, [r3, #8]
 8004764:	2380      	movs	r3, #128	; 0x80
 8004766:	015b      	lsls	r3, r3, #5
 8004768:	429a      	cmp	r2, r3
 800476a:	d108      	bne.n	800477e <HAL_UART_Transmit+0xae>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d104      	bne.n	800477e <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8004774:	2300      	movs	r3, #0
 8004776:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	61bb      	str	r3, [r7, #24]
 800477c:	e003      	b.n	8004786 <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004782:	2300      	movs	r3, #0
 8004784:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2280      	movs	r2, #128	; 0x80
 800478a:	2100      	movs	r1, #0
 800478c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800478e:	e02c      	b.n	80047ea <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	9300      	str	r3, [sp, #0]
 8004798:	0013      	movs	r3, r2
 800479a:	2200      	movs	r2, #0
 800479c:	2180      	movs	r1, #128	; 0x80
 800479e:	f000 fbb9 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 80047a2:	1e03      	subs	r3, r0, #0
 80047a4:	d001      	beq.n	80047aa <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e039      	b.n	800481e <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10b      	bne.n	80047c8 <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	001a      	movs	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	05d2      	lsls	r2, r2, #23
 80047bc:	0dd2      	lsrs	r2, r2, #23
 80047be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	3302      	adds	r3, #2
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	e007      	b.n	80047d8 <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	781a      	ldrb	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	3301      	adds	r3, #1
 80047d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2256      	movs	r2, #86	; 0x56
 80047dc:	5a9b      	ldrh	r3, [r3, r2]
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b299      	uxth	r1, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2256      	movs	r2, #86	; 0x56
 80047e8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2256      	movs	r2, #86	; 0x56
 80047ee:	5a9b      	ldrh	r3, [r3, r2]
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1cc      	bne.n	8004790 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	0013      	movs	r3, r2
 8004800:	2200      	movs	r2, #0
 8004802:	2140      	movs	r1, #64	; 0x40
 8004804:	f000 fb86 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 8004808:	1e03      	subs	r3, r0, #0
 800480a:	d001      	beq.n	8004810 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e006      	b.n	800481e <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2284      	movs	r2, #132	; 0x84
 8004814:	2120      	movs	r1, #32
 8004816:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8004818:	2300      	movs	r3, #0
 800481a:	e000      	b.n	800481e <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 800481c:	2302      	movs	r3, #2
  }
}
 800481e:	0018      	movs	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	b008      	add	sp, #32
 8004824:	bd80      	pop	{r7, pc}
	...

08004828 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004828:	b5b0      	push	{r4, r5, r7, lr}
 800482a:	b090      	sub	sp, #64	; 0x40
 800482c:	af00      	add	r7, sp, #0
 800482e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004830:	231a      	movs	r3, #26
 8004832:	2220      	movs	r2, #32
 8004834:	189b      	adds	r3, r3, r2
 8004836:	19db      	adds	r3, r3, r7
 8004838:	2200      	movs	r2, #0
 800483a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	431a      	orrs	r2, r3
 8004846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	431a      	orrs	r2, r3
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	4313      	orrs	r3, r2
 8004852:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4ac4      	ldr	r2, [pc, #784]	; (8004b6c <UART_SetConfig+0x344>)
 800485c:	4013      	ands	r3, r2
 800485e:	0019      	movs	r1, r3
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004866:	430b      	orrs	r3, r1
 8004868:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800486a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	4abf      	ldr	r2, [pc, #764]	; (8004b70 <UART_SetConfig+0x348>)
 8004872:	4013      	ands	r3, r2
 8004874:	0018      	movs	r0, r3
 8004876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004878:	68d9      	ldr	r1, [r3, #12]
 800487a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	0003      	movs	r3, r0
 8004880:	430b      	orrs	r3, r1
 8004882:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800488a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4ab9      	ldr	r2, [pc, #740]	; (8004b74 <UART_SetConfig+0x34c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004896:	6a1b      	ldr	r3, [r3, #32]
 8004898:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800489a:	4313      	orrs	r3, r2
 800489c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	4ab4      	ldr	r2, [pc, #720]	; (8004b78 <UART_SetConfig+0x350>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	0019      	movs	r1, r3
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048b0:	430b      	orrs	r3, r1
 80048b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ba:	220f      	movs	r2, #15
 80048bc:	4393      	bics	r3, r2
 80048be:	0018      	movs	r0, r3
 80048c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	0003      	movs	r3, r0
 80048ca:	430b      	orrs	r3, r1
 80048cc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4aaa      	ldr	r2, [pc, #680]	; (8004b7c <UART_SetConfig+0x354>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d131      	bne.n	800493c <UART_SetConfig+0x114>
 80048d8:	4ba9      	ldr	r3, [pc, #676]	; (8004b80 <UART_SetConfig+0x358>)
 80048da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048dc:	2203      	movs	r2, #3
 80048de:	4013      	ands	r3, r2
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d01d      	beq.n	8004920 <UART_SetConfig+0xf8>
 80048e4:	d823      	bhi.n	800492e <UART_SetConfig+0x106>
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d00c      	beq.n	8004904 <UART_SetConfig+0xdc>
 80048ea:	d820      	bhi.n	800492e <UART_SetConfig+0x106>
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <UART_SetConfig+0xce>
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d00e      	beq.n	8004912 <UART_SetConfig+0xea>
 80048f4:	e01b      	b.n	800492e <UART_SetConfig+0x106>
 80048f6:	231b      	movs	r3, #27
 80048f8:	2220      	movs	r2, #32
 80048fa:	189b      	adds	r3, r3, r2
 80048fc:	19db      	adds	r3, r3, r7
 80048fe:	2200      	movs	r2, #0
 8004900:	701a      	strb	r2, [r3, #0]
 8004902:	e071      	b.n	80049e8 <UART_SetConfig+0x1c0>
 8004904:	231b      	movs	r3, #27
 8004906:	2220      	movs	r2, #32
 8004908:	189b      	adds	r3, r3, r2
 800490a:	19db      	adds	r3, r3, r7
 800490c:	2202      	movs	r2, #2
 800490e:	701a      	strb	r2, [r3, #0]
 8004910:	e06a      	b.n	80049e8 <UART_SetConfig+0x1c0>
 8004912:	231b      	movs	r3, #27
 8004914:	2220      	movs	r2, #32
 8004916:	189b      	adds	r3, r3, r2
 8004918:	19db      	adds	r3, r3, r7
 800491a:	2204      	movs	r2, #4
 800491c:	701a      	strb	r2, [r3, #0]
 800491e:	e063      	b.n	80049e8 <UART_SetConfig+0x1c0>
 8004920:	231b      	movs	r3, #27
 8004922:	2220      	movs	r2, #32
 8004924:	189b      	adds	r3, r3, r2
 8004926:	19db      	adds	r3, r3, r7
 8004928:	2208      	movs	r2, #8
 800492a:	701a      	strb	r2, [r3, #0]
 800492c:	e05c      	b.n	80049e8 <UART_SetConfig+0x1c0>
 800492e:	231b      	movs	r3, #27
 8004930:	2220      	movs	r2, #32
 8004932:	189b      	adds	r3, r3, r2
 8004934:	19db      	adds	r3, r3, r7
 8004936:	2210      	movs	r2, #16
 8004938:	701a      	strb	r2, [r3, #0]
 800493a:	e055      	b.n	80049e8 <UART_SetConfig+0x1c0>
 800493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a90      	ldr	r2, [pc, #576]	; (8004b84 <UART_SetConfig+0x35c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d106      	bne.n	8004954 <UART_SetConfig+0x12c>
 8004946:	231b      	movs	r3, #27
 8004948:	2220      	movs	r2, #32
 800494a:	189b      	adds	r3, r3, r2
 800494c:	19db      	adds	r3, r3, r7
 800494e:	2200      	movs	r2, #0
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	e049      	b.n	80049e8 <UART_SetConfig+0x1c0>
 8004954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a86      	ldr	r2, [pc, #536]	; (8004b74 <UART_SetConfig+0x34c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d13e      	bne.n	80049dc <UART_SetConfig+0x1b4>
 800495e:	4b88      	ldr	r3, [pc, #544]	; (8004b80 <UART_SetConfig+0x358>)
 8004960:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004962:	23c0      	movs	r3, #192	; 0xc0
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	4013      	ands	r3, r2
 8004968:	22c0      	movs	r2, #192	; 0xc0
 800496a:	0112      	lsls	r2, r2, #4
 800496c:	4293      	cmp	r3, r2
 800496e:	d027      	beq.n	80049c0 <UART_SetConfig+0x198>
 8004970:	22c0      	movs	r2, #192	; 0xc0
 8004972:	0112      	lsls	r2, r2, #4
 8004974:	4293      	cmp	r3, r2
 8004976:	d82a      	bhi.n	80049ce <UART_SetConfig+0x1a6>
 8004978:	2280      	movs	r2, #128	; 0x80
 800497a:	0112      	lsls	r2, r2, #4
 800497c:	4293      	cmp	r3, r2
 800497e:	d011      	beq.n	80049a4 <UART_SetConfig+0x17c>
 8004980:	2280      	movs	r2, #128	; 0x80
 8004982:	0112      	lsls	r2, r2, #4
 8004984:	4293      	cmp	r3, r2
 8004986:	d822      	bhi.n	80049ce <UART_SetConfig+0x1a6>
 8004988:	2b00      	cmp	r3, #0
 800498a:	d004      	beq.n	8004996 <UART_SetConfig+0x16e>
 800498c:	2280      	movs	r2, #128	; 0x80
 800498e:	00d2      	lsls	r2, r2, #3
 8004990:	4293      	cmp	r3, r2
 8004992:	d00e      	beq.n	80049b2 <UART_SetConfig+0x18a>
 8004994:	e01b      	b.n	80049ce <UART_SetConfig+0x1a6>
 8004996:	231b      	movs	r3, #27
 8004998:	2220      	movs	r2, #32
 800499a:	189b      	adds	r3, r3, r2
 800499c:	19db      	adds	r3, r3, r7
 800499e:	2200      	movs	r2, #0
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	e021      	b.n	80049e8 <UART_SetConfig+0x1c0>
 80049a4:	231b      	movs	r3, #27
 80049a6:	2220      	movs	r2, #32
 80049a8:	189b      	adds	r3, r3, r2
 80049aa:	19db      	adds	r3, r3, r7
 80049ac:	2202      	movs	r2, #2
 80049ae:	701a      	strb	r2, [r3, #0]
 80049b0:	e01a      	b.n	80049e8 <UART_SetConfig+0x1c0>
 80049b2:	231b      	movs	r3, #27
 80049b4:	2220      	movs	r2, #32
 80049b6:	189b      	adds	r3, r3, r2
 80049b8:	19db      	adds	r3, r3, r7
 80049ba:	2204      	movs	r2, #4
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	e013      	b.n	80049e8 <UART_SetConfig+0x1c0>
 80049c0:	231b      	movs	r3, #27
 80049c2:	2220      	movs	r2, #32
 80049c4:	189b      	adds	r3, r3, r2
 80049c6:	19db      	adds	r3, r3, r7
 80049c8:	2208      	movs	r2, #8
 80049ca:	701a      	strb	r2, [r3, #0]
 80049cc:	e00c      	b.n	80049e8 <UART_SetConfig+0x1c0>
 80049ce:	231b      	movs	r3, #27
 80049d0:	2220      	movs	r2, #32
 80049d2:	189b      	adds	r3, r3, r2
 80049d4:	19db      	adds	r3, r3, r7
 80049d6:	2210      	movs	r2, #16
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	e005      	b.n	80049e8 <UART_SetConfig+0x1c0>
 80049dc:	231b      	movs	r3, #27
 80049de:	2220      	movs	r2, #32
 80049e0:	189b      	adds	r3, r3, r2
 80049e2:	19db      	adds	r3, r3, r7
 80049e4:	2210      	movs	r2, #16
 80049e6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a61      	ldr	r2, [pc, #388]	; (8004b74 <UART_SetConfig+0x34c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d000      	beq.n	80049f4 <UART_SetConfig+0x1cc>
 80049f2:	e092      	b.n	8004b1a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80049f4:	231b      	movs	r3, #27
 80049f6:	2220      	movs	r2, #32
 80049f8:	189b      	adds	r3, r3, r2
 80049fa:	19db      	adds	r3, r3, r7
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d015      	beq.n	8004a2e <UART_SetConfig+0x206>
 8004a02:	dc18      	bgt.n	8004a36 <UART_SetConfig+0x20e>
 8004a04:	2b04      	cmp	r3, #4
 8004a06:	d00d      	beq.n	8004a24 <UART_SetConfig+0x1fc>
 8004a08:	dc15      	bgt.n	8004a36 <UART_SetConfig+0x20e>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <UART_SetConfig+0x1ec>
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d005      	beq.n	8004a1e <UART_SetConfig+0x1f6>
 8004a12:	e010      	b.n	8004a36 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a14:	f7ff f9e2 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 8004a18:	0003      	movs	r3, r0
 8004a1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a1c:	e014      	b.n	8004a48 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a1e:	4b5a      	ldr	r3, [pc, #360]	; (8004b88 <UART_SetConfig+0x360>)
 8004a20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a22:	e011      	b.n	8004a48 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a24:	f7ff f94e 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8004a28:	0003      	movs	r3, r0
 8004a2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a2c:	e00c      	b.n	8004a48 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	021b      	lsls	r3, r3, #8
 8004a32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a34:	e008      	b.n	8004a48 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004a3a:	231a      	movs	r3, #26
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	189b      	adds	r3, r3, r2
 8004a40:	19db      	adds	r3, r3, r7
 8004a42:	2201      	movs	r2, #1
 8004a44:	701a      	strb	r2, [r3, #0]
        break;
 8004a46:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d100      	bne.n	8004a50 <UART_SetConfig+0x228>
 8004a4e:	e148      	b.n	8004ce2 <UART_SetConfig+0x4ba>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a54:	4b4d      	ldr	r3, [pc, #308]	; (8004b8c <UART_SetConfig+0x364>)
 8004a56:	0052      	lsls	r2, r2, #1
 8004a58:	5ad3      	ldrh	r3, [r2, r3]
 8004a5a:	0019      	movs	r1, r3
 8004a5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a5e:	f7fb fb6d 	bl	800013c <__udivsi3>
 8004a62:	0003      	movs	r3, r0
 8004a64:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	0013      	movs	r3, r2
 8004a6c:	005b      	lsls	r3, r3, #1
 8004a6e:	189b      	adds	r3, r3, r2
 8004a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d305      	bcc.n	8004a82 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004a7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d906      	bls.n	8004a90 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004a82:	231a      	movs	r3, #26
 8004a84:	2220      	movs	r2, #32
 8004a86:	189b      	adds	r3, r3, r2
 8004a88:	19db      	adds	r3, r3, r7
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	701a      	strb	r2, [r3, #0]
 8004a8e:	e128      	b.n	8004ce2 <UART_SetConfig+0x4ba>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a92:	61bb      	str	r3, [r7, #24]
 8004a94:	2300      	movs	r3, #0
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a9c:	4b3b      	ldr	r3, [pc, #236]	; (8004b8c <UART_SetConfig+0x364>)
 8004a9e:	0052      	lsls	r2, r2, #1
 8004aa0:	5ad3      	ldrh	r3, [r2, r3]
 8004aa2:	613b      	str	r3, [r7, #16]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	69b8      	ldr	r0, [r7, #24]
 8004aae:	69f9      	ldr	r1, [r7, #28]
 8004ab0:	f7fb fcf8 	bl	80004a4 <__aeabi_uldivmod>
 8004ab4:	0002      	movs	r2, r0
 8004ab6:	000b      	movs	r3, r1
 8004ab8:	0e11      	lsrs	r1, r2, #24
 8004aba:	021d      	lsls	r5, r3, #8
 8004abc:	430d      	orrs	r5, r1
 8004abe:	0214      	lsls	r4, r2, #8
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	085b      	lsrs	r3, r3, #1
 8004ac6:	60bb      	str	r3, [r7, #8]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	60fb      	str	r3, [r7, #12]
 8004acc:	68b8      	ldr	r0, [r7, #8]
 8004ace:	68f9      	ldr	r1, [r7, #12]
 8004ad0:	1900      	adds	r0, r0, r4
 8004ad2:	4169      	adcs	r1, r5
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	2300      	movs	r3, #0
 8004adc:	607b      	str	r3, [r7, #4]
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f7fb fcdf 	bl	80004a4 <__aeabi_uldivmod>
 8004ae6:	0002      	movs	r2, r0
 8004ae8:	000b      	movs	r3, r1
 8004aea:	0013      	movs	r3, r2
 8004aec:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004aee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004af0:	23c0      	movs	r3, #192	; 0xc0
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d309      	bcc.n	8004b0c <UART_SetConfig+0x2e4>
 8004af8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004afa:	2380      	movs	r3, #128	; 0x80
 8004afc:	035b      	lsls	r3, r3, #13
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d204      	bcs.n	8004b0c <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b08:	60da      	str	r2, [r3, #12]
 8004b0a:	e0ea      	b.n	8004ce2 <UART_SetConfig+0x4ba>
        }
        else
        {
          ret = HAL_ERROR;
 8004b0c:	231a      	movs	r3, #26
 8004b0e:	2220      	movs	r2, #32
 8004b10:	189b      	adds	r3, r3, r2
 8004b12:	19db      	adds	r3, r3, r7
 8004b14:	2201      	movs	r2, #1
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	e0e3      	b.n	8004ce2 <UART_SetConfig+0x4ba>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	69da      	ldr	r2, [r3, #28]
 8004b1e:	2380      	movs	r3, #128	; 0x80
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d000      	beq.n	8004b28 <UART_SetConfig+0x300>
 8004b26:	e084      	b.n	8004c32 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004b28:	231b      	movs	r3, #27
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	189b      	adds	r3, r3, r2
 8004b2e:	19db      	adds	r3, r3, r7
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b08      	cmp	r3, #8
 8004b34:	d015      	beq.n	8004b62 <UART_SetConfig+0x33a>
 8004b36:	dc2b      	bgt.n	8004b90 <UART_SetConfig+0x368>
 8004b38:	2b04      	cmp	r3, #4
 8004b3a:	d00d      	beq.n	8004b58 <UART_SetConfig+0x330>
 8004b3c:	dc28      	bgt.n	8004b90 <UART_SetConfig+0x368>
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <UART_SetConfig+0x320>
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d005      	beq.n	8004b52 <UART_SetConfig+0x32a>
 8004b46:	e023      	b.n	8004b90 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b48:	f7ff f948 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b50:	e027      	b.n	8004ba2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b52:	4b0d      	ldr	r3, [pc, #52]	; (8004b88 <UART_SetConfig+0x360>)
 8004b54:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b56:	e024      	b.n	8004ba2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b58:	f7ff f8b4 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8004b5c:	0003      	movs	r3, r0
 8004b5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b60:	e01f      	b.n	8004ba2 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b62:	2380      	movs	r3, #128	; 0x80
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b68:	e01b      	b.n	8004ba2 <UART_SetConfig+0x37a>
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	cfff69f3 	.word	0xcfff69f3
 8004b70:	ffffcfff 	.word	0xffffcfff
 8004b74:	40008000 	.word	0x40008000
 8004b78:	11fff4ff 	.word	0x11fff4ff
 8004b7c:	40013800 	.word	0x40013800
 8004b80:	40021000 	.word	0x40021000
 8004b84:	40004400 	.word	0x40004400
 8004b88:	00f42400 	.word	0x00f42400
 8004b8c:	08008388 	.word	0x08008388
      default:
        pclk = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004b94:	231a      	movs	r3, #26
 8004b96:	2220      	movs	r2, #32
 8004b98:	189b      	adds	r3, r3, r2
 8004b9a:	19db      	adds	r3, r3, r7
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	701a      	strb	r2, [r3, #0]
        break;
 8004ba0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d100      	bne.n	8004baa <UART_SetConfig+0x382>
 8004ba8:	e09b      	b.n	8004ce2 <UART_SetConfig+0x4ba>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bae:	4b58      	ldr	r3, [pc, #352]	; (8004d10 <UART_SetConfig+0x4e8>)
 8004bb0:	0052      	lsls	r2, r2, #1
 8004bb2:	5ad3      	ldrh	r3, [r2, r3]
 8004bb4:	0019      	movs	r1, r3
 8004bb6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004bb8:	f7fb fac0 	bl	800013c <__udivsi3>
 8004bbc:	0003      	movs	r3, r0
 8004bbe:	005a      	lsls	r2, r3, #1
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	085b      	lsrs	r3, r3, #1
 8004bc6:	18d2      	adds	r2, r2, r3
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	0019      	movs	r1, r3
 8004bce:	0010      	movs	r0, r2
 8004bd0:	f7fb fab4 	bl	800013c <__udivsi3>
 8004bd4:	0003      	movs	r3, r0
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	2b0f      	cmp	r3, #15
 8004bde:	d921      	bls.n	8004c24 <UART_SetConfig+0x3fc>
 8004be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004be2:	2380      	movs	r3, #128	; 0x80
 8004be4:	025b      	lsls	r3, r3, #9
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d21c      	bcs.n	8004c24 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	b29a      	uxth	r2, r3
 8004bee:	200e      	movs	r0, #14
 8004bf0:	2420      	movs	r4, #32
 8004bf2:	1903      	adds	r3, r0, r4
 8004bf4:	19db      	adds	r3, r3, r7
 8004bf6:	210f      	movs	r1, #15
 8004bf8:	438a      	bics	r2, r1
 8004bfa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	085b      	lsrs	r3, r3, #1
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2207      	movs	r2, #7
 8004c04:	4013      	ands	r3, r2
 8004c06:	b299      	uxth	r1, r3
 8004c08:	1903      	adds	r3, r0, r4
 8004c0a:	19db      	adds	r3, r3, r7
 8004c0c:	1902      	adds	r2, r0, r4
 8004c0e:	19d2      	adds	r2, r2, r7
 8004c10:	8812      	ldrh	r2, [r2, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	1902      	adds	r2, r0, r4
 8004c1c:	19d2      	adds	r2, r2, r7
 8004c1e:	8812      	ldrh	r2, [r2, #0]
 8004c20:	60da      	str	r2, [r3, #12]
 8004c22:	e05e      	b.n	8004ce2 <UART_SetConfig+0x4ba>
      }
      else
      {
        ret = HAL_ERROR;
 8004c24:	231a      	movs	r3, #26
 8004c26:	2220      	movs	r2, #32
 8004c28:	189b      	adds	r3, r3, r2
 8004c2a:	19db      	adds	r3, r3, r7
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	701a      	strb	r2, [r3, #0]
 8004c30:	e057      	b.n	8004ce2 <UART_SetConfig+0x4ba>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c32:	231b      	movs	r3, #27
 8004c34:	2220      	movs	r2, #32
 8004c36:	189b      	adds	r3, r3, r2
 8004c38:	19db      	adds	r3, r3, r7
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d015      	beq.n	8004c6c <UART_SetConfig+0x444>
 8004c40:	dc18      	bgt.n	8004c74 <UART_SetConfig+0x44c>
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d00d      	beq.n	8004c62 <UART_SetConfig+0x43a>
 8004c46:	dc15      	bgt.n	8004c74 <UART_SetConfig+0x44c>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <UART_SetConfig+0x42a>
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d005      	beq.n	8004c5c <UART_SetConfig+0x434>
 8004c50:	e010      	b.n	8004c74 <UART_SetConfig+0x44c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c52:	f7ff f8c3 	bl	8003ddc <HAL_RCC_GetPCLK1Freq>
 8004c56:	0003      	movs	r3, r0
 8004c58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c5a:	e014      	b.n	8004c86 <UART_SetConfig+0x45e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c5c:	4b2d      	ldr	r3, [pc, #180]	; (8004d14 <UART_SetConfig+0x4ec>)
 8004c5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c60:	e011      	b.n	8004c86 <UART_SetConfig+0x45e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c62:	f7ff f82f 	bl	8003cc4 <HAL_RCC_GetSysClockFreq>
 8004c66:	0003      	movs	r3, r0
 8004c68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c6a:	e00c      	b.n	8004c86 <UART_SetConfig+0x45e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	021b      	lsls	r3, r3, #8
 8004c70:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004c72:	e008      	b.n	8004c86 <UART_SetConfig+0x45e>
      default:
        pclk = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004c78:	231a      	movs	r3, #26
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	189b      	adds	r3, r3, r2
 8004c7e:	19db      	adds	r3, r3, r7
 8004c80:	2201      	movs	r2, #1
 8004c82:	701a      	strb	r2, [r3, #0]
        break;
 8004c84:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d02a      	beq.n	8004ce2 <UART_SetConfig+0x4ba>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c90:	4b1f      	ldr	r3, [pc, #124]	; (8004d10 <UART_SetConfig+0x4e8>)
 8004c92:	0052      	lsls	r2, r2, #1
 8004c94:	5ad3      	ldrh	r3, [r2, r3]
 8004c96:	0019      	movs	r1, r3
 8004c98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c9a:	f7fb fa4f 	bl	800013c <__udivsi3>
 8004c9e:	0003      	movs	r3, r0
 8004ca0:	001a      	movs	r2, r3
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	085b      	lsrs	r3, r3, #1
 8004ca8:	18d2      	adds	r2, r2, r3
 8004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	0019      	movs	r1, r3
 8004cb0:	0010      	movs	r0, r2
 8004cb2:	f7fb fa43 	bl	800013c <__udivsi3>
 8004cb6:	0003      	movs	r3, r0
 8004cb8:	b29b      	uxth	r3, r3
 8004cba:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	2b0f      	cmp	r3, #15
 8004cc0:	d909      	bls.n	8004cd6 <UART_SetConfig+0x4ae>
 8004cc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc4:	2380      	movs	r3, #128	; 0x80
 8004cc6:	025b      	lsls	r3, r3, #9
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d204      	bcs.n	8004cd6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8004ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cd2:	60da      	str	r2, [r3, #12]
 8004cd4:	e005      	b.n	8004ce2 <UART_SetConfig+0x4ba>
      }
      else
      {
        ret = HAL_ERROR;
 8004cd6:	231a      	movs	r3, #26
 8004cd8:	2220      	movs	r2, #32
 8004cda:	189b      	adds	r3, r3, r2
 8004cdc:	19db      	adds	r3, r3, r7
 8004cde:	2201      	movs	r2, #1
 8004ce0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	226a      	movs	r2, #106	; 0x6a
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	2268      	movs	r2, #104	; 0x68
 8004cee:	2101      	movs	r1, #1
 8004cf0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004cfe:	231a      	movs	r3, #26
 8004d00:	2220      	movs	r2, #32
 8004d02:	189b      	adds	r3, r3, r2
 8004d04:	19db      	adds	r3, r3, r7
 8004d06:	781b      	ldrb	r3, [r3, #0]
}
 8004d08:	0018      	movs	r0, r3
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	b010      	add	sp, #64	; 0x40
 8004d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8004d10:	08008388 	.word	0x08008388
 8004d14:	00f42400 	.word	0x00f42400

08004d18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	2201      	movs	r2, #1
 8004d26:	4013      	ands	r3, r2
 8004d28:	d00b      	beq.n	8004d42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4a4a      	ldr	r2, [pc, #296]	; (8004e5c <UART_AdvFeatureConfig+0x144>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	0019      	movs	r1, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d46:	2202      	movs	r2, #2
 8004d48:	4013      	ands	r3, r2
 8004d4a:	d00b      	beq.n	8004d64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	4a43      	ldr	r2, [pc, #268]	; (8004e60 <UART_AdvFeatureConfig+0x148>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	0019      	movs	r1, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	430a      	orrs	r2, r1
 8004d62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	2204      	movs	r2, #4
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	d00b      	beq.n	8004d86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	4a3b      	ldr	r2, [pc, #236]	; (8004e64 <UART_AdvFeatureConfig+0x14c>)
 8004d76:	4013      	ands	r3, r2
 8004d78:	0019      	movs	r1, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8a:	2208      	movs	r2, #8
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d00b      	beq.n	8004da8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	4a34      	ldr	r2, [pc, #208]	; (8004e68 <UART_AdvFeatureConfig+0x150>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	2210      	movs	r2, #16
 8004dae:	4013      	ands	r3, r2
 8004db0:	d00b      	beq.n	8004dca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	4a2c      	ldr	r2, [pc, #176]	; (8004e6c <UART_AdvFeatureConfig+0x154>)
 8004dba:	4013      	ands	r3, r2
 8004dbc:	0019      	movs	r1, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dce:	2220      	movs	r2, #32
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d00b      	beq.n	8004dec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	4a25      	ldr	r2, [pc, #148]	; (8004e70 <UART_AdvFeatureConfig+0x158>)
 8004ddc:	4013      	ands	r3, r2
 8004dde:	0019      	movs	r1, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df0:	2240      	movs	r2, #64	; 0x40
 8004df2:	4013      	ands	r3, r2
 8004df4:	d01d      	beq.n	8004e32 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	4a1d      	ldr	r2, [pc, #116]	; (8004e74 <UART_AdvFeatureConfig+0x15c>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	0019      	movs	r1, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e12:	2380      	movs	r3, #128	; 0x80
 8004e14:	035b      	lsls	r3, r3, #13
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d10b      	bne.n	8004e32 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	4a15      	ldr	r2, [pc, #84]	; (8004e78 <UART_AdvFeatureConfig+0x160>)
 8004e22:	4013      	ands	r3, r2
 8004e24:	0019      	movs	r1, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e36:	2280      	movs	r2, #128	; 0x80
 8004e38:	4013      	ands	r3, r2
 8004e3a:	d00b      	beq.n	8004e54 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	4a0e      	ldr	r2, [pc, #56]	; (8004e7c <UART_AdvFeatureConfig+0x164>)
 8004e44:	4013      	ands	r3, r2
 8004e46:	0019      	movs	r1, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	605a      	str	r2, [r3, #4]
  }
}
 8004e54:	46c0      	nop			; (mov r8, r8)
 8004e56:	46bd      	mov	sp, r7
 8004e58:	b002      	add	sp, #8
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	fffdffff 	.word	0xfffdffff
 8004e60:	fffeffff 	.word	0xfffeffff
 8004e64:	fffbffff 	.word	0xfffbffff
 8004e68:	ffff7fff 	.word	0xffff7fff
 8004e6c:	ffffefff 	.word	0xffffefff
 8004e70:	ffffdfff 	.word	0xffffdfff
 8004e74:	ffefffff 	.word	0xffefffff
 8004e78:	ff9fffff 	.word	0xff9fffff
 8004e7c:	fff7ffff 	.word	0xfff7ffff

08004e80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	228c      	movs	r2, #140	; 0x8c
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e90:	f7fd ffec 	bl	8002e6c <HAL_GetTick>
 8004e94:	0003      	movs	r3, r0
 8004e96:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2208      	movs	r2, #8
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	2b08      	cmp	r3, #8
 8004ea4:	d10c      	bne.n	8004ec0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2280      	movs	r2, #128	; 0x80
 8004eaa:	0391      	lsls	r1, r2, #14
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	4a18      	ldr	r2, [pc, #96]	; (8004f10 <UART_CheckIdleState+0x90>)
 8004eb0:	9200      	str	r2, [sp, #0]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f000 f82e 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 8004eb8:	1e03      	subs	r3, r0, #0
 8004eba:	d001      	beq.n	8004ec0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e023      	b.n	8004f08 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2204      	movs	r2, #4
 8004ec8:	4013      	ands	r3, r2
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d10c      	bne.n	8004ee8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2280      	movs	r2, #128	; 0x80
 8004ed2:	03d1      	lsls	r1, r2, #15
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	4a0e      	ldr	r2, [pc, #56]	; (8004f10 <UART_CheckIdleState+0x90>)
 8004ed8:	9200      	str	r2, [sp, #0]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f000 f81a 	bl	8004f14 <UART_WaitOnFlagUntilTimeout>
 8004ee0:	1e03      	subs	r3, r0, #0
 8004ee2:	d001      	beq.n	8004ee8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee4:	2303      	movs	r3, #3
 8004ee6:	e00f      	b.n	8004f08 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2284      	movs	r2, #132	; 0x84
 8004eec:	2120      	movs	r1, #32
 8004eee:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2288      	movs	r2, #136	; 0x88
 8004ef4:	2120      	movs	r1, #32
 8004ef6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2280      	movs	r2, #128	; 0x80
 8004f02:	2100      	movs	r1, #0
 8004f04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	0018      	movs	r0, r3
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	b004      	add	sp, #16
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	01ffffff 	.word	0x01ffffff

08004f14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b094      	sub	sp, #80	; 0x50
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	60f8      	str	r0, [r7, #12]
 8004f1c:	60b9      	str	r1, [r7, #8]
 8004f1e:	603b      	str	r3, [r7, #0]
 8004f20:	1dfb      	adds	r3, r7, #7
 8004f22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f24:	e0a7      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f28:	3301      	adds	r3, #1
 8004f2a:	d100      	bne.n	8004f2e <UART_WaitOnFlagUntilTimeout+0x1a>
 8004f2c:	e0a3      	b.n	8005076 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f2e:	f7fd ff9d 	bl	8002e6c <HAL_GetTick>
 8004f32:	0002      	movs	r2, r0
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d302      	bcc.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x30>
 8004f3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d13f      	bne.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f44:	f3ef 8310 	mrs	r3, PRIMASK
 8004f48:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004f4c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f4e:	2301      	movs	r3, #1
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	f383 8810 	msr	PRIMASK, r3
}
 8004f58:	46c0      	nop			; (mov r8, r8)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	494e      	ldr	r1, [pc, #312]	; (80050a0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004f66:	400a      	ands	r2, r1
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f6c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	f383 8810 	msr	PRIMASK, r3
}
 8004f74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f76:	f3ef 8310 	mrs	r3, PRIMASK
 8004f7a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7e:	643b      	str	r3, [r7, #64]	; 0x40
 8004f80:	2301      	movs	r3, #1
 8004f82:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f86:	f383 8810 	msr	PRIMASK, r3
}
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689a      	ldr	r2, [r3, #8]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2101      	movs	r1, #1
 8004f98:	438a      	bics	r2, r1
 8004f9a:	609a      	str	r2, [r3, #8]
 8004f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa2:	f383 8810 	msr	PRIMASK, r3
}
 8004fa6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2284      	movs	r2, #132	; 0x84
 8004fac:	2120      	movs	r1, #32
 8004fae:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	2288      	movs	r2, #136	; 0x88
 8004fb4:	2120      	movs	r1, #32
 8004fb6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2280      	movs	r2, #128	; 0x80
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	e069      	b.n	8005098 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2204      	movs	r2, #4
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d052      	beq.n	8005076 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	69da      	ldr	r2, [r3, #28]
 8004fd6:	2380      	movs	r3, #128	; 0x80
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	401a      	ands	r2, r3
 8004fdc:	2380      	movs	r3, #128	; 0x80
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d148      	bne.n	8005076 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2280      	movs	r2, #128	; 0x80
 8004fea:	0112      	lsls	r2, r2, #4
 8004fec:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fee:	f3ef 8310 	mrs	r3, PRIMASK
 8004ff2:	613b      	str	r3, [r7, #16]
  return(result);
 8004ff4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004ff6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f383 8810 	msr	PRIMASK, r3
}
 8005002:	46c0      	nop			; (mov r8, r8)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4924      	ldr	r1, [pc, #144]	; (80050a0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005010:	400a      	ands	r2, r1
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005016:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	f383 8810 	msr	PRIMASK, r3
}
 800501e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005020:	f3ef 8310 	mrs	r3, PRIMASK
 8005024:	61fb      	str	r3, [r7, #28]
  return(result);
 8005026:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005028:	64bb      	str	r3, [r7, #72]	; 0x48
 800502a:	2301      	movs	r3, #1
 800502c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	f383 8810 	msr	PRIMASK, r3
}
 8005034:	46c0      	nop			; (mov r8, r8)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689a      	ldr	r2, [r3, #8]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2101      	movs	r1, #1
 8005042:	438a      	bics	r2, r1
 8005044:	609a      	str	r2, [r3, #8]
 8005046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005048:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	f383 8810 	msr	PRIMASK, r3
}
 8005050:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2284      	movs	r2, #132	; 0x84
 8005056:	2120      	movs	r1, #32
 8005058:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2288      	movs	r2, #136	; 0x88
 800505e:	2120      	movs	r1, #32
 8005060:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	228c      	movs	r2, #140	; 0x8c
 8005066:	2120      	movs	r1, #32
 8005068:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2280      	movs	r2, #128	; 0x80
 800506e:	2100      	movs	r1, #0
 8005070:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e010      	b.n	8005098 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69db      	ldr	r3, [r3, #28]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	4013      	ands	r3, r2
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	1ad3      	subs	r3, r2, r3
 8005084:	425a      	negs	r2, r3
 8005086:	4153      	adcs	r3, r2
 8005088:	b2db      	uxtb	r3, r3
 800508a:	001a      	movs	r2, r3
 800508c:	1dfb      	adds	r3, r7, #7
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	429a      	cmp	r2, r3
 8005092:	d100      	bne.n	8005096 <UART_WaitOnFlagUntilTimeout+0x182>
 8005094:	e747      	b.n	8004f26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	0018      	movs	r0, r3
 800509a:	46bd      	mov	sp, r7
 800509c:	b014      	add	sp, #80	; 0x50
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	fffffe5f 	.word	0xfffffe5f

080050a4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b084      	sub	sp, #16
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2280      	movs	r2, #128	; 0x80
 80050b0:	5c9b      	ldrb	r3, [r3, r2]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_UARTEx_DisableFifoMode+0x16>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e027      	b.n	800510a <HAL_UARTEx_DisableFifoMode+0x66>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2280      	movs	r2, #128	; 0x80
 80050be:	2101      	movs	r1, #1
 80050c0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2284      	movs	r2, #132	; 0x84
 80050c6:	2124      	movs	r1, #36	; 0x24
 80050c8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2101      	movs	r1, #1
 80050de:	438a      	bics	r2, r1
 80050e0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4a0b      	ldr	r2, [pc, #44]	; (8005114 <HAL_UARTEx_DisableFifoMode+0x70>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2284      	movs	r2, #132	; 0x84
 80050fc:	2120      	movs	r1, #32
 80050fe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2280      	movs	r2, #128	; 0x80
 8005104:	2100      	movs	r1, #0
 8005106:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	0018      	movs	r0, r3
 800510c:	46bd      	mov	sp, r7
 800510e:	b004      	add	sp, #16
 8005110:	bd80      	pop	{r7, pc}
 8005112:	46c0      	nop			; (mov r8, r8)
 8005114:	dfffffff 	.word	0xdfffffff

08005118 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2280      	movs	r2, #128	; 0x80
 8005126:	5c9b      	ldrb	r3, [r3, r2]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800512c:	2302      	movs	r3, #2
 800512e:	e02e      	b.n	800518e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2280      	movs	r2, #128	; 0x80
 8005134:	2101      	movs	r1, #1
 8005136:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2284      	movs	r2, #132	; 0x84
 800513c:	2124      	movs	r1, #36	; 0x24
 800513e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2101      	movs	r1, #1
 8005154:	438a      	bics	r2, r1
 8005156:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	08d9      	lsrs	r1, r3, #3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	0018      	movs	r0, r3
 8005170:	f000 f854 	bl	800521c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2284      	movs	r2, #132	; 0x84
 8005180:	2120      	movs	r1, #32
 8005182:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2280      	movs	r2, #128	; 0x80
 8005188:	2100      	movs	r1, #0
 800518a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	0018      	movs	r0, r3
 8005190:	46bd      	mov	sp, r7
 8005192:	b004      	add	sp, #16
 8005194:	bd80      	pop	{r7, pc}
	...

08005198 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2280      	movs	r2, #128	; 0x80
 80051a6:	5c9b      	ldrb	r3, [r3, r2]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d101      	bne.n	80051b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051ac:	2302      	movs	r3, #2
 80051ae:	e02f      	b.n	8005210 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2280      	movs	r2, #128	; 0x80
 80051b4:	2101      	movs	r1, #1
 80051b6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2284      	movs	r2, #132	; 0x84
 80051bc:	2124      	movs	r1, #36	; 0x24
 80051be:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2101      	movs	r1, #1
 80051d4:	438a      	bics	r2, r1
 80051d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	4a0e      	ldr	r2, [pc, #56]	; (8005218 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	0019      	movs	r1, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	683a      	ldr	r2, [r7, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	0018      	movs	r0, r3
 80051f2:	f000 f813 	bl	800521c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2284      	movs	r2, #132	; 0x84
 8005202:	2120      	movs	r1, #32
 8005204:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2280      	movs	r2, #128	; 0x80
 800520a:	2100      	movs	r1, #0
 800520c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800520e:	2300      	movs	r3, #0
}
 8005210:	0018      	movs	r0, r3
 8005212:	46bd      	mov	sp, r7
 8005214:	b004      	add	sp, #16
 8005216:	bd80      	pop	{r7, pc}
 8005218:	f1ffffff 	.word	0xf1ffffff

0800521c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800521c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800521e:	b085      	sub	sp, #20
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005228:	2b00      	cmp	r3, #0
 800522a:	d108      	bne.n	800523e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	226a      	movs	r2, #106	; 0x6a
 8005230:	2101      	movs	r1, #1
 8005232:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2268      	movs	r2, #104	; 0x68
 8005238:	2101      	movs	r1, #1
 800523a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800523c:	e043      	b.n	80052c6 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800523e:	260f      	movs	r6, #15
 8005240:	19bb      	adds	r3, r7, r6
 8005242:	2208      	movs	r2, #8
 8005244:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005246:	200e      	movs	r0, #14
 8005248:	183b      	adds	r3, r7, r0
 800524a:	2208      	movs	r2, #8
 800524c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	0e5b      	lsrs	r3, r3, #25
 8005256:	b2da      	uxtb	r2, r3
 8005258:	240d      	movs	r4, #13
 800525a:	193b      	adds	r3, r7, r4
 800525c:	2107      	movs	r1, #7
 800525e:	400a      	ands	r2, r1
 8005260:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	0f5b      	lsrs	r3, r3, #29
 800526a:	b2da      	uxtb	r2, r3
 800526c:	250c      	movs	r5, #12
 800526e:	197b      	adds	r3, r7, r5
 8005270:	2107      	movs	r1, #7
 8005272:	400a      	ands	r2, r1
 8005274:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005276:	183b      	adds	r3, r7, r0
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	197a      	adds	r2, r7, r5
 800527c:	7812      	ldrb	r2, [r2, #0]
 800527e:	4914      	ldr	r1, [pc, #80]	; (80052d0 <UARTEx_SetNbDataToProcess+0xb4>)
 8005280:	5c8a      	ldrb	r2, [r1, r2]
 8005282:	435a      	muls	r2, r3
 8005284:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005286:	197b      	adds	r3, r7, r5
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	4a12      	ldr	r2, [pc, #72]	; (80052d4 <UARTEx_SetNbDataToProcess+0xb8>)
 800528c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800528e:	0019      	movs	r1, r3
 8005290:	f7fa ffde 	bl	8000250 <__divsi3>
 8005294:	0003      	movs	r3, r0
 8005296:	b299      	uxth	r1, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	226a      	movs	r2, #106	; 0x6a
 800529c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800529e:	19bb      	adds	r3, r7, r6
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	193a      	adds	r2, r7, r4
 80052a4:	7812      	ldrb	r2, [r2, #0]
 80052a6:	490a      	ldr	r1, [pc, #40]	; (80052d0 <UARTEx_SetNbDataToProcess+0xb4>)
 80052a8:	5c8a      	ldrb	r2, [r1, r2]
 80052aa:	435a      	muls	r2, r3
 80052ac:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80052ae:	193b      	adds	r3, r7, r4
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	4a08      	ldr	r2, [pc, #32]	; (80052d4 <UARTEx_SetNbDataToProcess+0xb8>)
 80052b4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052b6:	0019      	movs	r1, r3
 80052b8:	f7fa ffca 	bl	8000250 <__divsi3>
 80052bc:	0003      	movs	r3, r0
 80052be:	b299      	uxth	r1, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2268      	movs	r2, #104	; 0x68
 80052c4:	5299      	strh	r1, [r3, r2]
}
 80052c6:	46c0      	nop			; (mov r8, r8)
 80052c8:	46bd      	mov	sp, r7
 80052ca:	b005      	add	sp, #20
 80052cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ce:	46c0      	nop			; (mov r8, r8)
 80052d0:	080083a0 	.word	0x080083a0
 80052d4:	080083a8 	.word	0x080083a8

080052d8 <__errno>:
 80052d8:	4b01      	ldr	r3, [pc, #4]	; (80052e0 <__errno+0x8>)
 80052da:	6818      	ldr	r0, [r3, #0]
 80052dc:	4770      	bx	lr
 80052de:	46c0      	nop			; (mov r8, r8)
 80052e0:	2000000c 	.word	0x2000000c

080052e4 <__libc_init_array>:
 80052e4:	b570      	push	{r4, r5, r6, lr}
 80052e6:	2600      	movs	r6, #0
 80052e8:	4d0c      	ldr	r5, [pc, #48]	; (800531c <__libc_init_array+0x38>)
 80052ea:	4c0d      	ldr	r4, [pc, #52]	; (8005320 <__libc_init_array+0x3c>)
 80052ec:	1b64      	subs	r4, r4, r5
 80052ee:	10a4      	asrs	r4, r4, #2
 80052f0:	42a6      	cmp	r6, r4
 80052f2:	d109      	bne.n	8005308 <__libc_init_array+0x24>
 80052f4:	2600      	movs	r6, #0
 80052f6:	f002 ffbb 	bl	8008270 <_init>
 80052fa:	4d0a      	ldr	r5, [pc, #40]	; (8005324 <__libc_init_array+0x40>)
 80052fc:	4c0a      	ldr	r4, [pc, #40]	; (8005328 <__libc_init_array+0x44>)
 80052fe:	1b64      	subs	r4, r4, r5
 8005300:	10a4      	asrs	r4, r4, #2
 8005302:	42a6      	cmp	r6, r4
 8005304:	d105      	bne.n	8005312 <__libc_init_array+0x2e>
 8005306:	bd70      	pop	{r4, r5, r6, pc}
 8005308:	00b3      	lsls	r3, r6, #2
 800530a:	58eb      	ldr	r3, [r5, r3]
 800530c:	4798      	blx	r3
 800530e:	3601      	adds	r6, #1
 8005310:	e7ee      	b.n	80052f0 <__libc_init_array+0xc>
 8005312:	00b3      	lsls	r3, r6, #2
 8005314:	58eb      	ldr	r3, [r5, r3]
 8005316:	4798      	blx	r3
 8005318:	3601      	adds	r6, #1
 800531a:	e7f2      	b.n	8005302 <__libc_init_array+0x1e>
 800531c:	08008794 	.word	0x08008794
 8005320:	08008794 	.word	0x08008794
 8005324:	08008794 	.word	0x08008794
 8005328:	08008798 	.word	0x08008798

0800532c <memset>:
 800532c:	0003      	movs	r3, r0
 800532e:	1882      	adds	r2, r0, r2
 8005330:	4293      	cmp	r3, r2
 8005332:	d100      	bne.n	8005336 <memset+0xa>
 8005334:	4770      	bx	lr
 8005336:	7019      	strb	r1, [r3, #0]
 8005338:	3301      	adds	r3, #1
 800533a:	e7f9      	b.n	8005330 <memset+0x4>

0800533c <__cvt>:
 800533c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800533e:	001e      	movs	r6, r3
 8005340:	2300      	movs	r3, #0
 8005342:	0014      	movs	r4, r2
 8005344:	b08b      	sub	sp, #44	; 0x2c
 8005346:	429e      	cmp	r6, r3
 8005348:	da04      	bge.n	8005354 <__cvt+0x18>
 800534a:	2180      	movs	r1, #128	; 0x80
 800534c:	0609      	lsls	r1, r1, #24
 800534e:	1873      	adds	r3, r6, r1
 8005350:	001e      	movs	r6, r3
 8005352:	232d      	movs	r3, #45	; 0x2d
 8005354:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005356:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005358:	7013      	strb	r3, [r2, #0]
 800535a:	2320      	movs	r3, #32
 800535c:	2203      	movs	r2, #3
 800535e:	439f      	bics	r7, r3
 8005360:	2f46      	cmp	r7, #70	; 0x46
 8005362:	d007      	beq.n	8005374 <__cvt+0x38>
 8005364:	003b      	movs	r3, r7
 8005366:	3b45      	subs	r3, #69	; 0x45
 8005368:	4259      	negs	r1, r3
 800536a:	414b      	adcs	r3, r1
 800536c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800536e:	3a01      	subs	r2, #1
 8005370:	18cb      	adds	r3, r1, r3
 8005372:	9310      	str	r3, [sp, #64]	; 0x40
 8005374:	ab09      	add	r3, sp, #36	; 0x24
 8005376:	9304      	str	r3, [sp, #16]
 8005378:	ab08      	add	r3, sp, #32
 800537a:	9303      	str	r3, [sp, #12]
 800537c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800537e:	9200      	str	r2, [sp, #0]
 8005380:	9302      	str	r3, [sp, #8]
 8005382:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005384:	0022      	movs	r2, r4
 8005386:	9301      	str	r3, [sp, #4]
 8005388:	0033      	movs	r3, r6
 800538a:	f000 fcf1 	bl	8005d70 <_dtoa_r>
 800538e:	0005      	movs	r5, r0
 8005390:	2f47      	cmp	r7, #71	; 0x47
 8005392:	d102      	bne.n	800539a <__cvt+0x5e>
 8005394:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005396:	07db      	lsls	r3, r3, #31
 8005398:	d528      	bpl.n	80053ec <__cvt+0xb0>
 800539a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800539c:	18eb      	adds	r3, r5, r3
 800539e:	9307      	str	r3, [sp, #28]
 80053a0:	2f46      	cmp	r7, #70	; 0x46
 80053a2:	d114      	bne.n	80053ce <__cvt+0x92>
 80053a4:	782b      	ldrb	r3, [r5, #0]
 80053a6:	2b30      	cmp	r3, #48	; 0x30
 80053a8:	d10c      	bne.n	80053c4 <__cvt+0x88>
 80053aa:	2200      	movs	r2, #0
 80053ac:	2300      	movs	r3, #0
 80053ae:	0020      	movs	r0, r4
 80053b0:	0031      	movs	r1, r6
 80053b2:	f7fb f849 	bl	8000448 <__aeabi_dcmpeq>
 80053b6:	2800      	cmp	r0, #0
 80053b8:	d104      	bne.n	80053c4 <__cvt+0x88>
 80053ba:	2301      	movs	r3, #1
 80053bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80053be:	1a9b      	subs	r3, r3, r2
 80053c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80053c6:	9a07      	ldr	r2, [sp, #28]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	18d3      	adds	r3, r2, r3
 80053cc:	9307      	str	r3, [sp, #28]
 80053ce:	2200      	movs	r2, #0
 80053d0:	2300      	movs	r3, #0
 80053d2:	0020      	movs	r0, r4
 80053d4:	0031      	movs	r1, r6
 80053d6:	f7fb f837 	bl	8000448 <__aeabi_dcmpeq>
 80053da:	2800      	cmp	r0, #0
 80053dc:	d001      	beq.n	80053e2 <__cvt+0xa6>
 80053de:	9b07      	ldr	r3, [sp, #28]
 80053e0:	9309      	str	r3, [sp, #36]	; 0x24
 80053e2:	2230      	movs	r2, #48	; 0x30
 80053e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e6:	9907      	ldr	r1, [sp, #28]
 80053e8:	428b      	cmp	r3, r1
 80053ea:	d306      	bcc.n	80053fa <__cvt+0xbe>
 80053ec:	0028      	movs	r0, r5
 80053ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80053f2:	1b5b      	subs	r3, r3, r5
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	b00b      	add	sp, #44	; 0x2c
 80053f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053fa:	1c59      	adds	r1, r3, #1
 80053fc:	9109      	str	r1, [sp, #36]	; 0x24
 80053fe:	701a      	strb	r2, [r3, #0]
 8005400:	e7f0      	b.n	80053e4 <__cvt+0xa8>

08005402 <__exponent>:
 8005402:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005404:	1c83      	adds	r3, r0, #2
 8005406:	b087      	sub	sp, #28
 8005408:	9303      	str	r3, [sp, #12]
 800540a:	0005      	movs	r5, r0
 800540c:	000c      	movs	r4, r1
 800540e:	232b      	movs	r3, #43	; 0x2b
 8005410:	7002      	strb	r2, [r0, #0]
 8005412:	2900      	cmp	r1, #0
 8005414:	da01      	bge.n	800541a <__exponent+0x18>
 8005416:	424c      	negs	r4, r1
 8005418:	3302      	adds	r3, #2
 800541a:	706b      	strb	r3, [r5, #1]
 800541c:	2c09      	cmp	r4, #9
 800541e:	dd31      	ble.n	8005484 <__exponent+0x82>
 8005420:	270a      	movs	r7, #10
 8005422:	ab04      	add	r3, sp, #16
 8005424:	1dde      	adds	r6, r3, #7
 8005426:	0020      	movs	r0, r4
 8005428:	0039      	movs	r1, r7
 800542a:	9601      	str	r6, [sp, #4]
 800542c:	f7fa fff6 	bl	800041c <__aeabi_idivmod>
 8005430:	3e01      	subs	r6, #1
 8005432:	3130      	adds	r1, #48	; 0x30
 8005434:	0020      	movs	r0, r4
 8005436:	7031      	strb	r1, [r6, #0]
 8005438:	0039      	movs	r1, r7
 800543a:	9402      	str	r4, [sp, #8]
 800543c:	f7fa ff08 	bl	8000250 <__divsi3>
 8005440:	9b02      	ldr	r3, [sp, #8]
 8005442:	0004      	movs	r4, r0
 8005444:	2b63      	cmp	r3, #99	; 0x63
 8005446:	dcee      	bgt.n	8005426 <__exponent+0x24>
 8005448:	9b01      	ldr	r3, [sp, #4]
 800544a:	3430      	adds	r4, #48	; 0x30
 800544c:	1e9a      	subs	r2, r3, #2
 800544e:	0013      	movs	r3, r2
 8005450:	9903      	ldr	r1, [sp, #12]
 8005452:	7014      	strb	r4, [r2, #0]
 8005454:	a804      	add	r0, sp, #16
 8005456:	3007      	adds	r0, #7
 8005458:	4298      	cmp	r0, r3
 800545a:	d80e      	bhi.n	800547a <__exponent+0x78>
 800545c:	ab04      	add	r3, sp, #16
 800545e:	3307      	adds	r3, #7
 8005460:	2000      	movs	r0, #0
 8005462:	429a      	cmp	r2, r3
 8005464:	d804      	bhi.n	8005470 <__exponent+0x6e>
 8005466:	ab04      	add	r3, sp, #16
 8005468:	3009      	adds	r0, #9
 800546a:	18c0      	adds	r0, r0, r3
 800546c:	9b01      	ldr	r3, [sp, #4]
 800546e:	1ac0      	subs	r0, r0, r3
 8005470:	9b03      	ldr	r3, [sp, #12]
 8005472:	1818      	adds	r0, r3, r0
 8005474:	1b40      	subs	r0, r0, r5
 8005476:	b007      	add	sp, #28
 8005478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800547a:	7818      	ldrb	r0, [r3, #0]
 800547c:	3301      	adds	r3, #1
 800547e:	7008      	strb	r0, [r1, #0]
 8005480:	3101      	adds	r1, #1
 8005482:	e7e7      	b.n	8005454 <__exponent+0x52>
 8005484:	2330      	movs	r3, #48	; 0x30
 8005486:	18e4      	adds	r4, r4, r3
 8005488:	70ab      	strb	r3, [r5, #2]
 800548a:	1d28      	adds	r0, r5, #4
 800548c:	70ec      	strb	r4, [r5, #3]
 800548e:	e7f1      	b.n	8005474 <__exponent+0x72>

08005490 <_printf_float>:
 8005490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005492:	b095      	sub	sp, #84	; 0x54
 8005494:	000c      	movs	r4, r1
 8005496:	9209      	str	r2, [sp, #36]	; 0x24
 8005498:	001e      	movs	r6, r3
 800549a:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800549c:	0007      	movs	r7, r0
 800549e:	f001 fa81 	bl	80069a4 <_localeconv_r>
 80054a2:	6803      	ldr	r3, [r0, #0]
 80054a4:	0018      	movs	r0, r3
 80054a6:	930c      	str	r3, [sp, #48]	; 0x30
 80054a8:	f7fa fe2c 	bl	8000104 <strlen>
 80054ac:	2300      	movs	r3, #0
 80054ae:	9312      	str	r3, [sp, #72]	; 0x48
 80054b0:	7e23      	ldrb	r3, [r4, #24]
 80054b2:	2207      	movs	r2, #7
 80054b4:	930a      	str	r3, [sp, #40]	; 0x28
 80054b6:	6823      	ldr	r3, [r4, #0]
 80054b8:	900e      	str	r0, [sp, #56]	; 0x38
 80054ba:	930d      	str	r3, [sp, #52]	; 0x34
 80054bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80054be:	682b      	ldr	r3, [r5, #0]
 80054c0:	05c9      	lsls	r1, r1, #23
 80054c2:	d547      	bpl.n	8005554 <_printf_float+0xc4>
 80054c4:	189b      	adds	r3, r3, r2
 80054c6:	4393      	bics	r3, r2
 80054c8:	001a      	movs	r2, r3
 80054ca:	3208      	adds	r2, #8
 80054cc:	602a      	str	r2, [r5, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	64a2      	str	r2, [r4, #72]	; 0x48
 80054d4:	64e3      	str	r3, [r4, #76]	; 0x4c
 80054d6:	2201      	movs	r2, #1
 80054d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80054da:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 80054dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80054de:	006b      	lsls	r3, r5, #1
 80054e0:	085b      	lsrs	r3, r3, #1
 80054e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80054e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80054e6:	4ba7      	ldr	r3, [pc, #668]	; (8005784 <_printf_float+0x2f4>)
 80054e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80054ea:	4252      	negs	r2, r2
 80054ec:	f7fc fe02 	bl	80020f4 <__aeabi_dcmpun>
 80054f0:	2800      	cmp	r0, #0
 80054f2:	d131      	bne.n	8005558 <_printf_float+0xc8>
 80054f4:	2201      	movs	r2, #1
 80054f6:	4ba3      	ldr	r3, [pc, #652]	; (8005784 <_printf_float+0x2f4>)
 80054f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80054fa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80054fc:	4252      	negs	r2, r2
 80054fe:	f7fa ffb3 	bl	8000468 <__aeabi_dcmple>
 8005502:	2800      	cmp	r0, #0
 8005504:	d128      	bne.n	8005558 <_printf_float+0xc8>
 8005506:	2200      	movs	r2, #0
 8005508:	2300      	movs	r3, #0
 800550a:	0029      	movs	r1, r5
 800550c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800550e:	f7fa ffa1 	bl	8000454 <__aeabi_dcmplt>
 8005512:	2800      	cmp	r0, #0
 8005514:	d003      	beq.n	800551e <_printf_float+0x8e>
 8005516:	0023      	movs	r3, r4
 8005518:	222d      	movs	r2, #45	; 0x2d
 800551a:	3343      	adds	r3, #67	; 0x43
 800551c:	701a      	strb	r2, [r3, #0]
 800551e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005520:	4d99      	ldr	r5, [pc, #612]	; (8005788 <_printf_float+0x2f8>)
 8005522:	2b47      	cmp	r3, #71	; 0x47
 8005524:	d900      	bls.n	8005528 <_printf_float+0x98>
 8005526:	4d99      	ldr	r5, [pc, #612]	; (800578c <_printf_float+0x2fc>)
 8005528:	2303      	movs	r3, #3
 800552a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800552c:	6123      	str	r3, [r4, #16]
 800552e:	3301      	adds	r3, #1
 8005530:	439a      	bics	r2, r3
 8005532:	2300      	movs	r3, #0
 8005534:	6022      	str	r2, [r4, #0]
 8005536:	930b      	str	r3, [sp, #44]	; 0x2c
 8005538:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800553a:	0021      	movs	r1, r4
 800553c:	0038      	movs	r0, r7
 800553e:	9600      	str	r6, [sp, #0]
 8005540:	aa13      	add	r2, sp, #76	; 0x4c
 8005542:	f000 f9e7 	bl	8005914 <_printf_common>
 8005546:	1c43      	adds	r3, r0, #1
 8005548:	d000      	beq.n	800554c <_printf_float+0xbc>
 800554a:	e0a2      	b.n	8005692 <_printf_float+0x202>
 800554c:	2001      	movs	r0, #1
 800554e:	4240      	negs	r0, r0
 8005550:	b015      	add	sp, #84	; 0x54
 8005552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005554:	3307      	adds	r3, #7
 8005556:	e7b6      	b.n	80054c6 <_printf_float+0x36>
 8005558:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800555a:	002b      	movs	r3, r5
 800555c:	0010      	movs	r0, r2
 800555e:	0029      	movs	r1, r5
 8005560:	f7fc fdc8 	bl	80020f4 <__aeabi_dcmpun>
 8005564:	2800      	cmp	r0, #0
 8005566:	d00b      	beq.n	8005580 <_printf_float+0xf0>
 8005568:	2d00      	cmp	r5, #0
 800556a:	da03      	bge.n	8005574 <_printf_float+0xe4>
 800556c:	0023      	movs	r3, r4
 800556e:	222d      	movs	r2, #45	; 0x2d
 8005570:	3343      	adds	r3, #67	; 0x43
 8005572:	701a      	strb	r2, [r3, #0]
 8005574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005576:	4d86      	ldr	r5, [pc, #536]	; (8005790 <_printf_float+0x300>)
 8005578:	2b47      	cmp	r3, #71	; 0x47
 800557a:	d9d5      	bls.n	8005528 <_printf_float+0x98>
 800557c:	4d85      	ldr	r5, [pc, #532]	; (8005794 <_printf_float+0x304>)
 800557e:	e7d3      	b.n	8005528 <_printf_float+0x98>
 8005580:	2220      	movs	r2, #32
 8005582:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005584:	6863      	ldr	r3, [r4, #4]
 8005586:	4391      	bics	r1, r2
 8005588:	910f      	str	r1, [sp, #60]	; 0x3c
 800558a:	1c5a      	adds	r2, r3, #1
 800558c:	d149      	bne.n	8005622 <_printf_float+0x192>
 800558e:	3307      	adds	r3, #7
 8005590:	6063      	str	r3, [r4, #4]
 8005592:	2380      	movs	r3, #128	; 0x80
 8005594:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	4313      	orrs	r3, r2
 800559a:	2200      	movs	r2, #0
 800559c:	9206      	str	r2, [sp, #24]
 800559e:	aa12      	add	r2, sp, #72	; 0x48
 80055a0:	9205      	str	r2, [sp, #20]
 80055a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80055a4:	a908      	add	r1, sp, #32
 80055a6:	9204      	str	r2, [sp, #16]
 80055a8:	aa11      	add	r2, sp, #68	; 0x44
 80055aa:	9203      	str	r2, [sp, #12]
 80055ac:	2223      	movs	r2, #35	; 0x23
 80055ae:	6023      	str	r3, [r4, #0]
 80055b0:	9301      	str	r3, [sp, #4]
 80055b2:	6863      	ldr	r3, [r4, #4]
 80055b4:	1852      	adds	r2, r2, r1
 80055b6:	9202      	str	r2, [sp, #8]
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	0038      	movs	r0, r7
 80055bc:	002b      	movs	r3, r5
 80055be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055c0:	f7ff febc 	bl	800533c <__cvt>
 80055c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055c6:	0005      	movs	r5, r0
 80055c8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80055ca:	2b47      	cmp	r3, #71	; 0x47
 80055cc:	d108      	bne.n	80055e0 <_printf_float+0x150>
 80055ce:	1ccb      	adds	r3, r1, #3
 80055d0:	db02      	blt.n	80055d8 <_printf_float+0x148>
 80055d2:	6863      	ldr	r3, [r4, #4]
 80055d4:	4299      	cmp	r1, r3
 80055d6:	dd48      	ble.n	800566a <_printf_float+0x1da>
 80055d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055da:	3b02      	subs	r3, #2
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	930a      	str	r3, [sp, #40]	; 0x28
 80055e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055e2:	2b65      	cmp	r3, #101	; 0x65
 80055e4:	d824      	bhi.n	8005630 <_printf_float+0x1a0>
 80055e6:	0020      	movs	r0, r4
 80055e8:	001a      	movs	r2, r3
 80055ea:	3901      	subs	r1, #1
 80055ec:	3050      	adds	r0, #80	; 0x50
 80055ee:	9111      	str	r1, [sp, #68]	; 0x44
 80055f0:	f7ff ff07 	bl	8005402 <__exponent>
 80055f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80055f6:	900b      	str	r0, [sp, #44]	; 0x2c
 80055f8:	1813      	adds	r3, r2, r0
 80055fa:	6123      	str	r3, [r4, #16]
 80055fc:	2a01      	cmp	r2, #1
 80055fe:	dc02      	bgt.n	8005606 <_printf_float+0x176>
 8005600:	6822      	ldr	r2, [r4, #0]
 8005602:	07d2      	lsls	r2, r2, #31
 8005604:	d501      	bpl.n	800560a <_printf_float+0x17a>
 8005606:	3301      	adds	r3, #1
 8005608:	6123      	str	r3, [r4, #16]
 800560a:	2323      	movs	r3, #35	; 0x23
 800560c:	aa08      	add	r2, sp, #32
 800560e:	189b      	adds	r3, r3, r2
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d100      	bne.n	8005618 <_printf_float+0x188>
 8005616:	e78f      	b.n	8005538 <_printf_float+0xa8>
 8005618:	0023      	movs	r3, r4
 800561a:	222d      	movs	r2, #45	; 0x2d
 800561c:	3343      	adds	r3, #67	; 0x43
 800561e:	701a      	strb	r2, [r3, #0]
 8005620:	e78a      	b.n	8005538 <_printf_float+0xa8>
 8005622:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005624:	2a47      	cmp	r2, #71	; 0x47
 8005626:	d1b4      	bne.n	8005592 <_printf_float+0x102>
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1b2      	bne.n	8005592 <_printf_float+0x102>
 800562c:	3301      	adds	r3, #1
 800562e:	e7af      	b.n	8005590 <_printf_float+0x100>
 8005630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005632:	2b66      	cmp	r3, #102	; 0x66
 8005634:	d11b      	bne.n	800566e <_printf_float+0x1de>
 8005636:	6863      	ldr	r3, [r4, #4]
 8005638:	2900      	cmp	r1, #0
 800563a:	dd0d      	ble.n	8005658 <_printf_float+0x1c8>
 800563c:	6121      	str	r1, [r4, #16]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d102      	bne.n	8005648 <_printf_float+0x1b8>
 8005642:	6822      	ldr	r2, [r4, #0]
 8005644:	07d2      	lsls	r2, r2, #31
 8005646:	d502      	bpl.n	800564e <_printf_float+0x1be>
 8005648:	3301      	adds	r3, #1
 800564a:	1859      	adds	r1, r3, r1
 800564c:	6121      	str	r1, [r4, #16]
 800564e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005650:	65a3      	str	r3, [r4, #88]	; 0x58
 8005652:	2300      	movs	r3, #0
 8005654:	930b      	str	r3, [sp, #44]	; 0x2c
 8005656:	e7d8      	b.n	800560a <_printf_float+0x17a>
 8005658:	2b00      	cmp	r3, #0
 800565a:	d103      	bne.n	8005664 <_printf_float+0x1d4>
 800565c:	2201      	movs	r2, #1
 800565e:	6821      	ldr	r1, [r4, #0]
 8005660:	4211      	tst	r1, r2
 8005662:	d000      	beq.n	8005666 <_printf_float+0x1d6>
 8005664:	1c9a      	adds	r2, r3, #2
 8005666:	6122      	str	r2, [r4, #16]
 8005668:	e7f1      	b.n	800564e <_printf_float+0x1be>
 800566a:	2367      	movs	r3, #103	; 0x67
 800566c:	930a      	str	r3, [sp, #40]	; 0x28
 800566e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005670:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005672:	4293      	cmp	r3, r2
 8005674:	db06      	blt.n	8005684 <_printf_float+0x1f4>
 8005676:	6822      	ldr	r2, [r4, #0]
 8005678:	6123      	str	r3, [r4, #16]
 800567a:	07d2      	lsls	r2, r2, #31
 800567c:	d5e7      	bpl.n	800564e <_printf_float+0x1be>
 800567e:	3301      	adds	r3, #1
 8005680:	6123      	str	r3, [r4, #16]
 8005682:	e7e4      	b.n	800564e <_printf_float+0x1be>
 8005684:	2101      	movs	r1, #1
 8005686:	2b00      	cmp	r3, #0
 8005688:	dc01      	bgt.n	800568e <_printf_float+0x1fe>
 800568a:	1849      	adds	r1, r1, r1
 800568c:	1ac9      	subs	r1, r1, r3
 800568e:	1852      	adds	r2, r2, r1
 8005690:	e7e9      	b.n	8005666 <_printf_float+0x1d6>
 8005692:	6822      	ldr	r2, [r4, #0]
 8005694:	0553      	lsls	r3, r2, #21
 8005696:	d407      	bmi.n	80056a8 <_printf_float+0x218>
 8005698:	6923      	ldr	r3, [r4, #16]
 800569a:	002a      	movs	r2, r5
 800569c:	0038      	movs	r0, r7
 800569e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056a0:	47b0      	blx	r6
 80056a2:	1c43      	adds	r3, r0, #1
 80056a4:	d128      	bne.n	80056f8 <_printf_float+0x268>
 80056a6:	e751      	b.n	800554c <_printf_float+0xbc>
 80056a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056aa:	2b65      	cmp	r3, #101	; 0x65
 80056ac:	d800      	bhi.n	80056b0 <_printf_float+0x220>
 80056ae:	e0e1      	b.n	8005874 <_printf_float+0x3e4>
 80056b0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80056b2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80056b4:	2200      	movs	r2, #0
 80056b6:	2300      	movs	r3, #0
 80056b8:	f7fa fec6 	bl	8000448 <__aeabi_dcmpeq>
 80056bc:	2800      	cmp	r0, #0
 80056be:	d031      	beq.n	8005724 <_printf_float+0x294>
 80056c0:	2301      	movs	r3, #1
 80056c2:	0038      	movs	r0, r7
 80056c4:	4a34      	ldr	r2, [pc, #208]	; (8005798 <_printf_float+0x308>)
 80056c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056c8:	47b0      	blx	r6
 80056ca:	1c43      	adds	r3, r0, #1
 80056cc:	d100      	bne.n	80056d0 <_printf_float+0x240>
 80056ce:	e73d      	b.n	800554c <_printf_float+0xbc>
 80056d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80056d4:	4293      	cmp	r3, r2
 80056d6:	db02      	blt.n	80056de <_printf_float+0x24e>
 80056d8:	6823      	ldr	r3, [r4, #0]
 80056da:	07db      	lsls	r3, r3, #31
 80056dc:	d50c      	bpl.n	80056f8 <_printf_float+0x268>
 80056de:	0038      	movs	r0, r7
 80056e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056e6:	47b0      	blx	r6
 80056e8:	2500      	movs	r5, #0
 80056ea:	1c43      	adds	r3, r0, #1
 80056ec:	d100      	bne.n	80056f0 <_printf_float+0x260>
 80056ee:	e72d      	b.n	800554c <_printf_float+0xbc>
 80056f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80056f2:	3b01      	subs	r3, #1
 80056f4:	42ab      	cmp	r3, r5
 80056f6:	dc0a      	bgt.n	800570e <_printf_float+0x27e>
 80056f8:	6823      	ldr	r3, [r4, #0]
 80056fa:	079b      	lsls	r3, r3, #30
 80056fc:	d500      	bpl.n	8005700 <_printf_float+0x270>
 80056fe:	e106      	b.n	800590e <_printf_float+0x47e>
 8005700:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005702:	68e0      	ldr	r0, [r4, #12]
 8005704:	4298      	cmp	r0, r3
 8005706:	db00      	blt.n	800570a <_printf_float+0x27a>
 8005708:	e722      	b.n	8005550 <_printf_float+0xc0>
 800570a:	0018      	movs	r0, r3
 800570c:	e720      	b.n	8005550 <_printf_float+0xc0>
 800570e:	0022      	movs	r2, r4
 8005710:	2301      	movs	r3, #1
 8005712:	0038      	movs	r0, r7
 8005714:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005716:	321a      	adds	r2, #26
 8005718:	47b0      	blx	r6
 800571a:	1c43      	adds	r3, r0, #1
 800571c:	d100      	bne.n	8005720 <_printf_float+0x290>
 800571e:	e715      	b.n	800554c <_printf_float+0xbc>
 8005720:	3501      	adds	r5, #1
 8005722:	e7e5      	b.n	80056f0 <_printf_float+0x260>
 8005724:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005726:	2b00      	cmp	r3, #0
 8005728:	dc38      	bgt.n	800579c <_printf_float+0x30c>
 800572a:	2301      	movs	r3, #1
 800572c:	0038      	movs	r0, r7
 800572e:	4a1a      	ldr	r2, [pc, #104]	; (8005798 <_printf_float+0x308>)
 8005730:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005732:	47b0      	blx	r6
 8005734:	1c43      	adds	r3, r0, #1
 8005736:	d100      	bne.n	800573a <_printf_float+0x2aa>
 8005738:	e708      	b.n	800554c <_printf_float+0xbc>
 800573a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800573c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800573e:	4313      	orrs	r3, r2
 8005740:	d102      	bne.n	8005748 <_printf_float+0x2b8>
 8005742:	6823      	ldr	r3, [r4, #0]
 8005744:	07db      	lsls	r3, r3, #31
 8005746:	d5d7      	bpl.n	80056f8 <_printf_float+0x268>
 8005748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800574a:	0038      	movs	r0, r7
 800574c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800574e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005750:	47b0      	blx	r6
 8005752:	1c43      	adds	r3, r0, #1
 8005754:	d100      	bne.n	8005758 <_printf_float+0x2c8>
 8005756:	e6f9      	b.n	800554c <_printf_float+0xbc>
 8005758:	2300      	movs	r3, #0
 800575a:	930a      	str	r3, [sp, #40]	; 0x28
 800575c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800575e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005760:	425b      	negs	r3, r3
 8005762:	4293      	cmp	r3, r2
 8005764:	dc01      	bgt.n	800576a <_printf_float+0x2da>
 8005766:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005768:	e797      	b.n	800569a <_printf_float+0x20a>
 800576a:	0022      	movs	r2, r4
 800576c:	2301      	movs	r3, #1
 800576e:	0038      	movs	r0, r7
 8005770:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005772:	321a      	adds	r2, #26
 8005774:	47b0      	blx	r6
 8005776:	1c43      	adds	r3, r0, #1
 8005778:	d100      	bne.n	800577c <_printf_float+0x2ec>
 800577a:	e6e7      	b.n	800554c <_printf_float+0xbc>
 800577c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800577e:	3301      	adds	r3, #1
 8005780:	e7eb      	b.n	800575a <_printf_float+0x2ca>
 8005782:	46c0      	nop			; (mov r8, r8)
 8005784:	7fefffff 	.word	0x7fefffff
 8005788:	080083b4 	.word	0x080083b4
 800578c:	080083b8 	.word	0x080083b8
 8005790:	080083bc 	.word	0x080083bc
 8005794:	080083c0 	.word	0x080083c0
 8005798:	080083c4 	.word	0x080083c4
 800579c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800579e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057a0:	920a      	str	r2, [sp, #40]	; 0x28
 80057a2:	429a      	cmp	r2, r3
 80057a4:	dd00      	ble.n	80057a8 <_printf_float+0x318>
 80057a6:	930a      	str	r3, [sp, #40]	; 0x28
 80057a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	dc3c      	bgt.n	8005828 <_printf_float+0x398>
 80057ae:	2300      	movs	r3, #0
 80057b0:	930d      	str	r3, [sp, #52]	; 0x34
 80057b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057b4:	43db      	mvns	r3, r3
 80057b6:	17db      	asrs	r3, r3, #31
 80057b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80057ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80057bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057be:	930b      	str	r3, [sp, #44]	; 0x2c
 80057c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057c2:	4013      	ands	r3, r2
 80057c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80057ca:	4293      	cmp	r3, r2
 80057cc:	dc34      	bgt.n	8005838 <_printf_float+0x3a8>
 80057ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80057d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80057d2:	4293      	cmp	r3, r2
 80057d4:	db3d      	blt.n	8005852 <_printf_float+0x3c2>
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	07db      	lsls	r3, r3, #31
 80057da:	d43a      	bmi.n	8005852 <_printf_float+0x3c2>
 80057dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80057de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057e0:	9911      	ldr	r1, [sp, #68]	; 0x44
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	1a52      	subs	r2, r2, r1
 80057e6:	920a      	str	r2, [sp, #40]	; 0x28
 80057e8:	429a      	cmp	r2, r3
 80057ea:	dd00      	ble.n	80057ee <_printf_float+0x35e>
 80057ec:	930a      	str	r3, [sp, #40]	; 0x28
 80057ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	dc36      	bgt.n	8005862 <_printf_float+0x3d2>
 80057f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057f6:	2500      	movs	r5, #0
 80057f8:	43db      	mvns	r3, r3
 80057fa:	17db      	asrs	r3, r3, #31
 80057fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80057fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8005800:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005802:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005804:	1a9b      	subs	r3, r3, r2
 8005806:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005808:	400a      	ands	r2, r1
 800580a:	1a9b      	subs	r3, r3, r2
 800580c:	42ab      	cmp	r3, r5
 800580e:	dc00      	bgt.n	8005812 <_printf_float+0x382>
 8005810:	e772      	b.n	80056f8 <_printf_float+0x268>
 8005812:	0022      	movs	r2, r4
 8005814:	2301      	movs	r3, #1
 8005816:	0038      	movs	r0, r7
 8005818:	9909      	ldr	r1, [sp, #36]	; 0x24
 800581a:	321a      	adds	r2, #26
 800581c:	47b0      	blx	r6
 800581e:	1c43      	adds	r3, r0, #1
 8005820:	d100      	bne.n	8005824 <_printf_float+0x394>
 8005822:	e693      	b.n	800554c <_printf_float+0xbc>
 8005824:	3501      	adds	r5, #1
 8005826:	e7ea      	b.n	80057fe <_printf_float+0x36e>
 8005828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800582a:	002a      	movs	r2, r5
 800582c:	0038      	movs	r0, r7
 800582e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005830:	47b0      	blx	r6
 8005832:	1c43      	adds	r3, r0, #1
 8005834:	d1bb      	bne.n	80057ae <_printf_float+0x31e>
 8005836:	e689      	b.n	800554c <_printf_float+0xbc>
 8005838:	0022      	movs	r2, r4
 800583a:	2301      	movs	r3, #1
 800583c:	0038      	movs	r0, r7
 800583e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005840:	321a      	adds	r2, #26
 8005842:	47b0      	blx	r6
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d100      	bne.n	800584a <_printf_float+0x3ba>
 8005848:	e680      	b.n	800554c <_printf_float+0xbc>
 800584a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800584c:	3301      	adds	r3, #1
 800584e:	930d      	str	r3, [sp, #52]	; 0x34
 8005850:	e7b3      	b.n	80057ba <_printf_float+0x32a>
 8005852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005854:	0038      	movs	r0, r7
 8005856:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005858:	9909      	ldr	r1, [sp, #36]	; 0x24
 800585a:	47b0      	blx	r6
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	d1bd      	bne.n	80057dc <_printf_float+0x34c>
 8005860:	e674      	b.n	800554c <_printf_float+0xbc>
 8005862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005864:	0038      	movs	r0, r7
 8005866:	18ea      	adds	r2, r5, r3
 8005868:	9909      	ldr	r1, [sp, #36]	; 0x24
 800586a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800586c:	47b0      	blx	r6
 800586e:	1c43      	adds	r3, r0, #1
 8005870:	d1c0      	bne.n	80057f4 <_printf_float+0x364>
 8005872:	e66b      	b.n	800554c <_printf_float+0xbc>
 8005874:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005876:	2b01      	cmp	r3, #1
 8005878:	dc02      	bgt.n	8005880 <_printf_float+0x3f0>
 800587a:	2301      	movs	r3, #1
 800587c:	421a      	tst	r2, r3
 800587e:	d034      	beq.n	80058ea <_printf_float+0x45a>
 8005880:	2301      	movs	r3, #1
 8005882:	002a      	movs	r2, r5
 8005884:	0038      	movs	r0, r7
 8005886:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005888:	47b0      	blx	r6
 800588a:	1c43      	adds	r3, r0, #1
 800588c:	d100      	bne.n	8005890 <_printf_float+0x400>
 800588e:	e65d      	b.n	800554c <_printf_float+0xbc>
 8005890:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005892:	0038      	movs	r0, r7
 8005894:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005896:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005898:	47b0      	blx	r6
 800589a:	1c43      	adds	r3, r0, #1
 800589c:	d100      	bne.n	80058a0 <_printf_float+0x410>
 800589e:	e655      	b.n	800554c <_printf_float+0xbc>
 80058a0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80058a2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80058a4:	2200      	movs	r2, #0
 80058a6:	2300      	movs	r3, #0
 80058a8:	f7fa fdce 	bl	8000448 <__aeabi_dcmpeq>
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d11a      	bne.n	80058e6 <_printf_float+0x456>
 80058b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058b2:	1c6a      	adds	r2, r5, #1
 80058b4:	3b01      	subs	r3, #1
 80058b6:	0038      	movs	r0, r7
 80058b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058ba:	47b0      	blx	r6
 80058bc:	1c43      	adds	r3, r0, #1
 80058be:	d10e      	bne.n	80058de <_printf_float+0x44e>
 80058c0:	e644      	b.n	800554c <_printf_float+0xbc>
 80058c2:	0022      	movs	r2, r4
 80058c4:	2301      	movs	r3, #1
 80058c6:	0038      	movs	r0, r7
 80058c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058ca:	321a      	adds	r2, #26
 80058cc:	47b0      	blx	r6
 80058ce:	1c43      	adds	r3, r0, #1
 80058d0:	d100      	bne.n	80058d4 <_printf_float+0x444>
 80058d2:	e63b      	b.n	800554c <_printf_float+0xbc>
 80058d4:	3501      	adds	r5, #1
 80058d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80058d8:	3b01      	subs	r3, #1
 80058da:	42ab      	cmp	r3, r5
 80058dc:	dcf1      	bgt.n	80058c2 <_printf_float+0x432>
 80058de:	0022      	movs	r2, r4
 80058e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058e2:	3250      	adds	r2, #80	; 0x50
 80058e4:	e6da      	b.n	800569c <_printf_float+0x20c>
 80058e6:	2500      	movs	r5, #0
 80058e8:	e7f5      	b.n	80058d6 <_printf_float+0x446>
 80058ea:	002a      	movs	r2, r5
 80058ec:	e7e3      	b.n	80058b6 <_printf_float+0x426>
 80058ee:	0022      	movs	r2, r4
 80058f0:	2301      	movs	r3, #1
 80058f2:	0038      	movs	r0, r7
 80058f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058f6:	3219      	adds	r2, #25
 80058f8:	47b0      	blx	r6
 80058fa:	1c43      	adds	r3, r0, #1
 80058fc:	d100      	bne.n	8005900 <_printf_float+0x470>
 80058fe:	e625      	b.n	800554c <_printf_float+0xbc>
 8005900:	3501      	adds	r5, #1
 8005902:	68e3      	ldr	r3, [r4, #12]
 8005904:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005906:	1a9b      	subs	r3, r3, r2
 8005908:	42ab      	cmp	r3, r5
 800590a:	dcf0      	bgt.n	80058ee <_printf_float+0x45e>
 800590c:	e6f8      	b.n	8005700 <_printf_float+0x270>
 800590e:	2500      	movs	r5, #0
 8005910:	e7f7      	b.n	8005902 <_printf_float+0x472>
 8005912:	46c0      	nop			; (mov r8, r8)

08005914 <_printf_common>:
 8005914:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005916:	0015      	movs	r5, r2
 8005918:	9301      	str	r3, [sp, #4]
 800591a:	688a      	ldr	r2, [r1, #8]
 800591c:	690b      	ldr	r3, [r1, #16]
 800591e:	000c      	movs	r4, r1
 8005920:	9000      	str	r0, [sp, #0]
 8005922:	4293      	cmp	r3, r2
 8005924:	da00      	bge.n	8005928 <_printf_common+0x14>
 8005926:	0013      	movs	r3, r2
 8005928:	0022      	movs	r2, r4
 800592a:	602b      	str	r3, [r5, #0]
 800592c:	3243      	adds	r2, #67	; 0x43
 800592e:	7812      	ldrb	r2, [r2, #0]
 8005930:	2a00      	cmp	r2, #0
 8005932:	d001      	beq.n	8005938 <_printf_common+0x24>
 8005934:	3301      	adds	r3, #1
 8005936:	602b      	str	r3, [r5, #0]
 8005938:	6823      	ldr	r3, [r4, #0]
 800593a:	069b      	lsls	r3, r3, #26
 800593c:	d502      	bpl.n	8005944 <_printf_common+0x30>
 800593e:	682b      	ldr	r3, [r5, #0]
 8005940:	3302      	adds	r3, #2
 8005942:	602b      	str	r3, [r5, #0]
 8005944:	6822      	ldr	r2, [r4, #0]
 8005946:	2306      	movs	r3, #6
 8005948:	0017      	movs	r7, r2
 800594a:	401f      	ands	r7, r3
 800594c:	421a      	tst	r2, r3
 800594e:	d027      	beq.n	80059a0 <_printf_common+0x8c>
 8005950:	0023      	movs	r3, r4
 8005952:	3343      	adds	r3, #67	; 0x43
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	1e5a      	subs	r2, r3, #1
 8005958:	4193      	sbcs	r3, r2
 800595a:	6822      	ldr	r2, [r4, #0]
 800595c:	0692      	lsls	r2, r2, #26
 800595e:	d430      	bmi.n	80059c2 <_printf_common+0xae>
 8005960:	0022      	movs	r2, r4
 8005962:	9901      	ldr	r1, [sp, #4]
 8005964:	9800      	ldr	r0, [sp, #0]
 8005966:	9e08      	ldr	r6, [sp, #32]
 8005968:	3243      	adds	r2, #67	; 0x43
 800596a:	47b0      	blx	r6
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d025      	beq.n	80059bc <_printf_common+0xa8>
 8005970:	2306      	movs	r3, #6
 8005972:	6820      	ldr	r0, [r4, #0]
 8005974:	682a      	ldr	r2, [r5, #0]
 8005976:	68e1      	ldr	r1, [r4, #12]
 8005978:	2500      	movs	r5, #0
 800597a:	4003      	ands	r3, r0
 800597c:	2b04      	cmp	r3, #4
 800597e:	d103      	bne.n	8005988 <_printf_common+0x74>
 8005980:	1a8d      	subs	r5, r1, r2
 8005982:	43eb      	mvns	r3, r5
 8005984:	17db      	asrs	r3, r3, #31
 8005986:	401d      	ands	r5, r3
 8005988:	68a3      	ldr	r3, [r4, #8]
 800598a:	6922      	ldr	r2, [r4, #16]
 800598c:	4293      	cmp	r3, r2
 800598e:	dd01      	ble.n	8005994 <_printf_common+0x80>
 8005990:	1a9b      	subs	r3, r3, r2
 8005992:	18ed      	adds	r5, r5, r3
 8005994:	2700      	movs	r7, #0
 8005996:	42bd      	cmp	r5, r7
 8005998:	d120      	bne.n	80059dc <_printf_common+0xc8>
 800599a:	2000      	movs	r0, #0
 800599c:	e010      	b.n	80059c0 <_printf_common+0xac>
 800599e:	3701      	adds	r7, #1
 80059a0:	68e3      	ldr	r3, [r4, #12]
 80059a2:	682a      	ldr	r2, [r5, #0]
 80059a4:	1a9b      	subs	r3, r3, r2
 80059a6:	42bb      	cmp	r3, r7
 80059a8:	ddd2      	ble.n	8005950 <_printf_common+0x3c>
 80059aa:	0022      	movs	r2, r4
 80059ac:	2301      	movs	r3, #1
 80059ae:	9901      	ldr	r1, [sp, #4]
 80059b0:	9800      	ldr	r0, [sp, #0]
 80059b2:	9e08      	ldr	r6, [sp, #32]
 80059b4:	3219      	adds	r2, #25
 80059b6:	47b0      	blx	r6
 80059b8:	1c43      	adds	r3, r0, #1
 80059ba:	d1f0      	bne.n	800599e <_printf_common+0x8a>
 80059bc:	2001      	movs	r0, #1
 80059be:	4240      	negs	r0, r0
 80059c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059c2:	2030      	movs	r0, #48	; 0x30
 80059c4:	18e1      	adds	r1, r4, r3
 80059c6:	3143      	adds	r1, #67	; 0x43
 80059c8:	7008      	strb	r0, [r1, #0]
 80059ca:	0021      	movs	r1, r4
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	3145      	adds	r1, #69	; 0x45
 80059d0:	7809      	ldrb	r1, [r1, #0]
 80059d2:	18a2      	adds	r2, r4, r2
 80059d4:	3243      	adds	r2, #67	; 0x43
 80059d6:	3302      	adds	r3, #2
 80059d8:	7011      	strb	r1, [r2, #0]
 80059da:	e7c1      	b.n	8005960 <_printf_common+0x4c>
 80059dc:	0022      	movs	r2, r4
 80059de:	2301      	movs	r3, #1
 80059e0:	9901      	ldr	r1, [sp, #4]
 80059e2:	9800      	ldr	r0, [sp, #0]
 80059e4:	9e08      	ldr	r6, [sp, #32]
 80059e6:	321a      	adds	r2, #26
 80059e8:	47b0      	blx	r6
 80059ea:	1c43      	adds	r3, r0, #1
 80059ec:	d0e6      	beq.n	80059bc <_printf_common+0xa8>
 80059ee:	3701      	adds	r7, #1
 80059f0:	e7d1      	b.n	8005996 <_printf_common+0x82>
	...

080059f4 <_printf_i>:
 80059f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059f6:	b08b      	sub	sp, #44	; 0x2c
 80059f8:	9206      	str	r2, [sp, #24]
 80059fa:	000a      	movs	r2, r1
 80059fc:	3243      	adds	r2, #67	; 0x43
 80059fe:	9307      	str	r3, [sp, #28]
 8005a00:	9005      	str	r0, [sp, #20]
 8005a02:	9204      	str	r2, [sp, #16]
 8005a04:	7e0a      	ldrb	r2, [r1, #24]
 8005a06:	000c      	movs	r4, r1
 8005a08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a0a:	2a78      	cmp	r2, #120	; 0x78
 8005a0c:	d807      	bhi.n	8005a1e <_printf_i+0x2a>
 8005a0e:	2a62      	cmp	r2, #98	; 0x62
 8005a10:	d809      	bhi.n	8005a26 <_printf_i+0x32>
 8005a12:	2a00      	cmp	r2, #0
 8005a14:	d100      	bne.n	8005a18 <_printf_i+0x24>
 8005a16:	e0c1      	b.n	8005b9c <_printf_i+0x1a8>
 8005a18:	2a58      	cmp	r2, #88	; 0x58
 8005a1a:	d100      	bne.n	8005a1e <_printf_i+0x2a>
 8005a1c:	e08c      	b.n	8005b38 <_printf_i+0x144>
 8005a1e:	0026      	movs	r6, r4
 8005a20:	3642      	adds	r6, #66	; 0x42
 8005a22:	7032      	strb	r2, [r6, #0]
 8005a24:	e022      	b.n	8005a6c <_printf_i+0x78>
 8005a26:	0010      	movs	r0, r2
 8005a28:	3863      	subs	r0, #99	; 0x63
 8005a2a:	2815      	cmp	r0, #21
 8005a2c:	d8f7      	bhi.n	8005a1e <_printf_i+0x2a>
 8005a2e:	f7fa fb7b 	bl	8000128 <__gnu_thumb1_case_shi>
 8005a32:	0016      	.short	0x0016
 8005a34:	fff6001f 	.word	0xfff6001f
 8005a38:	fff6fff6 	.word	0xfff6fff6
 8005a3c:	001ffff6 	.word	0x001ffff6
 8005a40:	fff6fff6 	.word	0xfff6fff6
 8005a44:	fff6fff6 	.word	0xfff6fff6
 8005a48:	003600a8 	.word	0x003600a8
 8005a4c:	fff6009a 	.word	0xfff6009a
 8005a50:	00b9fff6 	.word	0x00b9fff6
 8005a54:	0036fff6 	.word	0x0036fff6
 8005a58:	fff6fff6 	.word	0xfff6fff6
 8005a5c:	009e      	.short	0x009e
 8005a5e:	0026      	movs	r6, r4
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	3642      	adds	r6, #66	; 0x42
 8005a64:	1d11      	adds	r1, r2, #4
 8005a66:	6019      	str	r1, [r3, #0]
 8005a68:	6813      	ldr	r3, [r2, #0]
 8005a6a:	7033      	strb	r3, [r6, #0]
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e0a7      	b.n	8005bc0 <_printf_i+0x1cc>
 8005a70:	6808      	ldr	r0, [r1, #0]
 8005a72:	6819      	ldr	r1, [r3, #0]
 8005a74:	1d0a      	adds	r2, r1, #4
 8005a76:	0605      	lsls	r5, r0, #24
 8005a78:	d50b      	bpl.n	8005a92 <_printf_i+0x9e>
 8005a7a:	680d      	ldr	r5, [r1, #0]
 8005a7c:	601a      	str	r2, [r3, #0]
 8005a7e:	2d00      	cmp	r5, #0
 8005a80:	da03      	bge.n	8005a8a <_printf_i+0x96>
 8005a82:	232d      	movs	r3, #45	; 0x2d
 8005a84:	9a04      	ldr	r2, [sp, #16]
 8005a86:	426d      	negs	r5, r5
 8005a88:	7013      	strb	r3, [r2, #0]
 8005a8a:	4b61      	ldr	r3, [pc, #388]	; (8005c10 <_printf_i+0x21c>)
 8005a8c:	270a      	movs	r7, #10
 8005a8e:	9303      	str	r3, [sp, #12]
 8005a90:	e01b      	b.n	8005aca <_printf_i+0xd6>
 8005a92:	680d      	ldr	r5, [r1, #0]
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	0641      	lsls	r1, r0, #25
 8005a98:	d5f1      	bpl.n	8005a7e <_printf_i+0x8a>
 8005a9a:	b22d      	sxth	r5, r5
 8005a9c:	e7ef      	b.n	8005a7e <_printf_i+0x8a>
 8005a9e:	680d      	ldr	r5, [r1, #0]
 8005aa0:	6819      	ldr	r1, [r3, #0]
 8005aa2:	1d08      	adds	r0, r1, #4
 8005aa4:	6018      	str	r0, [r3, #0]
 8005aa6:	062e      	lsls	r6, r5, #24
 8005aa8:	d501      	bpl.n	8005aae <_printf_i+0xba>
 8005aaa:	680d      	ldr	r5, [r1, #0]
 8005aac:	e003      	b.n	8005ab6 <_printf_i+0xc2>
 8005aae:	066d      	lsls	r5, r5, #25
 8005ab0:	d5fb      	bpl.n	8005aaa <_printf_i+0xb6>
 8005ab2:	680d      	ldr	r5, [r1, #0]
 8005ab4:	b2ad      	uxth	r5, r5
 8005ab6:	4b56      	ldr	r3, [pc, #344]	; (8005c10 <_printf_i+0x21c>)
 8005ab8:	2708      	movs	r7, #8
 8005aba:	9303      	str	r3, [sp, #12]
 8005abc:	2a6f      	cmp	r2, #111	; 0x6f
 8005abe:	d000      	beq.n	8005ac2 <_printf_i+0xce>
 8005ac0:	3702      	adds	r7, #2
 8005ac2:	0023      	movs	r3, r4
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	3343      	adds	r3, #67	; 0x43
 8005ac8:	701a      	strb	r2, [r3, #0]
 8005aca:	6863      	ldr	r3, [r4, #4]
 8005acc:	60a3      	str	r3, [r4, #8]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	db03      	blt.n	8005ada <_printf_i+0xe6>
 8005ad2:	2204      	movs	r2, #4
 8005ad4:	6821      	ldr	r1, [r4, #0]
 8005ad6:	4391      	bics	r1, r2
 8005ad8:	6021      	str	r1, [r4, #0]
 8005ada:	2d00      	cmp	r5, #0
 8005adc:	d102      	bne.n	8005ae4 <_printf_i+0xf0>
 8005ade:	9e04      	ldr	r6, [sp, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00c      	beq.n	8005afe <_printf_i+0x10a>
 8005ae4:	9e04      	ldr	r6, [sp, #16]
 8005ae6:	0028      	movs	r0, r5
 8005ae8:	0039      	movs	r1, r7
 8005aea:	f7fa fbad 	bl	8000248 <__aeabi_uidivmod>
 8005aee:	9b03      	ldr	r3, [sp, #12]
 8005af0:	3e01      	subs	r6, #1
 8005af2:	5c5b      	ldrb	r3, [r3, r1]
 8005af4:	7033      	strb	r3, [r6, #0]
 8005af6:	002b      	movs	r3, r5
 8005af8:	0005      	movs	r5, r0
 8005afa:	429f      	cmp	r7, r3
 8005afc:	d9f3      	bls.n	8005ae6 <_printf_i+0xf2>
 8005afe:	2f08      	cmp	r7, #8
 8005b00:	d109      	bne.n	8005b16 <_printf_i+0x122>
 8005b02:	6823      	ldr	r3, [r4, #0]
 8005b04:	07db      	lsls	r3, r3, #31
 8005b06:	d506      	bpl.n	8005b16 <_printf_i+0x122>
 8005b08:	6863      	ldr	r3, [r4, #4]
 8005b0a:	6922      	ldr	r2, [r4, #16]
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	dc02      	bgt.n	8005b16 <_printf_i+0x122>
 8005b10:	2330      	movs	r3, #48	; 0x30
 8005b12:	3e01      	subs	r6, #1
 8005b14:	7033      	strb	r3, [r6, #0]
 8005b16:	9b04      	ldr	r3, [sp, #16]
 8005b18:	1b9b      	subs	r3, r3, r6
 8005b1a:	6123      	str	r3, [r4, #16]
 8005b1c:	9b07      	ldr	r3, [sp, #28]
 8005b1e:	0021      	movs	r1, r4
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	9805      	ldr	r0, [sp, #20]
 8005b24:	9b06      	ldr	r3, [sp, #24]
 8005b26:	aa09      	add	r2, sp, #36	; 0x24
 8005b28:	f7ff fef4 	bl	8005914 <_printf_common>
 8005b2c:	1c43      	adds	r3, r0, #1
 8005b2e:	d14c      	bne.n	8005bca <_printf_i+0x1d6>
 8005b30:	2001      	movs	r0, #1
 8005b32:	4240      	negs	r0, r0
 8005b34:	b00b      	add	sp, #44	; 0x2c
 8005b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b38:	3145      	adds	r1, #69	; 0x45
 8005b3a:	700a      	strb	r2, [r1, #0]
 8005b3c:	4a34      	ldr	r2, [pc, #208]	; (8005c10 <_printf_i+0x21c>)
 8005b3e:	9203      	str	r2, [sp, #12]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	6821      	ldr	r1, [r4, #0]
 8005b44:	ca20      	ldmia	r2!, {r5}
 8005b46:	601a      	str	r2, [r3, #0]
 8005b48:	0608      	lsls	r0, r1, #24
 8005b4a:	d516      	bpl.n	8005b7a <_printf_i+0x186>
 8005b4c:	07cb      	lsls	r3, r1, #31
 8005b4e:	d502      	bpl.n	8005b56 <_printf_i+0x162>
 8005b50:	2320      	movs	r3, #32
 8005b52:	4319      	orrs	r1, r3
 8005b54:	6021      	str	r1, [r4, #0]
 8005b56:	2710      	movs	r7, #16
 8005b58:	2d00      	cmp	r5, #0
 8005b5a:	d1b2      	bne.n	8005ac2 <_printf_i+0xce>
 8005b5c:	2320      	movs	r3, #32
 8005b5e:	6822      	ldr	r2, [r4, #0]
 8005b60:	439a      	bics	r2, r3
 8005b62:	6022      	str	r2, [r4, #0]
 8005b64:	e7ad      	b.n	8005ac2 <_printf_i+0xce>
 8005b66:	2220      	movs	r2, #32
 8005b68:	6809      	ldr	r1, [r1, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	6022      	str	r2, [r4, #0]
 8005b6e:	0022      	movs	r2, r4
 8005b70:	2178      	movs	r1, #120	; 0x78
 8005b72:	3245      	adds	r2, #69	; 0x45
 8005b74:	7011      	strb	r1, [r2, #0]
 8005b76:	4a27      	ldr	r2, [pc, #156]	; (8005c14 <_printf_i+0x220>)
 8005b78:	e7e1      	b.n	8005b3e <_printf_i+0x14a>
 8005b7a:	0648      	lsls	r0, r1, #25
 8005b7c:	d5e6      	bpl.n	8005b4c <_printf_i+0x158>
 8005b7e:	b2ad      	uxth	r5, r5
 8005b80:	e7e4      	b.n	8005b4c <_printf_i+0x158>
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	680d      	ldr	r5, [r1, #0]
 8005b86:	1d10      	adds	r0, r2, #4
 8005b88:	6949      	ldr	r1, [r1, #20]
 8005b8a:	6018      	str	r0, [r3, #0]
 8005b8c:	6813      	ldr	r3, [r2, #0]
 8005b8e:	062e      	lsls	r6, r5, #24
 8005b90:	d501      	bpl.n	8005b96 <_printf_i+0x1a2>
 8005b92:	6019      	str	r1, [r3, #0]
 8005b94:	e002      	b.n	8005b9c <_printf_i+0x1a8>
 8005b96:	066d      	lsls	r5, r5, #25
 8005b98:	d5fb      	bpl.n	8005b92 <_printf_i+0x19e>
 8005b9a:	8019      	strh	r1, [r3, #0]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9e04      	ldr	r6, [sp, #16]
 8005ba0:	6123      	str	r3, [r4, #16]
 8005ba2:	e7bb      	b.n	8005b1c <_printf_i+0x128>
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	1d11      	adds	r1, r2, #4
 8005ba8:	6019      	str	r1, [r3, #0]
 8005baa:	6816      	ldr	r6, [r2, #0]
 8005bac:	2100      	movs	r1, #0
 8005bae:	0030      	movs	r0, r6
 8005bb0:	6862      	ldr	r2, [r4, #4]
 8005bb2:	f000 ff05 	bl	80069c0 <memchr>
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d001      	beq.n	8005bbe <_printf_i+0x1ca>
 8005bba:	1b80      	subs	r0, r0, r6
 8005bbc:	6060      	str	r0, [r4, #4]
 8005bbe:	6863      	ldr	r3, [r4, #4]
 8005bc0:	6123      	str	r3, [r4, #16]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	9a04      	ldr	r2, [sp, #16]
 8005bc6:	7013      	strb	r3, [r2, #0]
 8005bc8:	e7a8      	b.n	8005b1c <_printf_i+0x128>
 8005bca:	6923      	ldr	r3, [r4, #16]
 8005bcc:	0032      	movs	r2, r6
 8005bce:	9906      	ldr	r1, [sp, #24]
 8005bd0:	9805      	ldr	r0, [sp, #20]
 8005bd2:	9d07      	ldr	r5, [sp, #28]
 8005bd4:	47a8      	blx	r5
 8005bd6:	1c43      	adds	r3, r0, #1
 8005bd8:	d0aa      	beq.n	8005b30 <_printf_i+0x13c>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	079b      	lsls	r3, r3, #30
 8005bde:	d415      	bmi.n	8005c0c <_printf_i+0x218>
 8005be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005be2:	68e0      	ldr	r0, [r4, #12]
 8005be4:	4298      	cmp	r0, r3
 8005be6:	daa5      	bge.n	8005b34 <_printf_i+0x140>
 8005be8:	0018      	movs	r0, r3
 8005bea:	e7a3      	b.n	8005b34 <_printf_i+0x140>
 8005bec:	0022      	movs	r2, r4
 8005bee:	2301      	movs	r3, #1
 8005bf0:	9906      	ldr	r1, [sp, #24]
 8005bf2:	9805      	ldr	r0, [sp, #20]
 8005bf4:	9e07      	ldr	r6, [sp, #28]
 8005bf6:	3219      	adds	r2, #25
 8005bf8:	47b0      	blx	r6
 8005bfa:	1c43      	adds	r3, r0, #1
 8005bfc:	d098      	beq.n	8005b30 <_printf_i+0x13c>
 8005bfe:	3501      	adds	r5, #1
 8005c00:	68e3      	ldr	r3, [r4, #12]
 8005c02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c04:	1a9b      	subs	r3, r3, r2
 8005c06:	42ab      	cmp	r3, r5
 8005c08:	dcf0      	bgt.n	8005bec <_printf_i+0x1f8>
 8005c0a:	e7e9      	b.n	8005be0 <_printf_i+0x1ec>
 8005c0c:	2500      	movs	r5, #0
 8005c0e:	e7f7      	b.n	8005c00 <_printf_i+0x20c>
 8005c10:	080083c6 	.word	0x080083c6
 8005c14:	080083d7 	.word	0x080083d7

08005c18 <siprintf>:
 8005c18:	b40e      	push	{r1, r2, r3}
 8005c1a:	b500      	push	{lr}
 8005c1c:	490b      	ldr	r1, [pc, #44]	; (8005c4c <siprintf+0x34>)
 8005c1e:	b09c      	sub	sp, #112	; 0x70
 8005c20:	ab1d      	add	r3, sp, #116	; 0x74
 8005c22:	9002      	str	r0, [sp, #8]
 8005c24:	9006      	str	r0, [sp, #24]
 8005c26:	9107      	str	r1, [sp, #28]
 8005c28:	9104      	str	r1, [sp, #16]
 8005c2a:	4809      	ldr	r0, [pc, #36]	; (8005c50 <siprintf+0x38>)
 8005c2c:	4909      	ldr	r1, [pc, #36]	; (8005c54 <siprintf+0x3c>)
 8005c2e:	cb04      	ldmia	r3!, {r2}
 8005c30:	9105      	str	r1, [sp, #20]
 8005c32:	6800      	ldr	r0, [r0, #0]
 8005c34:	a902      	add	r1, sp, #8
 8005c36:	9301      	str	r3, [sp, #4]
 8005c38:	f001 fbe2 	bl	8007400 <_svfiprintf_r>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	9a02      	ldr	r2, [sp, #8]
 8005c40:	7013      	strb	r3, [r2, #0]
 8005c42:	b01c      	add	sp, #112	; 0x70
 8005c44:	bc08      	pop	{r3}
 8005c46:	b003      	add	sp, #12
 8005c48:	4718      	bx	r3
 8005c4a:	46c0      	nop			; (mov r8, r8)
 8005c4c:	7fffffff 	.word	0x7fffffff
 8005c50:	2000000c 	.word	0x2000000c
 8005c54:	ffff0208 	.word	0xffff0208

08005c58 <quorem>:
 8005c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c5a:	0006      	movs	r6, r0
 8005c5c:	690b      	ldr	r3, [r1, #16]
 8005c5e:	6932      	ldr	r2, [r6, #16]
 8005c60:	b087      	sub	sp, #28
 8005c62:	2000      	movs	r0, #0
 8005c64:	9103      	str	r1, [sp, #12]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	db65      	blt.n	8005d36 <quorem+0xde>
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	009c      	lsls	r4, r3, #2
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	000b      	movs	r3, r1
 8005c72:	3314      	adds	r3, #20
 8005c74:	9305      	str	r3, [sp, #20]
 8005c76:	191b      	adds	r3, r3, r4
 8005c78:	9304      	str	r3, [sp, #16]
 8005c7a:	0033      	movs	r3, r6
 8005c7c:	3314      	adds	r3, #20
 8005c7e:	9302      	str	r3, [sp, #8]
 8005c80:	191c      	adds	r4, r3, r4
 8005c82:	9b04      	ldr	r3, [sp, #16]
 8005c84:	6827      	ldr	r7, [r4, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	0038      	movs	r0, r7
 8005c8a:	1c5d      	adds	r5, r3, #1
 8005c8c:	0029      	movs	r1, r5
 8005c8e:	9301      	str	r3, [sp, #4]
 8005c90:	f7fa fa54 	bl	800013c <__udivsi3>
 8005c94:	9001      	str	r0, [sp, #4]
 8005c96:	42af      	cmp	r7, r5
 8005c98:	d324      	bcc.n	8005ce4 <quorem+0x8c>
 8005c9a:	2500      	movs	r5, #0
 8005c9c:	46ac      	mov	ip, r5
 8005c9e:	9802      	ldr	r0, [sp, #8]
 8005ca0:	9f05      	ldr	r7, [sp, #20]
 8005ca2:	cf08      	ldmia	r7!, {r3}
 8005ca4:	9a01      	ldr	r2, [sp, #4]
 8005ca6:	b299      	uxth	r1, r3
 8005ca8:	4351      	muls	r1, r2
 8005caa:	0c1b      	lsrs	r3, r3, #16
 8005cac:	4353      	muls	r3, r2
 8005cae:	1949      	adds	r1, r1, r5
 8005cb0:	0c0a      	lsrs	r2, r1, #16
 8005cb2:	189b      	adds	r3, r3, r2
 8005cb4:	6802      	ldr	r2, [r0, #0]
 8005cb6:	b289      	uxth	r1, r1
 8005cb8:	b292      	uxth	r2, r2
 8005cba:	4462      	add	r2, ip
 8005cbc:	1a52      	subs	r2, r2, r1
 8005cbe:	6801      	ldr	r1, [r0, #0]
 8005cc0:	0c1d      	lsrs	r5, r3, #16
 8005cc2:	0c09      	lsrs	r1, r1, #16
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	1acb      	subs	r3, r1, r3
 8005cc8:	1411      	asrs	r1, r2, #16
 8005cca:	185b      	adds	r3, r3, r1
 8005ccc:	1419      	asrs	r1, r3, #16
 8005cce:	b292      	uxth	r2, r2
 8005cd0:	041b      	lsls	r3, r3, #16
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	9b04      	ldr	r3, [sp, #16]
 8005cd6:	468c      	mov	ip, r1
 8005cd8:	c004      	stmia	r0!, {r2}
 8005cda:	42bb      	cmp	r3, r7
 8005cdc:	d2e1      	bcs.n	8005ca2 <quorem+0x4a>
 8005cde:	6823      	ldr	r3, [r4, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d030      	beq.n	8005d46 <quorem+0xee>
 8005ce4:	0030      	movs	r0, r6
 8005ce6:	9903      	ldr	r1, [sp, #12]
 8005ce8:	f001 f902 	bl	8006ef0 <__mcmp>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	db21      	blt.n	8005d34 <quorem+0xdc>
 8005cf0:	0030      	movs	r0, r6
 8005cf2:	2400      	movs	r4, #0
 8005cf4:	9b01      	ldr	r3, [sp, #4]
 8005cf6:	9903      	ldr	r1, [sp, #12]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	9301      	str	r3, [sp, #4]
 8005cfc:	3014      	adds	r0, #20
 8005cfe:	3114      	adds	r1, #20
 8005d00:	6803      	ldr	r3, [r0, #0]
 8005d02:	c920      	ldmia	r1!, {r5}
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	1914      	adds	r4, r2, r4
 8005d08:	b2aa      	uxth	r2, r5
 8005d0a:	1aa2      	subs	r2, r4, r2
 8005d0c:	0c1b      	lsrs	r3, r3, #16
 8005d0e:	0c2d      	lsrs	r5, r5, #16
 8005d10:	1414      	asrs	r4, r2, #16
 8005d12:	1b5b      	subs	r3, r3, r5
 8005d14:	191b      	adds	r3, r3, r4
 8005d16:	141c      	asrs	r4, r3, #16
 8005d18:	b292      	uxth	r2, r2
 8005d1a:	041b      	lsls	r3, r3, #16
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	c008      	stmia	r0!, {r3}
 8005d20:	9b04      	ldr	r3, [sp, #16]
 8005d22:	428b      	cmp	r3, r1
 8005d24:	d2ec      	bcs.n	8005d00 <quorem+0xa8>
 8005d26:	9b00      	ldr	r3, [sp, #0]
 8005d28:	9a02      	ldr	r2, [sp, #8]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	18d3      	adds	r3, r2, r3
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	2a00      	cmp	r2, #0
 8005d32:	d015      	beq.n	8005d60 <quorem+0x108>
 8005d34:	9801      	ldr	r0, [sp, #4]
 8005d36:	b007      	add	sp, #28
 8005d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d106      	bne.n	8005d4e <quorem+0xf6>
 8005d40:	9b00      	ldr	r3, [sp, #0]
 8005d42:	3b01      	subs	r3, #1
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	9b02      	ldr	r3, [sp, #8]
 8005d48:	3c04      	subs	r4, #4
 8005d4a:	42a3      	cmp	r3, r4
 8005d4c:	d3f5      	bcc.n	8005d3a <quorem+0xe2>
 8005d4e:	9b00      	ldr	r3, [sp, #0]
 8005d50:	6133      	str	r3, [r6, #16]
 8005d52:	e7c7      	b.n	8005ce4 <quorem+0x8c>
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	2a00      	cmp	r2, #0
 8005d58:	d106      	bne.n	8005d68 <quorem+0x110>
 8005d5a:	9a00      	ldr	r2, [sp, #0]
 8005d5c:	3a01      	subs	r2, #1
 8005d5e:	9200      	str	r2, [sp, #0]
 8005d60:	9a02      	ldr	r2, [sp, #8]
 8005d62:	3b04      	subs	r3, #4
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d3f5      	bcc.n	8005d54 <quorem+0xfc>
 8005d68:	9b00      	ldr	r3, [sp, #0]
 8005d6a:	6133      	str	r3, [r6, #16]
 8005d6c:	e7e2      	b.n	8005d34 <quorem+0xdc>
	...

08005d70 <_dtoa_r>:
 8005d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d72:	b09d      	sub	sp, #116	; 0x74
 8005d74:	9202      	str	r2, [sp, #8]
 8005d76:	9303      	str	r3, [sp, #12]
 8005d78:	9b02      	ldr	r3, [sp, #8]
 8005d7a:	9c03      	ldr	r4, [sp, #12]
 8005d7c:	9308      	str	r3, [sp, #32]
 8005d7e:	9409      	str	r4, [sp, #36]	; 0x24
 8005d80:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005d82:	0007      	movs	r7, r0
 8005d84:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8005d86:	2c00      	cmp	r4, #0
 8005d88:	d10e      	bne.n	8005da8 <_dtoa_r+0x38>
 8005d8a:	2010      	movs	r0, #16
 8005d8c:	f000 fe0e 	bl	80069ac <malloc>
 8005d90:	1e02      	subs	r2, r0, #0
 8005d92:	6278      	str	r0, [r7, #36]	; 0x24
 8005d94:	d104      	bne.n	8005da0 <_dtoa_r+0x30>
 8005d96:	21ea      	movs	r1, #234	; 0xea
 8005d98:	4bc7      	ldr	r3, [pc, #796]	; (80060b8 <_dtoa_r+0x348>)
 8005d9a:	48c8      	ldr	r0, [pc, #800]	; (80060bc <_dtoa_r+0x34c>)
 8005d9c:	f001 fc42 	bl	8007624 <__assert_func>
 8005da0:	6044      	str	r4, [r0, #4]
 8005da2:	6084      	str	r4, [r0, #8]
 8005da4:	6004      	str	r4, [r0, #0]
 8005da6:	60c4      	str	r4, [r0, #12]
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	6819      	ldr	r1, [r3, #0]
 8005dac:	2900      	cmp	r1, #0
 8005dae:	d00a      	beq.n	8005dc6 <_dtoa_r+0x56>
 8005db0:	685a      	ldr	r2, [r3, #4]
 8005db2:	2301      	movs	r3, #1
 8005db4:	4093      	lsls	r3, r2
 8005db6:	604a      	str	r2, [r1, #4]
 8005db8:	608b      	str	r3, [r1, #8]
 8005dba:	0038      	movs	r0, r7
 8005dbc:	f000 fe58 	bl	8006a70 <_Bfree>
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	9b03      	ldr	r3, [sp, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	da20      	bge.n	8005e0e <_dtoa_r+0x9e>
 8005dcc:	2301      	movs	r3, #1
 8005dce:	602b      	str	r3, [r5, #0]
 8005dd0:	9b03      	ldr	r3, [sp, #12]
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	085b      	lsrs	r3, r3, #1
 8005dd6:	9309      	str	r3, [sp, #36]	; 0x24
 8005dd8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005dda:	4bb9      	ldr	r3, [pc, #740]	; (80060c0 <_dtoa_r+0x350>)
 8005ddc:	4ab8      	ldr	r2, [pc, #736]	; (80060c0 <_dtoa_r+0x350>)
 8005dde:	402b      	ands	r3, r5
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d117      	bne.n	8005e14 <_dtoa_r+0xa4>
 8005de4:	4bb7      	ldr	r3, [pc, #732]	; (80060c4 <_dtoa_r+0x354>)
 8005de6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005de8:	0328      	lsls	r0, r5, #12
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	9b02      	ldr	r3, [sp, #8]
 8005dee:	0b00      	lsrs	r0, r0, #12
 8005df0:	4318      	orrs	r0, r3
 8005df2:	d101      	bne.n	8005df8 <_dtoa_r+0x88>
 8005df4:	f000 fdbf 	bl	8006976 <_dtoa_r+0xc06>
 8005df8:	48b3      	ldr	r0, [pc, #716]	; (80060c8 <_dtoa_r+0x358>)
 8005dfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005dfc:	9006      	str	r0, [sp, #24]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <_dtoa_r+0x98>
 8005e02:	4bb2      	ldr	r3, [pc, #712]	; (80060cc <_dtoa_r+0x35c>)
 8005e04:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	9806      	ldr	r0, [sp, #24]
 8005e0a:	b01d      	add	sp, #116	; 0x74
 8005e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e0e:	2300      	movs	r3, #0
 8005e10:	602b      	str	r3, [r5, #0]
 8005e12:	e7e1      	b.n	8005dd8 <_dtoa_r+0x68>
 8005e14:	9b08      	ldr	r3, [sp, #32]
 8005e16:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005e18:	9312      	str	r3, [sp, #72]	; 0x48
 8005e1a:	9413      	str	r4, [sp, #76]	; 0x4c
 8005e1c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005e1e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005e20:	2200      	movs	r2, #0
 8005e22:	2300      	movs	r3, #0
 8005e24:	f7fa fb10 	bl	8000448 <__aeabi_dcmpeq>
 8005e28:	1e04      	subs	r4, r0, #0
 8005e2a:	d009      	beq.n	8005e40 <_dtoa_r+0xd0>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e30:	6013      	str	r3, [r2, #0]
 8005e32:	4ba7      	ldr	r3, [pc, #668]	; (80060d0 <_dtoa_r+0x360>)
 8005e34:	9306      	str	r3, [sp, #24]
 8005e36:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0e5      	beq.n	8005e08 <_dtoa_r+0x98>
 8005e3c:	4ba5      	ldr	r3, [pc, #660]	; (80060d4 <_dtoa_r+0x364>)
 8005e3e:	e7e1      	b.n	8005e04 <_dtoa_r+0x94>
 8005e40:	ab1a      	add	r3, sp, #104	; 0x68
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	ab1b      	add	r3, sp, #108	; 0x6c
 8005e46:	9300      	str	r3, [sp, #0]
 8005e48:	0038      	movs	r0, r7
 8005e4a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e4e:	f001 f903 	bl	8007058 <__d2b>
 8005e52:	006e      	lsls	r6, r5, #1
 8005e54:	9005      	str	r0, [sp, #20]
 8005e56:	0d76      	lsrs	r6, r6, #21
 8005e58:	d100      	bne.n	8005e5c <_dtoa_r+0xec>
 8005e5a:	e07c      	b.n	8005f56 <_dtoa_r+0x1e6>
 8005e5c:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005e5e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005e60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005e62:	4a9d      	ldr	r2, [pc, #628]	; (80060d8 <_dtoa_r+0x368>)
 8005e64:	031b      	lsls	r3, r3, #12
 8005e66:	0b1b      	lsrs	r3, r3, #12
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	0011      	movs	r1, r2
 8005e6c:	4b9b      	ldr	r3, [pc, #620]	; (80060dc <_dtoa_r+0x36c>)
 8005e6e:	9418      	str	r4, [sp, #96]	; 0x60
 8005e70:	18f6      	adds	r6, r6, r3
 8005e72:	2200      	movs	r2, #0
 8005e74:	4b9a      	ldr	r3, [pc, #616]	; (80060e0 <_dtoa_r+0x370>)
 8005e76:	f7fb fdab 	bl	80019d0 <__aeabi_dsub>
 8005e7a:	4a9a      	ldr	r2, [pc, #616]	; (80060e4 <_dtoa_r+0x374>)
 8005e7c:	4b9a      	ldr	r3, [pc, #616]	; (80060e8 <_dtoa_r+0x378>)
 8005e7e:	f7fb fb3b 	bl	80014f8 <__aeabi_dmul>
 8005e82:	4a9a      	ldr	r2, [pc, #616]	; (80060ec <_dtoa_r+0x37c>)
 8005e84:	4b9a      	ldr	r3, [pc, #616]	; (80060f0 <_dtoa_r+0x380>)
 8005e86:	f7fa fbf9 	bl	800067c <__aeabi_dadd>
 8005e8a:	0004      	movs	r4, r0
 8005e8c:	0030      	movs	r0, r6
 8005e8e:	000d      	movs	r5, r1
 8005e90:	f7fc f984 	bl	800219c <__aeabi_i2d>
 8005e94:	4a97      	ldr	r2, [pc, #604]	; (80060f4 <_dtoa_r+0x384>)
 8005e96:	4b98      	ldr	r3, [pc, #608]	; (80060f8 <_dtoa_r+0x388>)
 8005e98:	f7fb fb2e 	bl	80014f8 <__aeabi_dmul>
 8005e9c:	0002      	movs	r2, r0
 8005e9e:	000b      	movs	r3, r1
 8005ea0:	0020      	movs	r0, r4
 8005ea2:	0029      	movs	r1, r5
 8005ea4:	f7fa fbea 	bl	800067c <__aeabi_dadd>
 8005ea8:	0004      	movs	r4, r0
 8005eaa:	000d      	movs	r5, r1
 8005eac:	f7fc f940 	bl	8002130 <__aeabi_d2iz>
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	9002      	str	r0, [sp, #8]
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	0020      	movs	r0, r4
 8005eb8:	0029      	movs	r1, r5
 8005eba:	f7fa facb 	bl	8000454 <__aeabi_dcmplt>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d00b      	beq.n	8005eda <_dtoa_r+0x16a>
 8005ec2:	9802      	ldr	r0, [sp, #8]
 8005ec4:	f7fc f96a 	bl	800219c <__aeabi_i2d>
 8005ec8:	002b      	movs	r3, r5
 8005eca:	0022      	movs	r2, r4
 8005ecc:	f7fa fabc 	bl	8000448 <__aeabi_dcmpeq>
 8005ed0:	4243      	negs	r3, r0
 8005ed2:	4158      	adcs	r0, r3
 8005ed4:	9b02      	ldr	r3, [sp, #8]
 8005ed6:	1a1b      	subs	r3, r3, r0
 8005ed8:	9302      	str	r3, [sp, #8]
 8005eda:	2301      	movs	r3, #1
 8005edc:	9316      	str	r3, [sp, #88]	; 0x58
 8005ede:	9b02      	ldr	r3, [sp, #8]
 8005ee0:	2b16      	cmp	r3, #22
 8005ee2:	d80f      	bhi.n	8005f04 <_dtoa_r+0x194>
 8005ee4:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005ee6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8005ee8:	00da      	lsls	r2, r3, #3
 8005eea:	4b84      	ldr	r3, [pc, #528]	; (80060fc <_dtoa_r+0x38c>)
 8005eec:	189b      	adds	r3, r3, r2
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	f7fa faaf 	bl	8000454 <__aeabi_dcmplt>
 8005ef6:	2800      	cmp	r0, #0
 8005ef8:	d049      	beq.n	8005f8e <_dtoa_r+0x21e>
 8005efa:	9b02      	ldr	r3, [sp, #8]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	9302      	str	r3, [sp, #8]
 8005f00:	2300      	movs	r3, #0
 8005f02:	9316      	str	r3, [sp, #88]	; 0x58
 8005f04:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005f06:	1b9e      	subs	r6, r3, r6
 8005f08:	2300      	movs	r3, #0
 8005f0a:	930a      	str	r3, [sp, #40]	; 0x28
 8005f0c:	0033      	movs	r3, r6
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	930d      	str	r3, [sp, #52]	; 0x34
 8005f12:	d504      	bpl.n	8005f1e <_dtoa_r+0x1ae>
 8005f14:	2301      	movs	r3, #1
 8005f16:	1b9b      	subs	r3, r3, r6
 8005f18:	930a      	str	r3, [sp, #40]	; 0x28
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	930d      	str	r3, [sp, #52]	; 0x34
 8005f1e:	9b02      	ldr	r3, [sp, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	db36      	blt.n	8005f92 <_dtoa_r+0x222>
 8005f24:	9a02      	ldr	r2, [sp, #8]
 8005f26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f28:	4694      	mov	ip, r2
 8005f2a:	4463      	add	r3, ip
 8005f2c:	930d      	str	r3, [sp, #52]	; 0x34
 8005f2e:	2300      	movs	r3, #0
 8005f30:	9215      	str	r2, [sp, #84]	; 0x54
 8005f32:	930e      	str	r3, [sp, #56]	; 0x38
 8005f34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f36:	2401      	movs	r4, #1
 8005f38:	2b09      	cmp	r3, #9
 8005f3a:	d864      	bhi.n	8006006 <_dtoa_r+0x296>
 8005f3c:	2b05      	cmp	r3, #5
 8005f3e:	dd02      	ble.n	8005f46 <_dtoa_r+0x1d6>
 8005f40:	2400      	movs	r4, #0
 8005f42:	3b04      	subs	r3, #4
 8005f44:	9322      	str	r3, [sp, #136]	; 0x88
 8005f46:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f48:	1e98      	subs	r0, r3, #2
 8005f4a:	2803      	cmp	r0, #3
 8005f4c:	d864      	bhi.n	8006018 <_dtoa_r+0x2a8>
 8005f4e:	f7fa f8e1 	bl	8000114 <__gnu_thumb1_case_uqi>
 8005f52:	3829      	.short	0x3829
 8005f54:	5836      	.short	0x5836
 8005f56:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8005f58:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8005f5a:	189e      	adds	r6, r3, r2
 8005f5c:	4b68      	ldr	r3, [pc, #416]	; (8006100 <_dtoa_r+0x390>)
 8005f5e:	18f2      	adds	r2, r6, r3
 8005f60:	2a20      	cmp	r2, #32
 8005f62:	dd0f      	ble.n	8005f84 <_dtoa_r+0x214>
 8005f64:	2340      	movs	r3, #64	; 0x40
 8005f66:	1a9b      	subs	r3, r3, r2
 8005f68:	409d      	lsls	r5, r3
 8005f6a:	4b66      	ldr	r3, [pc, #408]	; (8006104 <_dtoa_r+0x394>)
 8005f6c:	9802      	ldr	r0, [sp, #8]
 8005f6e:	18f3      	adds	r3, r6, r3
 8005f70:	40d8      	lsrs	r0, r3
 8005f72:	4328      	orrs	r0, r5
 8005f74:	f7fc f942 	bl	80021fc <__aeabi_ui2d>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	4c63      	ldr	r4, [pc, #396]	; (8006108 <_dtoa_r+0x398>)
 8005f7c:	3e01      	subs	r6, #1
 8005f7e:	1909      	adds	r1, r1, r4
 8005f80:	9318      	str	r3, [sp, #96]	; 0x60
 8005f82:	e776      	b.n	8005e72 <_dtoa_r+0x102>
 8005f84:	2320      	movs	r3, #32
 8005f86:	9802      	ldr	r0, [sp, #8]
 8005f88:	1a9b      	subs	r3, r3, r2
 8005f8a:	4098      	lsls	r0, r3
 8005f8c:	e7f2      	b.n	8005f74 <_dtoa_r+0x204>
 8005f8e:	9016      	str	r0, [sp, #88]	; 0x58
 8005f90:	e7b8      	b.n	8005f04 <_dtoa_r+0x194>
 8005f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f94:	9a02      	ldr	r2, [sp, #8]
 8005f96:	1a9b      	subs	r3, r3, r2
 8005f98:	930a      	str	r3, [sp, #40]	; 0x28
 8005f9a:	4253      	negs	r3, r2
 8005f9c:	930e      	str	r3, [sp, #56]	; 0x38
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	9315      	str	r3, [sp, #84]	; 0x54
 8005fa2:	e7c7      	b.n	8005f34 <_dtoa_r+0x1c4>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fa8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005faa:	930c      	str	r3, [sp, #48]	; 0x30
 8005fac:	9307      	str	r3, [sp, #28]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	dc13      	bgt.n	8005fda <_dtoa_r+0x26a>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	001a      	movs	r2, r3
 8005fb6:	930c      	str	r3, [sp, #48]	; 0x30
 8005fb8:	9307      	str	r3, [sp, #28]
 8005fba:	9223      	str	r2, [sp, #140]	; 0x8c
 8005fbc:	e00d      	b.n	8005fda <_dtoa_r+0x26a>
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e7f1      	b.n	8005fa6 <_dtoa_r+0x236>
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8005fc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fc8:	4694      	mov	ip, r2
 8005fca:	9b02      	ldr	r3, [sp, #8]
 8005fcc:	4463      	add	r3, ip
 8005fce:	930c      	str	r3, [sp, #48]	; 0x30
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	9307      	str	r3, [sp, #28]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	dc00      	bgt.n	8005fda <_dtoa_r+0x26a>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	2200      	movs	r2, #0
 8005fdc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005fde:	6042      	str	r2, [r0, #4]
 8005fe0:	3204      	adds	r2, #4
 8005fe2:	0015      	movs	r5, r2
 8005fe4:	3514      	adds	r5, #20
 8005fe6:	6841      	ldr	r1, [r0, #4]
 8005fe8:	429d      	cmp	r5, r3
 8005fea:	d919      	bls.n	8006020 <_dtoa_r+0x2b0>
 8005fec:	0038      	movs	r0, r7
 8005fee:	f000 fcfb 	bl	80069e8 <_Balloc>
 8005ff2:	9006      	str	r0, [sp, #24]
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d117      	bne.n	8006028 <_dtoa_r+0x2b8>
 8005ff8:	21d5      	movs	r1, #213	; 0xd5
 8005ffa:	0002      	movs	r2, r0
 8005ffc:	4b43      	ldr	r3, [pc, #268]	; (800610c <_dtoa_r+0x39c>)
 8005ffe:	0049      	lsls	r1, r1, #1
 8006000:	e6cb      	b.n	8005d9a <_dtoa_r+0x2a>
 8006002:	2301      	movs	r3, #1
 8006004:	e7de      	b.n	8005fc4 <_dtoa_r+0x254>
 8006006:	2300      	movs	r3, #0
 8006008:	940f      	str	r4, [sp, #60]	; 0x3c
 800600a:	9322      	str	r3, [sp, #136]	; 0x88
 800600c:	3b01      	subs	r3, #1
 800600e:	930c      	str	r3, [sp, #48]	; 0x30
 8006010:	9307      	str	r3, [sp, #28]
 8006012:	2200      	movs	r2, #0
 8006014:	3313      	adds	r3, #19
 8006016:	e7d0      	b.n	8005fba <_dtoa_r+0x24a>
 8006018:	2301      	movs	r3, #1
 800601a:	930f      	str	r3, [sp, #60]	; 0x3c
 800601c:	3b02      	subs	r3, #2
 800601e:	e7f6      	b.n	800600e <_dtoa_r+0x29e>
 8006020:	3101      	adds	r1, #1
 8006022:	6041      	str	r1, [r0, #4]
 8006024:	0052      	lsls	r2, r2, #1
 8006026:	e7dc      	b.n	8005fe2 <_dtoa_r+0x272>
 8006028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602a:	9a06      	ldr	r2, [sp, #24]
 800602c:	601a      	str	r2, [r3, #0]
 800602e:	9b07      	ldr	r3, [sp, #28]
 8006030:	2b0e      	cmp	r3, #14
 8006032:	d900      	bls.n	8006036 <_dtoa_r+0x2c6>
 8006034:	e0eb      	b.n	800620e <_dtoa_r+0x49e>
 8006036:	2c00      	cmp	r4, #0
 8006038:	d100      	bne.n	800603c <_dtoa_r+0x2cc>
 800603a:	e0e8      	b.n	800620e <_dtoa_r+0x49e>
 800603c:	9b02      	ldr	r3, [sp, #8]
 800603e:	2b00      	cmp	r3, #0
 8006040:	dd68      	ble.n	8006114 <_dtoa_r+0x3a4>
 8006042:	001a      	movs	r2, r3
 8006044:	210f      	movs	r1, #15
 8006046:	4b2d      	ldr	r3, [pc, #180]	; (80060fc <_dtoa_r+0x38c>)
 8006048:	400a      	ands	r2, r1
 800604a:	00d2      	lsls	r2, r2, #3
 800604c:	189b      	adds	r3, r3, r2
 800604e:	681d      	ldr	r5, [r3, #0]
 8006050:	685e      	ldr	r6, [r3, #4]
 8006052:	9b02      	ldr	r3, [sp, #8]
 8006054:	111c      	asrs	r4, r3, #4
 8006056:	2302      	movs	r3, #2
 8006058:	9310      	str	r3, [sp, #64]	; 0x40
 800605a:	9b02      	ldr	r3, [sp, #8]
 800605c:	05db      	lsls	r3, r3, #23
 800605e:	d50b      	bpl.n	8006078 <_dtoa_r+0x308>
 8006060:	4b2b      	ldr	r3, [pc, #172]	; (8006110 <_dtoa_r+0x3a0>)
 8006062:	400c      	ands	r4, r1
 8006064:	6a1a      	ldr	r2, [r3, #32]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	9812      	ldr	r0, [sp, #72]	; 0x48
 800606a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800606c:	f7fa fe42 	bl	8000cf4 <__aeabi_ddiv>
 8006070:	2303      	movs	r3, #3
 8006072:	9008      	str	r0, [sp, #32]
 8006074:	9109      	str	r1, [sp, #36]	; 0x24
 8006076:	9310      	str	r3, [sp, #64]	; 0x40
 8006078:	4b25      	ldr	r3, [pc, #148]	; (8006110 <_dtoa_r+0x3a0>)
 800607a:	9314      	str	r3, [sp, #80]	; 0x50
 800607c:	2c00      	cmp	r4, #0
 800607e:	d108      	bne.n	8006092 <_dtoa_r+0x322>
 8006080:	9808      	ldr	r0, [sp, #32]
 8006082:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006084:	002a      	movs	r2, r5
 8006086:	0033      	movs	r3, r6
 8006088:	f7fa fe34 	bl	8000cf4 <__aeabi_ddiv>
 800608c:	9008      	str	r0, [sp, #32]
 800608e:	9109      	str	r1, [sp, #36]	; 0x24
 8006090:	e05c      	b.n	800614c <_dtoa_r+0x3dc>
 8006092:	2301      	movs	r3, #1
 8006094:	421c      	tst	r4, r3
 8006096:	d00b      	beq.n	80060b0 <_dtoa_r+0x340>
 8006098:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800609a:	0028      	movs	r0, r5
 800609c:	3301      	adds	r3, #1
 800609e:	9310      	str	r3, [sp, #64]	; 0x40
 80060a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060a2:	0031      	movs	r1, r6
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f7fb fa26 	bl	80014f8 <__aeabi_dmul>
 80060ac:	0005      	movs	r5, r0
 80060ae:	000e      	movs	r6, r1
 80060b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80060b2:	1064      	asrs	r4, r4, #1
 80060b4:	3308      	adds	r3, #8
 80060b6:	e7e0      	b.n	800607a <_dtoa_r+0x30a>
 80060b8:	080083f5 	.word	0x080083f5
 80060bc:	0800840c 	.word	0x0800840c
 80060c0:	7ff00000 	.word	0x7ff00000
 80060c4:	0000270f 	.word	0x0000270f
 80060c8:	080083f1 	.word	0x080083f1
 80060cc:	080083f4 	.word	0x080083f4
 80060d0:	080083c4 	.word	0x080083c4
 80060d4:	080083c5 	.word	0x080083c5
 80060d8:	3ff00000 	.word	0x3ff00000
 80060dc:	fffffc01 	.word	0xfffffc01
 80060e0:	3ff80000 	.word	0x3ff80000
 80060e4:	636f4361 	.word	0x636f4361
 80060e8:	3fd287a7 	.word	0x3fd287a7
 80060ec:	8b60c8b3 	.word	0x8b60c8b3
 80060f0:	3fc68a28 	.word	0x3fc68a28
 80060f4:	509f79fb 	.word	0x509f79fb
 80060f8:	3fd34413 	.word	0x3fd34413
 80060fc:	08008500 	.word	0x08008500
 8006100:	00000432 	.word	0x00000432
 8006104:	00000412 	.word	0x00000412
 8006108:	fe100000 	.word	0xfe100000
 800610c:	08008467 	.word	0x08008467
 8006110:	080084d8 	.word	0x080084d8
 8006114:	2302      	movs	r3, #2
 8006116:	9310      	str	r3, [sp, #64]	; 0x40
 8006118:	9b02      	ldr	r3, [sp, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d016      	beq.n	800614c <_dtoa_r+0x3dc>
 800611e:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006120:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006122:	425c      	negs	r4, r3
 8006124:	230f      	movs	r3, #15
 8006126:	4ab6      	ldr	r2, [pc, #728]	; (8006400 <_dtoa_r+0x690>)
 8006128:	4023      	ands	r3, r4
 800612a:	00db      	lsls	r3, r3, #3
 800612c:	18d3      	adds	r3, r2, r3
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	f7fb f9e1 	bl	80014f8 <__aeabi_dmul>
 8006136:	2601      	movs	r6, #1
 8006138:	2300      	movs	r3, #0
 800613a:	9008      	str	r0, [sp, #32]
 800613c:	9109      	str	r1, [sp, #36]	; 0x24
 800613e:	4db1      	ldr	r5, [pc, #708]	; (8006404 <_dtoa_r+0x694>)
 8006140:	1124      	asrs	r4, r4, #4
 8006142:	2c00      	cmp	r4, #0
 8006144:	d000      	beq.n	8006148 <_dtoa_r+0x3d8>
 8006146:	e094      	b.n	8006272 <_dtoa_r+0x502>
 8006148:	2b00      	cmp	r3, #0
 800614a:	d19f      	bne.n	800608c <_dtoa_r+0x31c>
 800614c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800614e:	2b00      	cmp	r3, #0
 8006150:	d100      	bne.n	8006154 <_dtoa_r+0x3e4>
 8006152:	e09b      	b.n	800628c <_dtoa_r+0x51c>
 8006154:	9c08      	ldr	r4, [sp, #32]
 8006156:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006158:	2200      	movs	r2, #0
 800615a:	0020      	movs	r0, r4
 800615c:	0029      	movs	r1, r5
 800615e:	4baa      	ldr	r3, [pc, #680]	; (8006408 <_dtoa_r+0x698>)
 8006160:	f7fa f978 	bl	8000454 <__aeabi_dcmplt>
 8006164:	2800      	cmp	r0, #0
 8006166:	d100      	bne.n	800616a <_dtoa_r+0x3fa>
 8006168:	e090      	b.n	800628c <_dtoa_r+0x51c>
 800616a:	9b07      	ldr	r3, [sp, #28]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d100      	bne.n	8006172 <_dtoa_r+0x402>
 8006170:	e08c      	b.n	800628c <_dtoa_r+0x51c>
 8006172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006174:	2b00      	cmp	r3, #0
 8006176:	dd46      	ble.n	8006206 <_dtoa_r+0x496>
 8006178:	9b02      	ldr	r3, [sp, #8]
 800617a:	2200      	movs	r2, #0
 800617c:	0020      	movs	r0, r4
 800617e:	0029      	movs	r1, r5
 8006180:	1e5e      	subs	r6, r3, #1
 8006182:	4ba2      	ldr	r3, [pc, #648]	; (800640c <_dtoa_r+0x69c>)
 8006184:	f7fb f9b8 	bl	80014f8 <__aeabi_dmul>
 8006188:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800618a:	9008      	str	r0, [sp, #32]
 800618c:	9109      	str	r1, [sp, #36]	; 0x24
 800618e:	3301      	adds	r3, #1
 8006190:	9310      	str	r3, [sp, #64]	; 0x40
 8006192:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006194:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006196:	9c08      	ldr	r4, [sp, #32]
 8006198:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800619a:	9314      	str	r3, [sp, #80]	; 0x50
 800619c:	f7fb fffe 	bl	800219c <__aeabi_i2d>
 80061a0:	0022      	movs	r2, r4
 80061a2:	002b      	movs	r3, r5
 80061a4:	f7fb f9a8 	bl	80014f8 <__aeabi_dmul>
 80061a8:	2200      	movs	r2, #0
 80061aa:	4b99      	ldr	r3, [pc, #612]	; (8006410 <_dtoa_r+0x6a0>)
 80061ac:	f7fa fa66 	bl	800067c <__aeabi_dadd>
 80061b0:	9010      	str	r0, [sp, #64]	; 0x40
 80061b2:	9111      	str	r1, [sp, #68]	; 0x44
 80061b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061b8:	9208      	str	r2, [sp, #32]
 80061ba:	9309      	str	r3, [sp, #36]	; 0x24
 80061bc:	4a95      	ldr	r2, [pc, #596]	; (8006414 <_dtoa_r+0x6a4>)
 80061be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80061c0:	4694      	mov	ip, r2
 80061c2:	4463      	add	r3, ip
 80061c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80061c6:	9309      	str	r3, [sp, #36]	; 0x24
 80061c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d161      	bne.n	8006292 <_dtoa_r+0x522>
 80061ce:	2200      	movs	r2, #0
 80061d0:	0020      	movs	r0, r4
 80061d2:	0029      	movs	r1, r5
 80061d4:	4b90      	ldr	r3, [pc, #576]	; (8006418 <_dtoa_r+0x6a8>)
 80061d6:	f7fb fbfb 	bl	80019d0 <__aeabi_dsub>
 80061da:	9a08      	ldr	r2, [sp, #32]
 80061dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061de:	0004      	movs	r4, r0
 80061e0:	000d      	movs	r5, r1
 80061e2:	f7fa f94b 	bl	800047c <__aeabi_dcmpgt>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d000      	beq.n	80061ec <_dtoa_r+0x47c>
 80061ea:	e2af      	b.n	800674c <_dtoa_r+0x9dc>
 80061ec:	488b      	ldr	r0, [pc, #556]	; (800641c <_dtoa_r+0x6ac>)
 80061ee:	9911      	ldr	r1, [sp, #68]	; 0x44
 80061f0:	4684      	mov	ip, r0
 80061f2:	4461      	add	r1, ip
 80061f4:	000b      	movs	r3, r1
 80061f6:	0020      	movs	r0, r4
 80061f8:	0029      	movs	r1, r5
 80061fa:	9a08      	ldr	r2, [sp, #32]
 80061fc:	f7fa f92a 	bl	8000454 <__aeabi_dcmplt>
 8006200:	2800      	cmp	r0, #0
 8006202:	d000      	beq.n	8006206 <_dtoa_r+0x496>
 8006204:	e29f      	b.n	8006746 <_dtoa_r+0x9d6>
 8006206:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006208:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800620a:	9308      	str	r3, [sp, #32]
 800620c:	9409      	str	r4, [sp, #36]	; 0x24
 800620e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006210:	2b00      	cmp	r3, #0
 8006212:	da00      	bge.n	8006216 <_dtoa_r+0x4a6>
 8006214:	e172      	b.n	80064fc <_dtoa_r+0x78c>
 8006216:	9a02      	ldr	r2, [sp, #8]
 8006218:	2a0e      	cmp	r2, #14
 800621a:	dd00      	ble.n	800621e <_dtoa_r+0x4ae>
 800621c:	e16e      	b.n	80064fc <_dtoa_r+0x78c>
 800621e:	4b78      	ldr	r3, [pc, #480]	; (8006400 <_dtoa_r+0x690>)
 8006220:	00d2      	lsls	r2, r2, #3
 8006222:	189b      	adds	r3, r3, r2
 8006224:	685c      	ldr	r4, [r3, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	930a      	str	r3, [sp, #40]	; 0x28
 800622a:	940b      	str	r4, [sp, #44]	; 0x2c
 800622c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800622e:	2b00      	cmp	r3, #0
 8006230:	db00      	blt.n	8006234 <_dtoa_r+0x4c4>
 8006232:	e0f7      	b.n	8006424 <_dtoa_r+0x6b4>
 8006234:	9b07      	ldr	r3, [sp, #28]
 8006236:	2b00      	cmp	r3, #0
 8006238:	dd00      	ble.n	800623c <_dtoa_r+0x4cc>
 800623a:	e0f3      	b.n	8006424 <_dtoa_r+0x6b4>
 800623c:	d000      	beq.n	8006240 <_dtoa_r+0x4d0>
 800623e:	e282      	b.n	8006746 <_dtoa_r+0x9d6>
 8006240:	980a      	ldr	r0, [sp, #40]	; 0x28
 8006242:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006244:	2200      	movs	r2, #0
 8006246:	4b74      	ldr	r3, [pc, #464]	; (8006418 <_dtoa_r+0x6a8>)
 8006248:	f7fb f956 	bl	80014f8 <__aeabi_dmul>
 800624c:	9a08      	ldr	r2, [sp, #32]
 800624e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006250:	f7fa f91e 	bl	8000490 <__aeabi_dcmpge>
 8006254:	9e07      	ldr	r6, [sp, #28]
 8006256:	0035      	movs	r5, r6
 8006258:	2800      	cmp	r0, #0
 800625a:	d000      	beq.n	800625e <_dtoa_r+0x4ee>
 800625c:	e259      	b.n	8006712 <_dtoa_r+0x9a2>
 800625e:	9b06      	ldr	r3, [sp, #24]
 8006260:	9a06      	ldr	r2, [sp, #24]
 8006262:	3301      	adds	r3, #1
 8006264:	9308      	str	r3, [sp, #32]
 8006266:	2331      	movs	r3, #49	; 0x31
 8006268:	7013      	strb	r3, [r2, #0]
 800626a:	9b02      	ldr	r3, [sp, #8]
 800626c:	3301      	adds	r3, #1
 800626e:	9302      	str	r3, [sp, #8]
 8006270:	e254      	b.n	800671c <_dtoa_r+0x9ac>
 8006272:	4234      	tst	r4, r6
 8006274:	d007      	beq.n	8006286 <_dtoa_r+0x516>
 8006276:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006278:	3301      	adds	r3, #1
 800627a:	9310      	str	r3, [sp, #64]	; 0x40
 800627c:	682a      	ldr	r2, [r5, #0]
 800627e:	686b      	ldr	r3, [r5, #4]
 8006280:	f7fb f93a 	bl	80014f8 <__aeabi_dmul>
 8006284:	0033      	movs	r3, r6
 8006286:	1064      	asrs	r4, r4, #1
 8006288:	3508      	adds	r5, #8
 800628a:	e75a      	b.n	8006142 <_dtoa_r+0x3d2>
 800628c:	9e02      	ldr	r6, [sp, #8]
 800628e:	9b07      	ldr	r3, [sp, #28]
 8006290:	e780      	b.n	8006194 <_dtoa_r+0x424>
 8006292:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006294:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006296:	1e5a      	subs	r2, r3, #1
 8006298:	4b59      	ldr	r3, [pc, #356]	; (8006400 <_dtoa_r+0x690>)
 800629a:	00d2      	lsls	r2, r2, #3
 800629c:	189b      	adds	r3, r3, r2
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2900      	cmp	r1, #0
 80062a4:	d051      	beq.n	800634a <_dtoa_r+0x5da>
 80062a6:	2000      	movs	r0, #0
 80062a8:	495d      	ldr	r1, [pc, #372]	; (8006420 <_dtoa_r+0x6b0>)
 80062aa:	f7fa fd23 	bl	8000cf4 <__aeabi_ddiv>
 80062ae:	9a08      	ldr	r2, [sp, #32]
 80062b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062b2:	f7fb fb8d 	bl	80019d0 <__aeabi_dsub>
 80062b6:	9a06      	ldr	r2, [sp, #24]
 80062b8:	9b06      	ldr	r3, [sp, #24]
 80062ba:	4694      	mov	ip, r2
 80062bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80062be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062c0:	9010      	str	r0, [sp, #64]	; 0x40
 80062c2:	9111      	str	r1, [sp, #68]	; 0x44
 80062c4:	4463      	add	r3, ip
 80062c6:	9319      	str	r3, [sp, #100]	; 0x64
 80062c8:	0029      	movs	r1, r5
 80062ca:	0020      	movs	r0, r4
 80062cc:	f7fb ff30 	bl	8002130 <__aeabi_d2iz>
 80062d0:	9014      	str	r0, [sp, #80]	; 0x50
 80062d2:	f7fb ff63 	bl	800219c <__aeabi_i2d>
 80062d6:	0002      	movs	r2, r0
 80062d8:	000b      	movs	r3, r1
 80062da:	0020      	movs	r0, r4
 80062dc:	0029      	movs	r1, r5
 80062de:	f7fb fb77 	bl	80019d0 <__aeabi_dsub>
 80062e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062e4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80062e6:	3301      	adds	r3, #1
 80062e8:	9308      	str	r3, [sp, #32]
 80062ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062ec:	0004      	movs	r4, r0
 80062ee:	3330      	adds	r3, #48	; 0x30
 80062f0:	7013      	strb	r3, [r2, #0]
 80062f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80062f4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80062f6:	000d      	movs	r5, r1
 80062f8:	f7fa f8ac 	bl	8000454 <__aeabi_dcmplt>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d175      	bne.n	80063ec <_dtoa_r+0x67c>
 8006300:	0022      	movs	r2, r4
 8006302:	002b      	movs	r3, r5
 8006304:	2000      	movs	r0, #0
 8006306:	4940      	ldr	r1, [pc, #256]	; (8006408 <_dtoa_r+0x698>)
 8006308:	f7fb fb62 	bl	80019d0 <__aeabi_dsub>
 800630c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800630e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006310:	f7fa f8a0 	bl	8000454 <__aeabi_dcmplt>
 8006314:	2800      	cmp	r0, #0
 8006316:	d000      	beq.n	800631a <_dtoa_r+0x5aa>
 8006318:	e0d2      	b.n	80064c0 <_dtoa_r+0x750>
 800631a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800631c:	9a08      	ldr	r2, [sp, #32]
 800631e:	4293      	cmp	r3, r2
 8006320:	d100      	bne.n	8006324 <_dtoa_r+0x5b4>
 8006322:	e770      	b.n	8006206 <_dtoa_r+0x496>
 8006324:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006326:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006328:	2200      	movs	r2, #0
 800632a:	4b38      	ldr	r3, [pc, #224]	; (800640c <_dtoa_r+0x69c>)
 800632c:	f7fb f8e4 	bl	80014f8 <__aeabi_dmul>
 8006330:	4b36      	ldr	r3, [pc, #216]	; (800640c <_dtoa_r+0x69c>)
 8006332:	9010      	str	r0, [sp, #64]	; 0x40
 8006334:	9111      	str	r1, [sp, #68]	; 0x44
 8006336:	2200      	movs	r2, #0
 8006338:	0020      	movs	r0, r4
 800633a:	0029      	movs	r1, r5
 800633c:	f7fb f8dc 	bl	80014f8 <__aeabi_dmul>
 8006340:	9b08      	ldr	r3, [sp, #32]
 8006342:	0004      	movs	r4, r0
 8006344:	000d      	movs	r5, r1
 8006346:	9317      	str	r3, [sp, #92]	; 0x5c
 8006348:	e7be      	b.n	80062c8 <_dtoa_r+0x558>
 800634a:	9808      	ldr	r0, [sp, #32]
 800634c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800634e:	f7fb f8d3 	bl	80014f8 <__aeabi_dmul>
 8006352:	9a06      	ldr	r2, [sp, #24]
 8006354:	9b06      	ldr	r3, [sp, #24]
 8006356:	4694      	mov	ip, r2
 8006358:	9308      	str	r3, [sp, #32]
 800635a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800635c:	9010      	str	r0, [sp, #64]	; 0x40
 800635e:	9111      	str	r1, [sp, #68]	; 0x44
 8006360:	4463      	add	r3, ip
 8006362:	9319      	str	r3, [sp, #100]	; 0x64
 8006364:	0029      	movs	r1, r5
 8006366:	0020      	movs	r0, r4
 8006368:	f7fb fee2 	bl	8002130 <__aeabi_d2iz>
 800636c:	9017      	str	r0, [sp, #92]	; 0x5c
 800636e:	f7fb ff15 	bl	800219c <__aeabi_i2d>
 8006372:	0002      	movs	r2, r0
 8006374:	000b      	movs	r3, r1
 8006376:	0020      	movs	r0, r4
 8006378:	0029      	movs	r1, r5
 800637a:	f7fb fb29 	bl	80019d0 <__aeabi_dsub>
 800637e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006380:	9a08      	ldr	r2, [sp, #32]
 8006382:	3330      	adds	r3, #48	; 0x30
 8006384:	7013      	strb	r3, [r2, #0]
 8006386:	0013      	movs	r3, r2
 8006388:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800638a:	3301      	adds	r3, #1
 800638c:	0004      	movs	r4, r0
 800638e:	000d      	movs	r5, r1
 8006390:	9308      	str	r3, [sp, #32]
 8006392:	4293      	cmp	r3, r2
 8006394:	d12c      	bne.n	80063f0 <_dtoa_r+0x680>
 8006396:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006398:	9911      	ldr	r1, [sp, #68]	; 0x44
 800639a:	9a06      	ldr	r2, [sp, #24]
 800639c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800639e:	4694      	mov	ip, r2
 80063a0:	4463      	add	r3, ip
 80063a2:	2200      	movs	r2, #0
 80063a4:	9308      	str	r3, [sp, #32]
 80063a6:	4b1e      	ldr	r3, [pc, #120]	; (8006420 <_dtoa_r+0x6b0>)
 80063a8:	f7fa f968 	bl	800067c <__aeabi_dadd>
 80063ac:	0002      	movs	r2, r0
 80063ae:	000b      	movs	r3, r1
 80063b0:	0020      	movs	r0, r4
 80063b2:	0029      	movs	r1, r5
 80063b4:	f7fa f862 	bl	800047c <__aeabi_dcmpgt>
 80063b8:	2800      	cmp	r0, #0
 80063ba:	d000      	beq.n	80063be <_dtoa_r+0x64e>
 80063bc:	e080      	b.n	80064c0 <_dtoa_r+0x750>
 80063be:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80063c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80063c2:	2000      	movs	r0, #0
 80063c4:	4916      	ldr	r1, [pc, #88]	; (8006420 <_dtoa_r+0x6b0>)
 80063c6:	f7fb fb03 	bl	80019d0 <__aeabi_dsub>
 80063ca:	0002      	movs	r2, r0
 80063cc:	000b      	movs	r3, r1
 80063ce:	0020      	movs	r0, r4
 80063d0:	0029      	movs	r1, r5
 80063d2:	f7fa f83f 	bl	8000454 <__aeabi_dcmplt>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d100      	bne.n	80063dc <_dtoa_r+0x66c>
 80063da:	e714      	b.n	8006206 <_dtoa_r+0x496>
 80063dc:	9b08      	ldr	r3, [sp, #32]
 80063de:	001a      	movs	r2, r3
 80063e0:	3a01      	subs	r2, #1
 80063e2:	9208      	str	r2, [sp, #32]
 80063e4:	7812      	ldrb	r2, [r2, #0]
 80063e6:	2a30      	cmp	r2, #48	; 0x30
 80063e8:	d0f8      	beq.n	80063dc <_dtoa_r+0x66c>
 80063ea:	9308      	str	r3, [sp, #32]
 80063ec:	9602      	str	r6, [sp, #8]
 80063ee:	e055      	b.n	800649c <_dtoa_r+0x72c>
 80063f0:	2200      	movs	r2, #0
 80063f2:	4b06      	ldr	r3, [pc, #24]	; (800640c <_dtoa_r+0x69c>)
 80063f4:	f7fb f880 	bl	80014f8 <__aeabi_dmul>
 80063f8:	0004      	movs	r4, r0
 80063fa:	000d      	movs	r5, r1
 80063fc:	e7b2      	b.n	8006364 <_dtoa_r+0x5f4>
 80063fe:	46c0      	nop			; (mov r8, r8)
 8006400:	08008500 	.word	0x08008500
 8006404:	080084d8 	.word	0x080084d8
 8006408:	3ff00000 	.word	0x3ff00000
 800640c:	40240000 	.word	0x40240000
 8006410:	401c0000 	.word	0x401c0000
 8006414:	fcc00000 	.word	0xfcc00000
 8006418:	40140000 	.word	0x40140000
 800641c:	7cc00000 	.word	0x7cc00000
 8006420:	3fe00000 	.word	0x3fe00000
 8006424:	9b07      	ldr	r3, [sp, #28]
 8006426:	9e06      	ldr	r6, [sp, #24]
 8006428:	3b01      	subs	r3, #1
 800642a:	199b      	adds	r3, r3, r6
 800642c:	930c      	str	r3, [sp, #48]	; 0x30
 800642e:	9c08      	ldr	r4, [sp, #32]
 8006430:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006432:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006436:	0020      	movs	r0, r4
 8006438:	0029      	movs	r1, r5
 800643a:	f7fa fc5b 	bl	8000cf4 <__aeabi_ddiv>
 800643e:	f7fb fe77 	bl	8002130 <__aeabi_d2iz>
 8006442:	9007      	str	r0, [sp, #28]
 8006444:	f7fb feaa 	bl	800219c <__aeabi_i2d>
 8006448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800644a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800644c:	f7fb f854 	bl	80014f8 <__aeabi_dmul>
 8006450:	0002      	movs	r2, r0
 8006452:	000b      	movs	r3, r1
 8006454:	0020      	movs	r0, r4
 8006456:	0029      	movs	r1, r5
 8006458:	f7fb faba 	bl	80019d0 <__aeabi_dsub>
 800645c:	0033      	movs	r3, r6
 800645e:	9a07      	ldr	r2, [sp, #28]
 8006460:	3601      	adds	r6, #1
 8006462:	3230      	adds	r2, #48	; 0x30
 8006464:	701a      	strb	r2, [r3, #0]
 8006466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006468:	9608      	str	r6, [sp, #32]
 800646a:	429a      	cmp	r2, r3
 800646c:	d139      	bne.n	80064e2 <_dtoa_r+0x772>
 800646e:	0002      	movs	r2, r0
 8006470:	000b      	movs	r3, r1
 8006472:	f7fa f903 	bl	800067c <__aeabi_dadd>
 8006476:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800647a:	0004      	movs	r4, r0
 800647c:	000d      	movs	r5, r1
 800647e:	f7f9 fffd 	bl	800047c <__aeabi_dcmpgt>
 8006482:	2800      	cmp	r0, #0
 8006484:	d11b      	bne.n	80064be <_dtoa_r+0x74e>
 8006486:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006488:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800648a:	0020      	movs	r0, r4
 800648c:	0029      	movs	r1, r5
 800648e:	f7f9 ffdb 	bl	8000448 <__aeabi_dcmpeq>
 8006492:	2800      	cmp	r0, #0
 8006494:	d002      	beq.n	800649c <_dtoa_r+0x72c>
 8006496:	9b07      	ldr	r3, [sp, #28]
 8006498:	07db      	lsls	r3, r3, #31
 800649a:	d410      	bmi.n	80064be <_dtoa_r+0x74e>
 800649c:	0038      	movs	r0, r7
 800649e:	9905      	ldr	r1, [sp, #20]
 80064a0:	f000 fae6 	bl	8006a70 <_Bfree>
 80064a4:	2300      	movs	r3, #0
 80064a6:	9a08      	ldr	r2, [sp, #32]
 80064a8:	9802      	ldr	r0, [sp, #8]
 80064aa:	7013      	strb	r3, [r2, #0]
 80064ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80064ae:	3001      	adds	r0, #1
 80064b0:	6018      	str	r0, [r3, #0]
 80064b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d100      	bne.n	80064ba <_dtoa_r+0x74a>
 80064b8:	e4a6      	b.n	8005e08 <_dtoa_r+0x98>
 80064ba:	601a      	str	r2, [r3, #0]
 80064bc:	e4a4      	b.n	8005e08 <_dtoa_r+0x98>
 80064be:	9e02      	ldr	r6, [sp, #8]
 80064c0:	9b08      	ldr	r3, [sp, #32]
 80064c2:	9308      	str	r3, [sp, #32]
 80064c4:	3b01      	subs	r3, #1
 80064c6:	781a      	ldrb	r2, [r3, #0]
 80064c8:	2a39      	cmp	r2, #57	; 0x39
 80064ca:	d106      	bne.n	80064da <_dtoa_r+0x76a>
 80064cc:	9a06      	ldr	r2, [sp, #24]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d1f7      	bne.n	80064c2 <_dtoa_r+0x752>
 80064d2:	2230      	movs	r2, #48	; 0x30
 80064d4:	9906      	ldr	r1, [sp, #24]
 80064d6:	3601      	adds	r6, #1
 80064d8:	700a      	strb	r2, [r1, #0]
 80064da:	781a      	ldrb	r2, [r3, #0]
 80064dc:	3201      	adds	r2, #1
 80064de:	701a      	strb	r2, [r3, #0]
 80064e0:	e784      	b.n	80063ec <_dtoa_r+0x67c>
 80064e2:	2200      	movs	r2, #0
 80064e4:	4baa      	ldr	r3, [pc, #680]	; (8006790 <_dtoa_r+0xa20>)
 80064e6:	f7fb f807 	bl	80014f8 <__aeabi_dmul>
 80064ea:	2200      	movs	r2, #0
 80064ec:	2300      	movs	r3, #0
 80064ee:	0004      	movs	r4, r0
 80064f0:	000d      	movs	r5, r1
 80064f2:	f7f9 ffa9 	bl	8000448 <__aeabi_dcmpeq>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	d09b      	beq.n	8006432 <_dtoa_r+0x6c2>
 80064fa:	e7cf      	b.n	800649c <_dtoa_r+0x72c>
 80064fc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80064fe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8006500:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006502:	2d00      	cmp	r5, #0
 8006504:	d012      	beq.n	800652c <_dtoa_r+0x7bc>
 8006506:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006508:	2a01      	cmp	r2, #1
 800650a:	dc66      	bgt.n	80065da <_dtoa_r+0x86a>
 800650c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800650e:	2a00      	cmp	r2, #0
 8006510:	d05d      	beq.n	80065ce <_dtoa_r+0x85e>
 8006512:	4aa0      	ldr	r2, [pc, #640]	; (8006794 <_dtoa_r+0xa24>)
 8006514:	189b      	adds	r3, r3, r2
 8006516:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006518:	2101      	movs	r1, #1
 800651a:	18d2      	adds	r2, r2, r3
 800651c:	920a      	str	r2, [sp, #40]	; 0x28
 800651e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006520:	0038      	movs	r0, r7
 8006522:	18d3      	adds	r3, r2, r3
 8006524:	930d      	str	r3, [sp, #52]	; 0x34
 8006526:	f000 fb53 	bl	8006bd0 <__i2b>
 800652a:	0005      	movs	r5, r0
 800652c:	2c00      	cmp	r4, #0
 800652e:	dd0e      	ble.n	800654e <_dtoa_r+0x7de>
 8006530:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006532:	2b00      	cmp	r3, #0
 8006534:	dd0b      	ble.n	800654e <_dtoa_r+0x7de>
 8006536:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006538:	0023      	movs	r3, r4
 800653a:	4294      	cmp	r4, r2
 800653c:	dd00      	ble.n	8006540 <_dtoa_r+0x7d0>
 800653e:	0013      	movs	r3, r2
 8006540:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006542:	1ae4      	subs	r4, r4, r3
 8006544:	1ad2      	subs	r2, r2, r3
 8006546:	920a      	str	r2, [sp, #40]	; 0x28
 8006548:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800654a:	1ad3      	subs	r3, r2, r3
 800654c:	930d      	str	r3, [sp, #52]	; 0x34
 800654e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006550:	2b00      	cmp	r3, #0
 8006552:	d01f      	beq.n	8006594 <_dtoa_r+0x824>
 8006554:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006556:	2b00      	cmp	r3, #0
 8006558:	d054      	beq.n	8006604 <_dtoa_r+0x894>
 800655a:	2e00      	cmp	r6, #0
 800655c:	dd11      	ble.n	8006582 <_dtoa_r+0x812>
 800655e:	0029      	movs	r1, r5
 8006560:	0032      	movs	r2, r6
 8006562:	0038      	movs	r0, r7
 8006564:	f000 fbfa 	bl	8006d5c <__pow5mult>
 8006568:	9a05      	ldr	r2, [sp, #20]
 800656a:	0001      	movs	r1, r0
 800656c:	0005      	movs	r5, r0
 800656e:	0038      	movs	r0, r7
 8006570:	f000 fb44 	bl	8006bfc <__multiply>
 8006574:	9905      	ldr	r1, [sp, #20]
 8006576:	9014      	str	r0, [sp, #80]	; 0x50
 8006578:	0038      	movs	r0, r7
 800657a:	f000 fa79 	bl	8006a70 <_Bfree>
 800657e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006580:	9305      	str	r3, [sp, #20]
 8006582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006584:	1b9a      	subs	r2, r3, r6
 8006586:	42b3      	cmp	r3, r6
 8006588:	d004      	beq.n	8006594 <_dtoa_r+0x824>
 800658a:	0038      	movs	r0, r7
 800658c:	9905      	ldr	r1, [sp, #20]
 800658e:	f000 fbe5 	bl	8006d5c <__pow5mult>
 8006592:	9005      	str	r0, [sp, #20]
 8006594:	2101      	movs	r1, #1
 8006596:	0038      	movs	r0, r7
 8006598:	f000 fb1a 	bl	8006bd0 <__i2b>
 800659c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800659e:	0006      	movs	r6, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	dd31      	ble.n	8006608 <_dtoa_r+0x898>
 80065a4:	001a      	movs	r2, r3
 80065a6:	0001      	movs	r1, r0
 80065a8:	0038      	movs	r0, r7
 80065aa:	f000 fbd7 	bl	8006d5c <__pow5mult>
 80065ae:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065b0:	0006      	movs	r6, r0
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	dd2d      	ble.n	8006612 <_dtoa_r+0x8a2>
 80065b6:	2300      	movs	r3, #0
 80065b8:	930e      	str	r3, [sp, #56]	; 0x38
 80065ba:	6933      	ldr	r3, [r6, #16]
 80065bc:	3303      	adds	r3, #3
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	18f3      	adds	r3, r6, r3
 80065c2:	6858      	ldr	r0, [r3, #4]
 80065c4:	f000 fabc 	bl	8006b40 <__hi0bits>
 80065c8:	2320      	movs	r3, #32
 80065ca:	1a18      	subs	r0, r3, r0
 80065cc:	e039      	b.n	8006642 <_dtoa_r+0x8d2>
 80065ce:	2336      	movs	r3, #54	; 0x36
 80065d0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80065d2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80065d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80065d6:	1a9b      	subs	r3, r3, r2
 80065d8:	e79d      	b.n	8006516 <_dtoa_r+0x7a6>
 80065da:	9b07      	ldr	r3, [sp, #28]
 80065dc:	1e5e      	subs	r6, r3, #1
 80065de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065e0:	42b3      	cmp	r3, r6
 80065e2:	db07      	blt.n	80065f4 <_dtoa_r+0x884>
 80065e4:	1b9e      	subs	r6, r3, r6
 80065e6:	9b07      	ldr	r3, [sp, #28]
 80065e8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	da93      	bge.n	8006516 <_dtoa_r+0x7a6>
 80065ee:	1ae4      	subs	r4, r4, r3
 80065f0:	2300      	movs	r3, #0
 80065f2:	e790      	b.n	8006516 <_dtoa_r+0x7a6>
 80065f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065f6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80065f8:	1af3      	subs	r3, r6, r3
 80065fa:	18d3      	adds	r3, r2, r3
 80065fc:	960e      	str	r6, [sp, #56]	; 0x38
 80065fe:	9315      	str	r3, [sp, #84]	; 0x54
 8006600:	2600      	movs	r6, #0
 8006602:	e7f0      	b.n	80065e6 <_dtoa_r+0x876>
 8006604:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006606:	e7c0      	b.n	800658a <_dtoa_r+0x81a>
 8006608:	2300      	movs	r3, #0
 800660a:	930e      	str	r3, [sp, #56]	; 0x38
 800660c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800660e:	2b01      	cmp	r3, #1
 8006610:	dc13      	bgt.n	800663a <_dtoa_r+0x8ca>
 8006612:	2300      	movs	r3, #0
 8006614:	930e      	str	r3, [sp, #56]	; 0x38
 8006616:	9b08      	ldr	r3, [sp, #32]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10e      	bne.n	800663a <_dtoa_r+0x8ca>
 800661c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800661e:	031b      	lsls	r3, r3, #12
 8006620:	d10b      	bne.n	800663a <_dtoa_r+0x8ca>
 8006622:	4b5d      	ldr	r3, [pc, #372]	; (8006798 <_dtoa_r+0xa28>)
 8006624:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006626:	4213      	tst	r3, r2
 8006628:	d007      	beq.n	800663a <_dtoa_r+0x8ca>
 800662a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800662c:	3301      	adds	r3, #1
 800662e:	930a      	str	r3, [sp, #40]	; 0x28
 8006630:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006632:	3301      	adds	r3, #1
 8006634:	930d      	str	r3, [sp, #52]	; 0x34
 8006636:	2301      	movs	r3, #1
 8006638:	930e      	str	r3, [sp, #56]	; 0x38
 800663a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800663c:	2001      	movs	r0, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1bb      	bne.n	80065ba <_dtoa_r+0x84a>
 8006642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006644:	221f      	movs	r2, #31
 8006646:	1818      	adds	r0, r3, r0
 8006648:	0003      	movs	r3, r0
 800664a:	4013      	ands	r3, r2
 800664c:	4210      	tst	r0, r2
 800664e:	d046      	beq.n	80066de <_dtoa_r+0x96e>
 8006650:	3201      	adds	r2, #1
 8006652:	1ad2      	subs	r2, r2, r3
 8006654:	2a04      	cmp	r2, #4
 8006656:	dd3f      	ble.n	80066d8 <_dtoa_r+0x968>
 8006658:	221c      	movs	r2, #28
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800665e:	18e4      	adds	r4, r4, r3
 8006660:	18d2      	adds	r2, r2, r3
 8006662:	920a      	str	r2, [sp, #40]	; 0x28
 8006664:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006666:	18d3      	adds	r3, r2, r3
 8006668:	930d      	str	r3, [sp, #52]	; 0x34
 800666a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800666c:	2b00      	cmp	r3, #0
 800666e:	dd05      	ble.n	800667c <_dtoa_r+0x90c>
 8006670:	001a      	movs	r2, r3
 8006672:	0038      	movs	r0, r7
 8006674:	9905      	ldr	r1, [sp, #20]
 8006676:	f000 fbcd 	bl	8006e14 <__lshift>
 800667a:	9005      	str	r0, [sp, #20]
 800667c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800667e:	2b00      	cmp	r3, #0
 8006680:	dd05      	ble.n	800668e <_dtoa_r+0x91e>
 8006682:	0031      	movs	r1, r6
 8006684:	001a      	movs	r2, r3
 8006686:	0038      	movs	r0, r7
 8006688:	f000 fbc4 	bl	8006e14 <__lshift>
 800668c:	0006      	movs	r6, r0
 800668e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006690:	2b00      	cmp	r3, #0
 8006692:	d026      	beq.n	80066e2 <_dtoa_r+0x972>
 8006694:	0031      	movs	r1, r6
 8006696:	9805      	ldr	r0, [sp, #20]
 8006698:	f000 fc2a 	bl	8006ef0 <__mcmp>
 800669c:	2800      	cmp	r0, #0
 800669e:	da20      	bge.n	80066e2 <_dtoa_r+0x972>
 80066a0:	9b02      	ldr	r3, [sp, #8]
 80066a2:	220a      	movs	r2, #10
 80066a4:	3b01      	subs	r3, #1
 80066a6:	9302      	str	r3, [sp, #8]
 80066a8:	0038      	movs	r0, r7
 80066aa:	2300      	movs	r3, #0
 80066ac:	9905      	ldr	r1, [sp, #20]
 80066ae:	f000 fa03 	bl	8006ab8 <__multadd>
 80066b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066b4:	9005      	str	r0, [sp, #20]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d100      	bne.n	80066bc <_dtoa_r+0x94c>
 80066ba:	e166      	b.n	800698a <_dtoa_r+0xc1a>
 80066bc:	2300      	movs	r3, #0
 80066be:	0029      	movs	r1, r5
 80066c0:	220a      	movs	r2, #10
 80066c2:	0038      	movs	r0, r7
 80066c4:	f000 f9f8 	bl	8006ab8 <__multadd>
 80066c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066ca:	0005      	movs	r5, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	dc47      	bgt.n	8006760 <_dtoa_r+0x9f0>
 80066d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	dc0d      	bgt.n	80066f2 <_dtoa_r+0x982>
 80066d6:	e043      	b.n	8006760 <_dtoa_r+0x9f0>
 80066d8:	2a04      	cmp	r2, #4
 80066da:	d0c6      	beq.n	800666a <_dtoa_r+0x8fa>
 80066dc:	0013      	movs	r3, r2
 80066de:	331c      	adds	r3, #28
 80066e0:	e7bc      	b.n	800665c <_dtoa_r+0x8ec>
 80066e2:	9b07      	ldr	r3, [sp, #28]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	dc35      	bgt.n	8006754 <_dtoa_r+0x9e4>
 80066e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066ea:	2b02      	cmp	r3, #2
 80066ec:	dd32      	ble.n	8006754 <_dtoa_r+0x9e4>
 80066ee:	9b07      	ldr	r3, [sp, #28]
 80066f0:	930c      	str	r3, [sp, #48]	; 0x30
 80066f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10c      	bne.n	8006712 <_dtoa_r+0x9a2>
 80066f8:	0031      	movs	r1, r6
 80066fa:	2205      	movs	r2, #5
 80066fc:	0038      	movs	r0, r7
 80066fe:	f000 f9db 	bl	8006ab8 <__multadd>
 8006702:	0006      	movs	r6, r0
 8006704:	0001      	movs	r1, r0
 8006706:	9805      	ldr	r0, [sp, #20]
 8006708:	f000 fbf2 	bl	8006ef0 <__mcmp>
 800670c:	2800      	cmp	r0, #0
 800670e:	dd00      	ble.n	8006712 <_dtoa_r+0x9a2>
 8006710:	e5a5      	b.n	800625e <_dtoa_r+0x4ee>
 8006712:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006714:	43db      	mvns	r3, r3
 8006716:	9302      	str	r3, [sp, #8]
 8006718:	9b06      	ldr	r3, [sp, #24]
 800671a:	9308      	str	r3, [sp, #32]
 800671c:	2400      	movs	r4, #0
 800671e:	0031      	movs	r1, r6
 8006720:	0038      	movs	r0, r7
 8006722:	f000 f9a5 	bl	8006a70 <_Bfree>
 8006726:	2d00      	cmp	r5, #0
 8006728:	d100      	bne.n	800672c <_dtoa_r+0x9bc>
 800672a:	e6b7      	b.n	800649c <_dtoa_r+0x72c>
 800672c:	2c00      	cmp	r4, #0
 800672e:	d005      	beq.n	800673c <_dtoa_r+0x9cc>
 8006730:	42ac      	cmp	r4, r5
 8006732:	d003      	beq.n	800673c <_dtoa_r+0x9cc>
 8006734:	0021      	movs	r1, r4
 8006736:	0038      	movs	r0, r7
 8006738:	f000 f99a 	bl	8006a70 <_Bfree>
 800673c:	0029      	movs	r1, r5
 800673e:	0038      	movs	r0, r7
 8006740:	f000 f996 	bl	8006a70 <_Bfree>
 8006744:	e6aa      	b.n	800649c <_dtoa_r+0x72c>
 8006746:	2600      	movs	r6, #0
 8006748:	0035      	movs	r5, r6
 800674a:	e7e2      	b.n	8006712 <_dtoa_r+0x9a2>
 800674c:	9602      	str	r6, [sp, #8]
 800674e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8006750:	0035      	movs	r5, r6
 8006752:	e584      	b.n	800625e <_dtoa_r+0x4ee>
 8006754:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006756:	2b00      	cmp	r3, #0
 8006758:	d100      	bne.n	800675c <_dtoa_r+0x9ec>
 800675a:	e0ce      	b.n	80068fa <_dtoa_r+0xb8a>
 800675c:	9b07      	ldr	r3, [sp, #28]
 800675e:	930c      	str	r3, [sp, #48]	; 0x30
 8006760:	2c00      	cmp	r4, #0
 8006762:	dd05      	ble.n	8006770 <_dtoa_r+0xa00>
 8006764:	0029      	movs	r1, r5
 8006766:	0022      	movs	r2, r4
 8006768:	0038      	movs	r0, r7
 800676a:	f000 fb53 	bl	8006e14 <__lshift>
 800676e:	0005      	movs	r5, r0
 8006770:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006772:	0028      	movs	r0, r5
 8006774:	2b00      	cmp	r3, #0
 8006776:	d022      	beq.n	80067be <_dtoa_r+0xa4e>
 8006778:	0038      	movs	r0, r7
 800677a:	6869      	ldr	r1, [r5, #4]
 800677c:	f000 f934 	bl	80069e8 <_Balloc>
 8006780:	1e04      	subs	r4, r0, #0
 8006782:	d10f      	bne.n	80067a4 <_dtoa_r+0xa34>
 8006784:	0002      	movs	r2, r0
 8006786:	4b05      	ldr	r3, [pc, #20]	; (800679c <_dtoa_r+0xa2c>)
 8006788:	4905      	ldr	r1, [pc, #20]	; (80067a0 <_dtoa_r+0xa30>)
 800678a:	f7ff fb06 	bl	8005d9a <_dtoa_r+0x2a>
 800678e:	46c0      	nop			; (mov r8, r8)
 8006790:	40240000 	.word	0x40240000
 8006794:	00000433 	.word	0x00000433
 8006798:	7ff00000 	.word	0x7ff00000
 800679c:	08008467 	.word	0x08008467
 80067a0:	000002ea 	.word	0x000002ea
 80067a4:	0029      	movs	r1, r5
 80067a6:	692b      	ldr	r3, [r5, #16]
 80067a8:	310c      	adds	r1, #12
 80067aa:	1c9a      	adds	r2, r3, #2
 80067ac:	0092      	lsls	r2, r2, #2
 80067ae:	300c      	adds	r0, #12
 80067b0:	f000 f911 	bl	80069d6 <memcpy>
 80067b4:	2201      	movs	r2, #1
 80067b6:	0021      	movs	r1, r4
 80067b8:	0038      	movs	r0, r7
 80067ba:	f000 fb2b 	bl	8006e14 <__lshift>
 80067be:	9b06      	ldr	r3, [sp, #24]
 80067c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067c2:	930a      	str	r3, [sp, #40]	; 0x28
 80067c4:	3b01      	subs	r3, #1
 80067c6:	189b      	adds	r3, r3, r2
 80067c8:	2201      	movs	r2, #1
 80067ca:	002c      	movs	r4, r5
 80067cc:	0005      	movs	r5, r0
 80067ce:	9314      	str	r3, [sp, #80]	; 0x50
 80067d0:	9b08      	ldr	r3, [sp, #32]
 80067d2:	4013      	ands	r3, r2
 80067d4:	930f      	str	r3, [sp, #60]	; 0x3c
 80067d6:	0031      	movs	r1, r6
 80067d8:	9805      	ldr	r0, [sp, #20]
 80067da:	f7ff fa3d 	bl	8005c58 <quorem>
 80067de:	0003      	movs	r3, r0
 80067e0:	0021      	movs	r1, r4
 80067e2:	3330      	adds	r3, #48	; 0x30
 80067e4:	900d      	str	r0, [sp, #52]	; 0x34
 80067e6:	9805      	ldr	r0, [sp, #20]
 80067e8:	9307      	str	r3, [sp, #28]
 80067ea:	f000 fb81 	bl	8006ef0 <__mcmp>
 80067ee:	002a      	movs	r2, r5
 80067f0:	900e      	str	r0, [sp, #56]	; 0x38
 80067f2:	0031      	movs	r1, r6
 80067f4:	0038      	movs	r0, r7
 80067f6:	f000 fb97 	bl	8006f28 <__mdiff>
 80067fa:	68c3      	ldr	r3, [r0, #12]
 80067fc:	9008      	str	r0, [sp, #32]
 80067fe:	9310      	str	r3, [sp, #64]	; 0x40
 8006800:	2301      	movs	r3, #1
 8006802:	930c      	str	r3, [sp, #48]	; 0x30
 8006804:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006806:	2b00      	cmp	r3, #0
 8006808:	d104      	bne.n	8006814 <_dtoa_r+0xaa4>
 800680a:	0001      	movs	r1, r0
 800680c:	9805      	ldr	r0, [sp, #20]
 800680e:	f000 fb6f 	bl	8006ef0 <__mcmp>
 8006812:	900c      	str	r0, [sp, #48]	; 0x30
 8006814:	0038      	movs	r0, r7
 8006816:	9908      	ldr	r1, [sp, #32]
 8006818:	f000 f92a 	bl	8006a70 <_Bfree>
 800681c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800681e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006820:	3301      	adds	r3, #1
 8006822:	9308      	str	r3, [sp, #32]
 8006824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006826:	4313      	orrs	r3, r2
 8006828:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800682a:	4313      	orrs	r3, r2
 800682c:	d10c      	bne.n	8006848 <_dtoa_r+0xad8>
 800682e:	9b07      	ldr	r3, [sp, #28]
 8006830:	2b39      	cmp	r3, #57	; 0x39
 8006832:	d026      	beq.n	8006882 <_dtoa_r+0xb12>
 8006834:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006836:	2b00      	cmp	r3, #0
 8006838:	dd02      	ble.n	8006840 <_dtoa_r+0xad0>
 800683a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800683c:	3331      	adds	r3, #49	; 0x31
 800683e:	9307      	str	r3, [sp, #28]
 8006840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006842:	9a07      	ldr	r2, [sp, #28]
 8006844:	701a      	strb	r2, [r3, #0]
 8006846:	e76a      	b.n	800671e <_dtoa_r+0x9ae>
 8006848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800684a:	2b00      	cmp	r3, #0
 800684c:	db04      	blt.n	8006858 <_dtoa_r+0xae8>
 800684e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006850:	4313      	orrs	r3, r2
 8006852:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006854:	4313      	orrs	r3, r2
 8006856:	d11f      	bne.n	8006898 <_dtoa_r+0xb28>
 8006858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800685a:	2b00      	cmp	r3, #0
 800685c:	ddf0      	ble.n	8006840 <_dtoa_r+0xad0>
 800685e:	9905      	ldr	r1, [sp, #20]
 8006860:	2201      	movs	r2, #1
 8006862:	0038      	movs	r0, r7
 8006864:	f000 fad6 	bl	8006e14 <__lshift>
 8006868:	0031      	movs	r1, r6
 800686a:	9005      	str	r0, [sp, #20]
 800686c:	f000 fb40 	bl	8006ef0 <__mcmp>
 8006870:	2800      	cmp	r0, #0
 8006872:	dc03      	bgt.n	800687c <_dtoa_r+0xb0c>
 8006874:	d1e4      	bne.n	8006840 <_dtoa_r+0xad0>
 8006876:	9b07      	ldr	r3, [sp, #28]
 8006878:	07db      	lsls	r3, r3, #31
 800687a:	d5e1      	bpl.n	8006840 <_dtoa_r+0xad0>
 800687c:	9b07      	ldr	r3, [sp, #28]
 800687e:	2b39      	cmp	r3, #57	; 0x39
 8006880:	d1db      	bne.n	800683a <_dtoa_r+0xaca>
 8006882:	2339      	movs	r3, #57	; 0x39
 8006884:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006886:	7013      	strb	r3, [r2, #0]
 8006888:	9b08      	ldr	r3, [sp, #32]
 800688a:	9308      	str	r3, [sp, #32]
 800688c:	3b01      	subs	r3, #1
 800688e:	781a      	ldrb	r2, [r3, #0]
 8006890:	2a39      	cmp	r2, #57	; 0x39
 8006892:	d068      	beq.n	8006966 <_dtoa_r+0xbf6>
 8006894:	3201      	adds	r2, #1
 8006896:	e7d5      	b.n	8006844 <_dtoa_r+0xad4>
 8006898:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800689a:	2b00      	cmp	r3, #0
 800689c:	dd07      	ble.n	80068ae <_dtoa_r+0xb3e>
 800689e:	9b07      	ldr	r3, [sp, #28]
 80068a0:	2b39      	cmp	r3, #57	; 0x39
 80068a2:	d0ee      	beq.n	8006882 <_dtoa_r+0xb12>
 80068a4:	9b07      	ldr	r3, [sp, #28]
 80068a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068a8:	3301      	adds	r3, #1
 80068aa:	7013      	strb	r3, [r2, #0]
 80068ac:	e737      	b.n	800671e <_dtoa_r+0x9ae>
 80068ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068b0:	9a07      	ldr	r2, [sp, #28]
 80068b2:	701a      	strb	r2, [r3, #0]
 80068b4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80068b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d03e      	beq.n	800693a <_dtoa_r+0xbca>
 80068bc:	2300      	movs	r3, #0
 80068be:	220a      	movs	r2, #10
 80068c0:	9905      	ldr	r1, [sp, #20]
 80068c2:	0038      	movs	r0, r7
 80068c4:	f000 f8f8 	bl	8006ab8 <__multadd>
 80068c8:	2300      	movs	r3, #0
 80068ca:	9005      	str	r0, [sp, #20]
 80068cc:	220a      	movs	r2, #10
 80068ce:	0021      	movs	r1, r4
 80068d0:	0038      	movs	r0, r7
 80068d2:	42ac      	cmp	r4, r5
 80068d4:	d106      	bne.n	80068e4 <_dtoa_r+0xb74>
 80068d6:	f000 f8ef 	bl	8006ab8 <__multadd>
 80068da:	0004      	movs	r4, r0
 80068dc:	0005      	movs	r5, r0
 80068de:	9b08      	ldr	r3, [sp, #32]
 80068e0:	930a      	str	r3, [sp, #40]	; 0x28
 80068e2:	e778      	b.n	80067d6 <_dtoa_r+0xa66>
 80068e4:	f000 f8e8 	bl	8006ab8 <__multadd>
 80068e8:	0029      	movs	r1, r5
 80068ea:	0004      	movs	r4, r0
 80068ec:	2300      	movs	r3, #0
 80068ee:	220a      	movs	r2, #10
 80068f0:	0038      	movs	r0, r7
 80068f2:	f000 f8e1 	bl	8006ab8 <__multadd>
 80068f6:	0005      	movs	r5, r0
 80068f8:	e7f1      	b.n	80068de <_dtoa_r+0xb6e>
 80068fa:	9b07      	ldr	r3, [sp, #28]
 80068fc:	930c      	str	r3, [sp, #48]	; 0x30
 80068fe:	2400      	movs	r4, #0
 8006900:	0031      	movs	r1, r6
 8006902:	9805      	ldr	r0, [sp, #20]
 8006904:	f7ff f9a8 	bl	8005c58 <quorem>
 8006908:	9b06      	ldr	r3, [sp, #24]
 800690a:	3030      	adds	r0, #48	; 0x30
 800690c:	5518      	strb	r0, [r3, r4]
 800690e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006910:	3401      	adds	r4, #1
 8006912:	9007      	str	r0, [sp, #28]
 8006914:	42a3      	cmp	r3, r4
 8006916:	dd07      	ble.n	8006928 <_dtoa_r+0xbb8>
 8006918:	2300      	movs	r3, #0
 800691a:	220a      	movs	r2, #10
 800691c:	0038      	movs	r0, r7
 800691e:	9905      	ldr	r1, [sp, #20]
 8006920:	f000 f8ca 	bl	8006ab8 <__multadd>
 8006924:	9005      	str	r0, [sp, #20]
 8006926:	e7eb      	b.n	8006900 <_dtoa_r+0xb90>
 8006928:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800692a:	2001      	movs	r0, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	dd00      	ble.n	8006932 <_dtoa_r+0xbc2>
 8006930:	0018      	movs	r0, r3
 8006932:	2400      	movs	r4, #0
 8006934:	9b06      	ldr	r3, [sp, #24]
 8006936:	181b      	adds	r3, r3, r0
 8006938:	9308      	str	r3, [sp, #32]
 800693a:	9905      	ldr	r1, [sp, #20]
 800693c:	2201      	movs	r2, #1
 800693e:	0038      	movs	r0, r7
 8006940:	f000 fa68 	bl	8006e14 <__lshift>
 8006944:	0031      	movs	r1, r6
 8006946:	9005      	str	r0, [sp, #20]
 8006948:	f000 fad2 	bl	8006ef0 <__mcmp>
 800694c:	2800      	cmp	r0, #0
 800694e:	dc9b      	bgt.n	8006888 <_dtoa_r+0xb18>
 8006950:	d102      	bne.n	8006958 <_dtoa_r+0xbe8>
 8006952:	9b07      	ldr	r3, [sp, #28]
 8006954:	07db      	lsls	r3, r3, #31
 8006956:	d497      	bmi.n	8006888 <_dtoa_r+0xb18>
 8006958:	9b08      	ldr	r3, [sp, #32]
 800695a:	9308      	str	r3, [sp, #32]
 800695c:	3b01      	subs	r3, #1
 800695e:	781a      	ldrb	r2, [r3, #0]
 8006960:	2a30      	cmp	r2, #48	; 0x30
 8006962:	d0fa      	beq.n	800695a <_dtoa_r+0xbea>
 8006964:	e6db      	b.n	800671e <_dtoa_r+0x9ae>
 8006966:	9a06      	ldr	r2, [sp, #24]
 8006968:	429a      	cmp	r2, r3
 800696a:	d18e      	bne.n	800688a <_dtoa_r+0xb1a>
 800696c:	9b02      	ldr	r3, [sp, #8]
 800696e:	3301      	adds	r3, #1
 8006970:	9302      	str	r3, [sp, #8]
 8006972:	2331      	movs	r3, #49	; 0x31
 8006974:	e799      	b.n	80068aa <_dtoa_r+0xb3a>
 8006976:	4b09      	ldr	r3, [pc, #36]	; (800699c <_dtoa_r+0xc2c>)
 8006978:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800697a:	9306      	str	r3, [sp, #24]
 800697c:	4b08      	ldr	r3, [pc, #32]	; (80069a0 <_dtoa_r+0xc30>)
 800697e:	2a00      	cmp	r2, #0
 8006980:	d001      	beq.n	8006986 <_dtoa_r+0xc16>
 8006982:	f7ff fa3f 	bl	8005e04 <_dtoa_r+0x94>
 8006986:	f7ff fa3f 	bl	8005e08 <_dtoa_r+0x98>
 800698a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800698c:	2b00      	cmp	r3, #0
 800698e:	dcb6      	bgt.n	80068fe <_dtoa_r+0xb8e>
 8006990:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006992:	2b02      	cmp	r3, #2
 8006994:	dd00      	ble.n	8006998 <_dtoa_r+0xc28>
 8006996:	e6ac      	b.n	80066f2 <_dtoa_r+0x982>
 8006998:	e7b1      	b.n	80068fe <_dtoa_r+0xb8e>
 800699a:	46c0      	nop			; (mov r8, r8)
 800699c:	080083e8 	.word	0x080083e8
 80069a0:	080083f0 	.word	0x080083f0

080069a4 <_localeconv_r>:
 80069a4:	4800      	ldr	r0, [pc, #0]	; (80069a8 <_localeconv_r+0x4>)
 80069a6:	4770      	bx	lr
 80069a8:	20000160 	.word	0x20000160

080069ac <malloc>:
 80069ac:	b510      	push	{r4, lr}
 80069ae:	4b03      	ldr	r3, [pc, #12]	; (80069bc <malloc+0x10>)
 80069b0:	0001      	movs	r1, r0
 80069b2:	6818      	ldr	r0, [r3, #0]
 80069b4:	f000 fc4c 	bl	8007250 <_malloc_r>
 80069b8:	bd10      	pop	{r4, pc}
 80069ba:	46c0      	nop			; (mov r8, r8)
 80069bc:	2000000c 	.word	0x2000000c

080069c0 <memchr>:
 80069c0:	b2c9      	uxtb	r1, r1
 80069c2:	1882      	adds	r2, r0, r2
 80069c4:	4290      	cmp	r0, r2
 80069c6:	d101      	bne.n	80069cc <memchr+0xc>
 80069c8:	2000      	movs	r0, #0
 80069ca:	4770      	bx	lr
 80069cc:	7803      	ldrb	r3, [r0, #0]
 80069ce:	428b      	cmp	r3, r1
 80069d0:	d0fb      	beq.n	80069ca <memchr+0xa>
 80069d2:	3001      	adds	r0, #1
 80069d4:	e7f6      	b.n	80069c4 <memchr+0x4>

080069d6 <memcpy>:
 80069d6:	2300      	movs	r3, #0
 80069d8:	b510      	push	{r4, lr}
 80069da:	429a      	cmp	r2, r3
 80069dc:	d100      	bne.n	80069e0 <memcpy+0xa>
 80069de:	bd10      	pop	{r4, pc}
 80069e0:	5ccc      	ldrb	r4, [r1, r3]
 80069e2:	54c4      	strb	r4, [r0, r3]
 80069e4:	3301      	adds	r3, #1
 80069e6:	e7f8      	b.n	80069da <memcpy+0x4>

080069e8 <_Balloc>:
 80069e8:	b570      	push	{r4, r5, r6, lr}
 80069ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80069ec:	0006      	movs	r6, r0
 80069ee:	000c      	movs	r4, r1
 80069f0:	2d00      	cmp	r5, #0
 80069f2:	d10e      	bne.n	8006a12 <_Balloc+0x2a>
 80069f4:	2010      	movs	r0, #16
 80069f6:	f7ff ffd9 	bl	80069ac <malloc>
 80069fa:	1e02      	subs	r2, r0, #0
 80069fc:	6270      	str	r0, [r6, #36]	; 0x24
 80069fe:	d104      	bne.n	8006a0a <_Balloc+0x22>
 8006a00:	2166      	movs	r1, #102	; 0x66
 8006a02:	4b19      	ldr	r3, [pc, #100]	; (8006a68 <_Balloc+0x80>)
 8006a04:	4819      	ldr	r0, [pc, #100]	; (8006a6c <_Balloc+0x84>)
 8006a06:	f000 fe0d 	bl	8007624 <__assert_func>
 8006a0a:	6045      	str	r5, [r0, #4]
 8006a0c:	6085      	str	r5, [r0, #8]
 8006a0e:	6005      	str	r5, [r0, #0]
 8006a10:	60c5      	str	r5, [r0, #12]
 8006a12:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8006a14:	68eb      	ldr	r3, [r5, #12]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d013      	beq.n	8006a42 <_Balloc+0x5a>
 8006a1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006a1c:	00a2      	lsls	r2, r4, #2
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	189b      	adds	r3, r3, r2
 8006a22:	6818      	ldr	r0, [r3, #0]
 8006a24:	2800      	cmp	r0, #0
 8006a26:	d118      	bne.n	8006a5a <_Balloc+0x72>
 8006a28:	2101      	movs	r1, #1
 8006a2a:	000d      	movs	r5, r1
 8006a2c:	40a5      	lsls	r5, r4
 8006a2e:	1d6a      	adds	r2, r5, #5
 8006a30:	0030      	movs	r0, r6
 8006a32:	0092      	lsls	r2, r2, #2
 8006a34:	f000 fb74 	bl	8007120 <_calloc_r>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d00c      	beq.n	8006a56 <_Balloc+0x6e>
 8006a3c:	6044      	str	r4, [r0, #4]
 8006a3e:	6085      	str	r5, [r0, #8]
 8006a40:	e00d      	b.n	8006a5e <_Balloc+0x76>
 8006a42:	2221      	movs	r2, #33	; 0x21
 8006a44:	2104      	movs	r1, #4
 8006a46:	0030      	movs	r0, r6
 8006a48:	f000 fb6a 	bl	8007120 <_calloc_r>
 8006a4c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006a4e:	60e8      	str	r0, [r5, #12]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e1      	bne.n	8006a1a <_Balloc+0x32>
 8006a56:	2000      	movs	r0, #0
 8006a58:	bd70      	pop	{r4, r5, r6, pc}
 8006a5a:	6802      	ldr	r2, [r0, #0]
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	2300      	movs	r3, #0
 8006a60:	6103      	str	r3, [r0, #16]
 8006a62:	60c3      	str	r3, [r0, #12]
 8006a64:	e7f8      	b.n	8006a58 <_Balloc+0x70>
 8006a66:	46c0      	nop			; (mov r8, r8)
 8006a68:	080083f5 	.word	0x080083f5
 8006a6c:	08008478 	.word	0x08008478

08006a70 <_Bfree>:
 8006a70:	b570      	push	{r4, r5, r6, lr}
 8006a72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a74:	0005      	movs	r5, r0
 8006a76:	000c      	movs	r4, r1
 8006a78:	2e00      	cmp	r6, #0
 8006a7a:	d10e      	bne.n	8006a9a <_Bfree+0x2a>
 8006a7c:	2010      	movs	r0, #16
 8006a7e:	f7ff ff95 	bl	80069ac <malloc>
 8006a82:	1e02      	subs	r2, r0, #0
 8006a84:	6268      	str	r0, [r5, #36]	; 0x24
 8006a86:	d104      	bne.n	8006a92 <_Bfree+0x22>
 8006a88:	218a      	movs	r1, #138	; 0x8a
 8006a8a:	4b09      	ldr	r3, [pc, #36]	; (8006ab0 <_Bfree+0x40>)
 8006a8c:	4809      	ldr	r0, [pc, #36]	; (8006ab4 <_Bfree+0x44>)
 8006a8e:	f000 fdc9 	bl	8007624 <__assert_func>
 8006a92:	6046      	str	r6, [r0, #4]
 8006a94:	6086      	str	r6, [r0, #8]
 8006a96:	6006      	str	r6, [r0, #0]
 8006a98:	60c6      	str	r6, [r0, #12]
 8006a9a:	2c00      	cmp	r4, #0
 8006a9c:	d007      	beq.n	8006aae <_Bfree+0x3e>
 8006a9e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006aa0:	6862      	ldr	r2, [r4, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	0092      	lsls	r2, r2, #2
 8006aa6:	189b      	adds	r3, r3, r2
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	6022      	str	r2, [r4, #0]
 8006aac:	601c      	str	r4, [r3, #0]
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
 8006ab0:	080083f5 	.word	0x080083f5
 8006ab4:	08008478 	.word	0x08008478

08006ab8 <__multadd>:
 8006ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006aba:	000e      	movs	r6, r1
 8006abc:	9001      	str	r0, [sp, #4]
 8006abe:	000c      	movs	r4, r1
 8006ac0:	001d      	movs	r5, r3
 8006ac2:	2000      	movs	r0, #0
 8006ac4:	690f      	ldr	r7, [r1, #16]
 8006ac6:	3614      	adds	r6, #20
 8006ac8:	6833      	ldr	r3, [r6, #0]
 8006aca:	3001      	adds	r0, #1
 8006acc:	b299      	uxth	r1, r3
 8006ace:	4351      	muls	r1, r2
 8006ad0:	0c1b      	lsrs	r3, r3, #16
 8006ad2:	4353      	muls	r3, r2
 8006ad4:	1949      	adds	r1, r1, r5
 8006ad6:	0c0d      	lsrs	r5, r1, #16
 8006ad8:	195b      	adds	r3, r3, r5
 8006ada:	0c1d      	lsrs	r5, r3, #16
 8006adc:	b289      	uxth	r1, r1
 8006ade:	041b      	lsls	r3, r3, #16
 8006ae0:	185b      	adds	r3, r3, r1
 8006ae2:	c608      	stmia	r6!, {r3}
 8006ae4:	4287      	cmp	r7, r0
 8006ae6:	dcef      	bgt.n	8006ac8 <__multadd+0x10>
 8006ae8:	2d00      	cmp	r5, #0
 8006aea:	d022      	beq.n	8006b32 <__multadd+0x7a>
 8006aec:	68a3      	ldr	r3, [r4, #8]
 8006aee:	42bb      	cmp	r3, r7
 8006af0:	dc19      	bgt.n	8006b26 <__multadd+0x6e>
 8006af2:	6863      	ldr	r3, [r4, #4]
 8006af4:	9801      	ldr	r0, [sp, #4]
 8006af6:	1c59      	adds	r1, r3, #1
 8006af8:	f7ff ff76 	bl	80069e8 <_Balloc>
 8006afc:	1e06      	subs	r6, r0, #0
 8006afe:	d105      	bne.n	8006b0c <__multadd+0x54>
 8006b00:	0002      	movs	r2, r0
 8006b02:	21b5      	movs	r1, #181	; 0xb5
 8006b04:	4b0c      	ldr	r3, [pc, #48]	; (8006b38 <__multadd+0x80>)
 8006b06:	480d      	ldr	r0, [pc, #52]	; (8006b3c <__multadd+0x84>)
 8006b08:	f000 fd8c 	bl	8007624 <__assert_func>
 8006b0c:	0021      	movs	r1, r4
 8006b0e:	6923      	ldr	r3, [r4, #16]
 8006b10:	310c      	adds	r1, #12
 8006b12:	1c9a      	adds	r2, r3, #2
 8006b14:	0092      	lsls	r2, r2, #2
 8006b16:	300c      	adds	r0, #12
 8006b18:	f7ff ff5d 	bl	80069d6 <memcpy>
 8006b1c:	0021      	movs	r1, r4
 8006b1e:	9801      	ldr	r0, [sp, #4]
 8006b20:	f7ff ffa6 	bl	8006a70 <_Bfree>
 8006b24:	0034      	movs	r4, r6
 8006b26:	1d3b      	adds	r3, r7, #4
 8006b28:	009b      	lsls	r3, r3, #2
 8006b2a:	18e3      	adds	r3, r4, r3
 8006b2c:	605d      	str	r5, [r3, #4]
 8006b2e:	1c7b      	adds	r3, r7, #1
 8006b30:	6123      	str	r3, [r4, #16]
 8006b32:	0020      	movs	r0, r4
 8006b34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b36:	46c0      	nop			; (mov r8, r8)
 8006b38:	08008467 	.word	0x08008467
 8006b3c:	08008478 	.word	0x08008478

08006b40 <__hi0bits>:
 8006b40:	0003      	movs	r3, r0
 8006b42:	0c02      	lsrs	r2, r0, #16
 8006b44:	2000      	movs	r0, #0
 8006b46:	4282      	cmp	r2, r0
 8006b48:	d101      	bne.n	8006b4e <__hi0bits+0xe>
 8006b4a:	041b      	lsls	r3, r3, #16
 8006b4c:	3010      	adds	r0, #16
 8006b4e:	0e1a      	lsrs	r2, r3, #24
 8006b50:	d101      	bne.n	8006b56 <__hi0bits+0x16>
 8006b52:	3008      	adds	r0, #8
 8006b54:	021b      	lsls	r3, r3, #8
 8006b56:	0f1a      	lsrs	r2, r3, #28
 8006b58:	d101      	bne.n	8006b5e <__hi0bits+0x1e>
 8006b5a:	3004      	adds	r0, #4
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	0f9a      	lsrs	r2, r3, #30
 8006b60:	d101      	bne.n	8006b66 <__hi0bits+0x26>
 8006b62:	3002      	adds	r0, #2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	db03      	blt.n	8006b72 <__hi0bits+0x32>
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	d400      	bmi.n	8006b72 <__hi0bits+0x32>
 8006b70:	2020      	movs	r0, #32
 8006b72:	4770      	bx	lr

08006b74 <__lo0bits>:
 8006b74:	6803      	ldr	r3, [r0, #0]
 8006b76:	0002      	movs	r2, r0
 8006b78:	2107      	movs	r1, #7
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	4008      	ands	r0, r1
 8006b7e:	420b      	tst	r3, r1
 8006b80:	d00d      	beq.n	8006b9e <__lo0bits+0x2a>
 8006b82:	3906      	subs	r1, #6
 8006b84:	2000      	movs	r0, #0
 8006b86:	420b      	tst	r3, r1
 8006b88:	d105      	bne.n	8006b96 <__lo0bits+0x22>
 8006b8a:	3002      	adds	r0, #2
 8006b8c:	4203      	tst	r3, r0
 8006b8e:	d003      	beq.n	8006b98 <__lo0bits+0x24>
 8006b90:	40cb      	lsrs	r3, r1
 8006b92:	0008      	movs	r0, r1
 8006b94:	6013      	str	r3, [r2, #0]
 8006b96:	4770      	bx	lr
 8006b98:	089b      	lsrs	r3, r3, #2
 8006b9a:	6013      	str	r3, [r2, #0]
 8006b9c:	e7fb      	b.n	8006b96 <__lo0bits+0x22>
 8006b9e:	b299      	uxth	r1, r3
 8006ba0:	2900      	cmp	r1, #0
 8006ba2:	d101      	bne.n	8006ba8 <__lo0bits+0x34>
 8006ba4:	2010      	movs	r0, #16
 8006ba6:	0c1b      	lsrs	r3, r3, #16
 8006ba8:	b2d9      	uxtb	r1, r3
 8006baa:	2900      	cmp	r1, #0
 8006bac:	d101      	bne.n	8006bb2 <__lo0bits+0x3e>
 8006bae:	3008      	adds	r0, #8
 8006bb0:	0a1b      	lsrs	r3, r3, #8
 8006bb2:	0719      	lsls	r1, r3, #28
 8006bb4:	d101      	bne.n	8006bba <__lo0bits+0x46>
 8006bb6:	3004      	adds	r0, #4
 8006bb8:	091b      	lsrs	r3, r3, #4
 8006bba:	0799      	lsls	r1, r3, #30
 8006bbc:	d101      	bne.n	8006bc2 <__lo0bits+0x4e>
 8006bbe:	3002      	adds	r0, #2
 8006bc0:	089b      	lsrs	r3, r3, #2
 8006bc2:	07d9      	lsls	r1, r3, #31
 8006bc4:	d4e9      	bmi.n	8006b9a <__lo0bits+0x26>
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	085b      	lsrs	r3, r3, #1
 8006bca:	d1e6      	bne.n	8006b9a <__lo0bits+0x26>
 8006bcc:	2020      	movs	r0, #32
 8006bce:	e7e2      	b.n	8006b96 <__lo0bits+0x22>

08006bd0 <__i2b>:
 8006bd0:	b510      	push	{r4, lr}
 8006bd2:	000c      	movs	r4, r1
 8006bd4:	2101      	movs	r1, #1
 8006bd6:	f7ff ff07 	bl	80069e8 <_Balloc>
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d106      	bne.n	8006bec <__i2b+0x1c>
 8006bde:	21a0      	movs	r1, #160	; 0xa0
 8006be0:	0002      	movs	r2, r0
 8006be2:	4b04      	ldr	r3, [pc, #16]	; (8006bf4 <__i2b+0x24>)
 8006be4:	4804      	ldr	r0, [pc, #16]	; (8006bf8 <__i2b+0x28>)
 8006be6:	0049      	lsls	r1, r1, #1
 8006be8:	f000 fd1c 	bl	8007624 <__assert_func>
 8006bec:	2301      	movs	r3, #1
 8006bee:	6144      	str	r4, [r0, #20]
 8006bf0:	6103      	str	r3, [r0, #16]
 8006bf2:	bd10      	pop	{r4, pc}
 8006bf4:	08008467 	.word	0x08008467
 8006bf8:	08008478 	.word	0x08008478

08006bfc <__multiply>:
 8006bfc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bfe:	690b      	ldr	r3, [r1, #16]
 8006c00:	0014      	movs	r4, r2
 8006c02:	6912      	ldr	r2, [r2, #16]
 8006c04:	000d      	movs	r5, r1
 8006c06:	b089      	sub	sp, #36	; 0x24
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	da01      	bge.n	8006c10 <__multiply+0x14>
 8006c0c:	0025      	movs	r5, r4
 8006c0e:	000c      	movs	r4, r1
 8006c10:	692f      	ldr	r7, [r5, #16]
 8006c12:	6926      	ldr	r6, [r4, #16]
 8006c14:	6869      	ldr	r1, [r5, #4]
 8006c16:	19bb      	adds	r3, r7, r6
 8006c18:	9302      	str	r3, [sp, #8]
 8006c1a:	68ab      	ldr	r3, [r5, #8]
 8006c1c:	19ba      	adds	r2, r7, r6
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	da00      	bge.n	8006c24 <__multiply+0x28>
 8006c22:	3101      	adds	r1, #1
 8006c24:	f7ff fee0 	bl	80069e8 <_Balloc>
 8006c28:	9001      	str	r0, [sp, #4]
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d106      	bne.n	8006c3c <__multiply+0x40>
 8006c2e:	215e      	movs	r1, #94	; 0x5e
 8006c30:	0002      	movs	r2, r0
 8006c32:	4b48      	ldr	r3, [pc, #288]	; (8006d54 <__multiply+0x158>)
 8006c34:	4848      	ldr	r0, [pc, #288]	; (8006d58 <__multiply+0x15c>)
 8006c36:	31ff      	adds	r1, #255	; 0xff
 8006c38:	f000 fcf4 	bl	8007624 <__assert_func>
 8006c3c:	9b01      	ldr	r3, [sp, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	3314      	adds	r3, #20
 8006c42:	469c      	mov	ip, r3
 8006c44:	19bb      	adds	r3, r7, r6
 8006c46:	009b      	lsls	r3, r3, #2
 8006c48:	4463      	add	r3, ip
 8006c4a:	9303      	str	r3, [sp, #12]
 8006c4c:	4663      	mov	r3, ip
 8006c4e:	9903      	ldr	r1, [sp, #12]
 8006c50:	428b      	cmp	r3, r1
 8006c52:	d32c      	bcc.n	8006cae <__multiply+0xb2>
 8006c54:	002b      	movs	r3, r5
 8006c56:	0022      	movs	r2, r4
 8006c58:	3314      	adds	r3, #20
 8006c5a:	00bf      	lsls	r7, r7, #2
 8006c5c:	3214      	adds	r2, #20
 8006c5e:	9306      	str	r3, [sp, #24]
 8006c60:	00b6      	lsls	r6, r6, #2
 8006c62:	19db      	adds	r3, r3, r7
 8006c64:	9304      	str	r3, [sp, #16]
 8006c66:	1993      	adds	r3, r2, r6
 8006c68:	9307      	str	r3, [sp, #28]
 8006c6a:	2304      	movs	r3, #4
 8006c6c:	9305      	str	r3, [sp, #20]
 8006c6e:	002b      	movs	r3, r5
 8006c70:	9904      	ldr	r1, [sp, #16]
 8006c72:	3315      	adds	r3, #21
 8006c74:	9200      	str	r2, [sp, #0]
 8006c76:	4299      	cmp	r1, r3
 8006c78:	d305      	bcc.n	8006c86 <__multiply+0x8a>
 8006c7a:	1b4b      	subs	r3, r1, r5
 8006c7c:	3b15      	subs	r3, #21
 8006c7e:	089b      	lsrs	r3, r3, #2
 8006c80:	3301      	adds	r3, #1
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	9305      	str	r3, [sp, #20]
 8006c86:	9b07      	ldr	r3, [sp, #28]
 8006c88:	9a00      	ldr	r2, [sp, #0]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d311      	bcc.n	8006cb2 <__multiply+0xb6>
 8006c8e:	9b02      	ldr	r3, [sp, #8]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	dd06      	ble.n	8006ca2 <__multiply+0xa6>
 8006c94:	9b03      	ldr	r3, [sp, #12]
 8006c96:	3b04      	subs	r3, #4
 8006c98:	9303      	str	r3, [sp, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d053      	beq.n	8006d4a <__multiply+0x14e>
 8006ca2:	9b01      	ldr	r3, [sp, #4]
 8006ca4:	9a02      	ldr	r2, [sp, #8]
 8006ca6:	0018      	movs	r0, r3
 8006ca8:	611a      	str	r2, [r3, #16]
 8006caa:	b009      	add	sp, #36	; 0x24
 8006cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006cae:	c304      	stmia	r3!, {r2}
 8006cb0:	e7cd      	b.n	8006c4e <__multiply+0x52>
 8006cb2:	9b00      	ldr	r3, [sp, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	b298      	uxth	r0, r3
 8006cb8:	2800      	cmp	r0, #0
 8006cba:	d01b      	beq.n	8006cf4 <__multiply+0xf8>
 8006cbc:	4667      	mov	r7, ip
 8006cbe:	2400      	movs	r4, #0
 8006cc0:	9e06      	ldr	r6, [sp, #24]
 8006cc2:	ce02      	ldmia	r6!, {r1}
 8006cc4:	683a      	ldr	r2, [r7, #0]
 8006cc6:	b28b      	uxth	r3, r1
 8006cc8:	4343      	muls	r3, r0
 8006cca:	b292      	uxth	r2, r2
 8006ccc:	189b      	adds	r3, r3, r2
 8006cce:	191b      	adds	r3, r3, r4
 8006cd0:	0c0c      	lsrs	r4, r1, #16
 8006cd2:	4344      	muls	r4, r0
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	0c11      	lsrs	r1, r2, #16
 8006cd8:	1861      	adds	r1, r4, r1
 8006cda:	0c1c      	lsrs	r4, r3, #16
 8006cdc:	1909      	adds	r1, r1, r4
 8006cde:	0c0c      	lsrs	r4, r1, #16
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	0409      	lsls	r1, r1, #16
 8006ce4:	430b      	orrs	r3, r1
 8006ce6:	c708      	stmia	r7!, {r3}
 8006ce8:	9b04      	ldr	r3, [sp, #16]
 8006cea:	42b3      	cmp	r3, r6
 8006cec:	d8e9      	bhi.n	8006cc2 <__multiply+0xc6>
 8006cee:	4663      	mov	r3, ip
 8006cf0:	9a05      	ldr	r2, [sp, #20]
 8006cf2:	509c      	str	r4, [r3, r2]
 8006cf4:	9b00      	ldr	r3, [sp, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	0c1e      	lsrs	r6, r3, #16
 8006cfa:	d020      	beq.n	8006d3e <__multiply+0x142>
 8006cfc:	4663      	mov	r3, ip
 8006cfe:	002c      	movs	r4, r5
 8006d00:	4660      	mov	r0, ip
 8006d02:	2700      	movs	r7, #0
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3414      	adds	r4, #20
 8006d08:	6822      	ldr	r2, [r4, #0]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	b291      	uxth	r1, r2
 8006d0e:	4371      	muls	r1, r6
 8006d10:	6802      	ldr	r2, [r0, #0]
 8006d12:	0c12      	lsrs	r2, r2, #16
 8006d14:	1889      	adds	r1, r1, r2
 8006d16:	19cf      	adds	r7, r1, r7
 8006d18:	0439      	lsls	r1, r7, #16
 8006d1a:	430b      	orrs	r3, r1
 8006d1c:	6003      	str	r3, [r0, #0]
 8006d1e:	cc02      	ldmia	r4!, {r1}
 8006d20:	6843      	ldr	r3, [r0, #4]
 8006d22:	0c09      	lsrs	r1, r1, #16
 8006d24:	4371      	muls	r1, r6
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	0c3f      	lsrs	r7, r7, #16
 8006d2a:	18cb      	adds	r3, r1, r3
 8006d2c:	9a04      	ldr	r2, [sp, #16]
 8006d2e:	19db      	adds	r3, r3, r7
 8006d30:	0c1f      	lsrs	r7, r3, #16
 8006d32:	3004      	adds	r0, #4
 8006d34:	42a2      	cmp	r2, r4
 8006d36:	d8e7      	bhi.n	8006d08 <__multiply+0x10c>
 8006d38:	4662      	mov	r2, ip
 8006d3a:	9905      	ldr	r1, [sp, #20]
 8006d3c:	5053      	str	r3, [r2, r1]
 8006d3e:	9b00      	ldr	r3, [sp, #0]
 8006d40:	3304      	adds	r3, #4
 8006d42:	9300      	str	r3, [sp, #0]
 8006d44:	2304      	movs	r3, #4
 8006d46:	449c      	add	ip, r3
 8006d48:	e79d      	b.n	8006c86 <__multiply+0x8a>
 8006d4a:	9b02      	ldr	r3, [sp, #8]
 8006d4c:	3b01      	subs	r3, #1
 8006d4e:	9302      	str	r3, [sp, #8]
 8006d50:	e79d      	b.n	8006c8e <__multiply+0x92>
 8006d52:	46c0      	nop			; (mov r8, r8)
 8006d54:	08008467 	.word	0x08008467
 8006d58:	08008478 	.word	0x08008478

08006d5c <__pow5mult>:
 8006d5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d5e:	2303      	movs	r3, #3
 8006d60:	0015      	movs	r5, r2
 8006d62:	0007      	movs	r7, r0
 8006d64:	000e      	movs	r6, r1
 8006d66:	401a      	ands	r2, r3
 8006d68:	421d      	tst	r5, r3
 8006d6a:	d008      	beq.n	8006d7e <__pow5mult+0x22>
 8006d6c:	4925      	ldr	r1, [pc, #148]	; (8006e04 <__pow5mult+0xa8>)
 8006d6e:	3a01      	subs	r2, #1
 8006d70:	0092      	lsls	r2, r2, #2
 8006d72:	5852      	ldr	r2, [r2, r1]
 8006d74:	2300      	movs	r3, #0
 8006d76:	0031      	movs	r1, r6
 8006d78:	f7ff fe9e 	bl	8006ab8 <__multadd>
 8006d7c:	0006      	movs	r6, r0
 8006d7e:	10ad      	asrs	r5, r5, #2
 8006d80:	d03d      	beq.n	8006dfe <__pow5mult+0xa2>
 8006d82:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8006d84:	2c00      	cmp	r4, #0
 8006d86:	d10f      	bne.n	8006da8 <__pow5mult+0x4c>
 8006d88:	2010      	movs	r0, #16
 8006d8a:	f7ff fe0f 	bl	80069ac <malloc>
 8006d8e:	1e02      	subs	r2, r0, #0
 8006d90:	6278      	str	r0, [r7, #36]	; 0x24
 8006d92:	d105      	bne.n	8006da0 <__pow5mult+0x44>
 8006d94:	21d7      	movs	r1, #215	; 0xd7
 8006d96:	4b1c      	ldr	r3, [pc, #112]	; (8006e08 <__pow5mult+0xac>)
 8006d98:	481c      	ldr	r0, [pc, #112]	; (8006e0c <__pow5mult+0xb0>)
 8006d9a:	0049      	lsls	r1, r1, #1
 8006d9c:	f000 fc42 	bl	8007624 <__assert_func>
 8006da0:	6044      	str	r4, [r0, #4]
 8006da2:	6084      	str	r4, [r0, #8]
 8006da4:	6004      	str	r4, [r0, #0]
 8006da6:	60c4      	str	r4, [r0, #12]
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	689c      	ldr	r4, [r3, #8]
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	2c00      	cmp	r4, #0
 8006db0:	d108      	bne.n	8006dc4 <__pow5mult+0x68>
 8006db2:	0038      	movs	r0, r7
 8006db4:	4916      	ldr	r1, [pc, #88]	; (8006e10 <__pow5mult+0xb4>)
 8006db6:	f7ff ff0b 	bl	8006bd0 <__i2b>
 8006dba:	9b01      	ldr	r3, [sp, #4]
 8006dbc:	0004      	movs	r4, r0
 8006dbe:	6098      	str	r0, [r3, #8]
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	6003      	str	r3, [r0, #0]
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	421d      	tst	r5, r3
 8006dc8:	d00a      	beq.n	8006de0 <__pow5mult+0x84>
 8006dca:	0031      	movs	r1, r6
 8006dcc:	0022      	movs	r2, r4
 8006dce:	0038      	movs	r0, r7
 8006dd0:	f7ff ff14 	bl	8006bfc <__multiply>
 8006dd4:	0031      	movs	r1, r6
 8006dd6:	9001      	str	r0, [sp, #4]
 8006dd8:	0038      	movs	r0, r7
 8006dda:	f7ff fe49 	bl	8006a70 <_Bfree>
 8006dde:	9e01      	ldr	r6, [sp, #4]
 8006de0:	106d      	asrs	r5, r5, #1
 8006de2:	d00c      	beq.n	8006dfe <__pow5mult+0xa2>
 8006de4:	6820      	ldr	r0, [r4, #0]
 8006de6:	2800      	cmp	r0, #0
 8006de8:	d107      	bne.n	8006dfa <__pow5mult+0x9e>
 8006dea:	0022      	movs	r2, r4
 8006dec:	0021      	movs	r1, r4
 8006dee:	0038      	movs	r0, r7
 8006df0:	f7ff ff04 	bl	8006bfc <__multiply>
 8006df4:	2300      	movs	r3, #0
 8006df6:	6020      	str	r0, [r4, #0]
 8006df8:	6003      	str	r3, [r0, #0]
 8006dfa:	0004      	movs	r4, r0
 8006dfc:	e7e2      	b.n	8006dc4 <__pow5mult+0x68>
 8006dfe:	0030      	movs	r0, r6
 8006e00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e02:	46c0      	nop			; (mov r8, r8)
 8006e04:	080085c8 	.word	0x080085c8
 8006e08:	080083f5 	.word	0x080083f5
 8006e0c:	08008478 	.word	0x08008478
 8006e10:	00000271 	.word	0x00000271

08006e14 <__lshift>:
 8006e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e16:	000c      	movs	r4, r1
 8006e18:	0017      	movs	r7, r2
 8006e1a:	6923      	ldr	r3, [r4, #16]
 8006e1c:	1155      	asrs	r5, r2, #5
 8006e1e:	b087      	sub	sp, #28
 8006e20:	18eb      	adds	r3, r5, r3
 8006e22:	9302      	str	r3, [sp, #8]
 8006e24:	3301      	adds	r3, #1
 8006e26:	9301      	str	r3, [sp, #4]
 8006e28:	6849      	ldr	r1, [r1, #4]
 8006e2a:	68a3      	ldr	r3, [r4, #8]
 8006e2c:	9004      	str	r0, [sp, #16]
 8006e2e:	9a01      	ldr	r2, [sp, #4]
 8006e30:	4293      	cmp	r3, r2
 8006e32:	db10      	blt.n	8006e56 <__lshift+0x42>
 8006e34:	9804      	ldr	r0, [sp, #16]
 8006e36:	f7ff fdd7 	bl	80069e8 <_Balloc>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	0002      	movs	r2, r0
 8006e3e:	0006      	movs	r6, r0
 8006e40:	0019      	movs	r1, r3
 8006e42:	3214      	adds	r2, #20
 8006e44:	4298      	cmp	r0, r3
 8006e46:	d10c      	bne.n	8006e62 <__lshift+0x4e>
 8006e48:	21da      	movs	r1, #218	; 0xda
 8006e4a:	0002      	movs	r2, r0
 8006e4c:	4b26      	ldr	r3, [pc, #152]	; (8006ee8 <__lshift+0xd4>)
 8006e4e:	4827      	ldr	r0, [pc, #156]	; (8006eec <__lshift+0xd8>)
 8006e50:	31ff      	adds	r1, #255	; 0xff
 8006e52:	f000 fbe7 	bl	8007624 <__assert_func>
 8006e56:	3101      	adds	r1, #1
 8006e58:	005b      	lsls	r3, r3, #1
 8006e5a:	e7e8      	b.n	8006e2e <__lshift+0x1a>
 8006e5c:	0098      	lsls	r0, r3, #2
 8006e5e:	5011      	str	r1, [r2, r0]
 8006e60:	3301      	adds	r3, #1
 8006e62:	42ab      	cmp	r3, r5
 8006e64:	dbfa      	blt.n	8006e5c <__lshift+0x48>
 8006e66:	43eb      	mvns	r3, r5
 8006e68:	17db      	asrs	r3, r3, #31
 8006e6a:	401d      	ands	r5, r3
 8006e6c:	211f      	movs	r1, #31
 8006e6e:	0023      	movs	r3, r4
 8006e70:	0038      	movs	r0, r7
 8006e72:	00ad      	lsls	r5, r5, #2
 8006e74:	1955      	adds	r5, r2, r5
 8006e76:	6922      	ldr	r2, [r4, #16]
 8006e78:	3314      	adds	r3, #20
 8006e7a:	0092      	lsls	r2, r2, #2
 8006e7c:	4008      	ands	r0, r1
 8006e7e:	4684      	mov	ip, r0
 8006e80:	189a      	adds	r2, r3, r2
 8006e82:	420f      	tst	r7, r1
 8006e84:	d02a      	beq.n	8006edc <__lshift+0xc8>
 8006e86:	3101      	adds	r1, #1
 8006e88:	1a09      	subs	r1, r1, r0
 8006e8a:	9105      	str	r1, [sp, #20]
 8006e8c:	2100      	movs	r1, #0
 8006e8e:	9503      	str	r5, [sp, #12]
 8006e90:	4667      	mov	r7, ip
 8006e92:	6818      	ldr	r0, [r3, #0]
 8006e94:	40b8      	lsls	r0, r7
 8006e96:	4301      	orrs	r1, r0
 8006e98:	9803      	ldr	r0, [sp, #12]
 8006e9a:	c002      	stmia	r0!, {r1}
 8006e9c:	cb02      	ldmia	r3!, {r1}
 8006e9e:	9003      	str	r0, [sp, #12]
 8006ea0:	9805      	ldr	r0, [sp, #20]
 8006ea2:	40c1      	lsrs	r1, r0
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d8f3      	bhi.n	8006e90 <__lshift+0x7c>
 8006ea8:	0020      	movs	r0, r4
 8006eaa:	3015      	adds	r0, #21
 8006eac:	2304      	movs	r3, #4
 8006eae:	4282      	cmp	r2, r0
 8006eb0:	d304      	bcc.n	8006ebc <__lshift+0xa8>
 8006eb2:	1b13      	subs	r3, r2, r4
 8006eb4:	3b15      	subs	r3, #21
 8006eb6:	089b      	lsrs	r3, r3, #2
 8006eb8:	3301      	adds	r3, #1
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	50e9      	str	r1, [r5, r3]
 8006ebe:	2900      	cmp	r1, #0
 8006ec0:	d002      	beq.n	8006ec8 <__lshift+0xb4>
 8006ec2:	9b02      	ldr	r3, [sp, #8]
 8006ec4:	3302      	adds	r3, #2
 8006ec6:	9301      	str	r3, [sp, #4]
 8006ec8:	9b01      	ldr	r3, [sp, #4]
 8006eca:	9804      	ldr	r0, [sp, #16]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	0021      	movs	r1, r4
 8006ed0:	6133      	str	r3, [r6, #16]
 8006ed2:	f7ff fdcd 	bl	8006a70 <_Bfree>
 8006ed6:	0030      	movs	r0, r6
 8006ed8:	b007      	add	sp, #28
 8006eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006edc:	cb02      	ldmia	r3!, {r1}
 8006ede:	c502      	stmia	r5!, {r1}
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d8fb      	bhi.n	8006edc <__lshift+0xc8>
 8006ee4:	e7f0      	b.n	8006ec8 <__lshift+0xb4>
 8006ee6:	46c0      	nop			; (mov r8, r8)
 8006ee8:	08008467 	.word	0x08008467
 8006eec:	08008478 	.word	0x08008478

08006ef0 <__mcmp>:
 8006ef0:	6902      	ldr	r2, [r0, #16]
 8006ef2:	690b      	ldr	r3, [r1, #16]
 8006ef4:	b530      	push	{r4, r5, lr}
 8006ef6:	0004      	movs	r4, r0
 8006ef8:	1ad0      	subs	r0, r2, r3
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d10d      	bne.n	8006f1a <__mcmp+0x2a>
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	3414      	adds	r4, #20
 8006f02:	3114      	adds	r1, #20
 8006f04:	18e2      	adds	r2, r4, r3
 8006f06:	18c9      	adds	r1, r1, r3
 8006f08:	3a04      	subs	r2, #4
 8006f0a:	3904      	subs	r1, #4
 8006f0c:	6815      	ldr	r5, [r2, #0]
 8006f0e:	680b      	ldr	r3, [r1, #0]
 8006f10:	429d      	cmp	r5, r3
 8006f12:	d003      	beq.n	8006f1c <__mcmp+0x2c>
 8006f14:	2001      	movs	r0, #1
 8006f16:	429d      	cmp	r5, r3
 8006f18:	d303      	bcc.n	8006f22 <__mcmp+0x32>
 8006f1a:	bd30      	pop	{r4, r5, pc}
 8006f1c:	4294      	cmp	r4, r2
 8006f1e:	d3f3      	bcc.n	8006f08 <__mcmp+0x18>
 8006f20:	e7fb      	b.n	8006f1a <__mcmp+0x2a>
 8006f22:	4240      	negs	r0, r0
 8006f24:	e7f9      	b.n	8006f1a <__mcmp+0x2a>
	...

08006f28 <__mdiff>:
 8006f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f2a:	000e      	movs	r6, r1
 8006f2c:	0007      	movs	r7, r0
 8006f2e:	0011      	movs	r1, r2
 8006f30:	0030      	movs	r0, r6
 8006f32:	b087      	sub	sp, #28
 8006f34:	0014      	movs	r4, r2
 8006f36:	f7ff ffdb 	bl	8006ef0 <__mcmp>
 8006f3a:	1e05      	subs	r5, r0, #0
 8006f3c:	d110      	bne.n	8006f60 <__mdiff+0x38>
 8006f3e:	0001      	movs	r1, r0
 8006f40:	0038      	movs	r0, r7
 8006f42:	f7ff fd51 	bl	80069e8 <_Balloc>
 8006f46:	1e02      	subs	r2, r0, #0
 8006f48:	d104      	bne.n	8006f54 <__mdiff+0x2c>
 8006f4a:	4b40      	ldr	r3, [pc, #256]	; (800704c <__mdiff+0x124>)
 8006f4c:	4940      	ldr	r1, [pc, #256]	; (8007050 <__mdiff+0x128>)
 8006f4e:	4841      	ldr	r0, [pc, #260]	; (8007054 <__mdiff+0x12c>)
 8006f50:	f000 fb68 	bl	8007624 <__assert_func>
 8006f54:	2301      	movs	r3, #1
 8006f56:	6145      	str	r5, [r0, #20]
 8006f58:	6103      	str	r3, [r0, #16]
 8006f5a:	0010      	movs	r0, r2
 8006f5c:	b007      	add	sp, #28
 8006f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f60:	2301      	movs	r3, #1
 8006f62:	9301      	str	r3, [sp, #4]
 8006f64:	2800      	cmp	r0, #0
 8006f66:	db04      	blt.n	8006f72 <__mdiff+0x4a>
 8006f68:	0023      	movs	r3, r4
 8006f6a:	0034      	movs	r4, r6
 8006f6c:	001e      	movs	r6, r3
 8006f6e:	2300      	movs	r3, #0
 8006f70:	9301      	str	r3, [sp, #4]
 8006f72:	0038      	movs	r0, r7
 8006f74:	6861      	ldr	r1, [r4, #4]
 8006f76:	f7ff fd37 	bl	80069e8 <_Balloc>
 8006f7a:	1e02      	subs	r2, r0, #0
 8006f7c:	d103      	bne.n	8006f86 <__mdiff+0x5e>
 8006f7e:	2190      	movs	r1, #144	; 0x90
 8006f80:	4b32      	ldr	r3, [pc, #200]	; (800704c <__mdiff+0x124>)
 8006f82:	0089      	lsls	r1, r1, #2
 8006f84:	e7e3      	b.n	8006f4e <__mdiff+0x26>
 8006f86:	9b01      	ldr	r3, [sp, #4]
 8006f88:	2700      	movs	r7, #0
 8006f8a:	60c3      	str	r3, [r0, #12]
 8006f8c:	6920      	ldr	r0, [r4, #16]
 8006f8e:	3414      	adds	r4, #20
 8006f90:	9401      	str	r4, [sp, #4]
 8006f92:	9b01      	ldr	r3, [sp, #4]
 8006f94:	0084      	lsls	r4, r0, #2
 8006f96:	191b      	adds	r3, r3, r4
 8006f98:	0034      	movs	r4, r6
 8006f9a:	9302      	str	r3, [sp, #8]
 8006f9c:	6933      	ldr	r3, [r6, #16]
 8006f9e:	3414      	adds	r4, #20
 8006fa0:	0099      	lsls	r1, r3, #2
 8006fa2:	1863      	adds	r3, r4, r1
 8006fa4:	9303      	str	r3, [sp, #12]
 8006fa6:	0013      	movs	r3, r2
 8006fa8:	3314      	adds	r3, #20
 8006faa:	469c      	mov	ip, r3
 8006fac:	9305      	str	r3, [sp, #20]
 8006fae:	9b01      	ldr	r3, [sp, #4]
 8006fb0:	9304      	str	r3, [sp, #16]
 8006fb2:	9b04      	ldr	r3, [sp, #16]
 8006fb4:	cc02      	ldmia	r4!, {r1}
 8006fb6:	cb20      	ldmia	r3!, {r5}
 8006fb8:	9304      	str	r3, [sp, #16]
 8006fba:	b2ab      	uxth	r3, r5
 8006fbc:	19df      	adds	r7, r3, r7
 8006fbe:	b28b      	uxth	r3, r1
 8006fc0:	1afb      	subs	r3, r7, r3
 8006fc2:	0c09      	lsrs	r1, r1, #16
 8006fc4:	0c2d      	lsrs	r5, r5, #16
 8006fc6:	1a6d      	subs	r5, r5, r1
 8006fc8:	1419      	asrs	r1, r3, #16
 8006fca:	186d      	adds	r5, r5, r1
 8006fcc:	4661      	mov	r1, ip
 8006fce:	142f      	asrs	r7, r5, #16
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	042d      	lsls	r5, r5, #16
 8006fd4:	432b      	orrs	r3, r5
 8006fd6:	c108      	stmia	r1!, {r3}
 8006fd8:	9b03      	ldr	r3, [sp, #12]
 8006fda:	468c      	mov	ip, r1
 8006fdc:	42a3      	cmp	r3, r4
 8006fde:	d8e8      	bhi.n	8006fb2 <__mdiff+0x8a>
 8006fe0:	0031      	movs	r1, r6
 8006fe2:	9c03      	ldr	r4, [sp, #12]
 8006fe4:	3115      	adds	r1, #21
 8006fe6:	2304      	movs	r3, #4
 8006fe8:	428c      	cmp	r4, r1
 8006fea:	d304      	bcc.n	8006ff6 <__mdiff+0xce>
 8006fec:	1ba3      	subs	r3, r4, r6
 8006fee:	3b15      	subs	r3, #21
 8006ff0:	089b      	lsrs	r3, r3, #2
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	9901      	ldr	r1, [sp, #4]
 8006ff8:	18cc      	adds	r4, r1, r3
 8006ffa:	9905      	ldr	r1, [sp, #20]
 8006ffc:	0026      	movs	r6, r4
 8006ffe:	18cb      	adds	r3, r1, r3
 8007000:	469c      	mov	ip, r3
 8007002:	9902      	ldr	r1, [sp, #8]
 8007004:	428e      	cmp	r6, r1
 8007006:	d310      	bcc.n	800702a <__mdiff+0x102>
 8007008:	9e02      	ldr	r6, [sp, #8]
 800700a:	1ee1      	subs	r1, r4, #3
 800700c:	2500      	movs	r5, #0
 800700e:	428e      	cmp	r6, r1
 8007010:	d304      	bcc.n	800701c <__mdiff+0xf4>
 8007012:	0031      	movs	r1, r6
 8007014:	3103      	adds	r1, #3
 8007016:	1b0c      	subs	r4, r1, r4
 8007018:	08a4      	lsrs	r4, r4, #2
 800701a:	00a5      	lsls	r5, r4, #2
 800701c:	195b      	adds	r3, r3, r5
 800701e:	3b04      	subs	r3, #4
 8007020:	6819      	ldr	r1, [r3, #0]
 8007022:	2900      	cmp	r1, #0
 8007024:	d00f      	beq.n	8007046 <__mdiff+0x11e>
 8007026:	6110      	str	r0, [r2, #16]
 8007028:	e797      	b.n	8006f5a <__mdiff+0x32>
 800702a:	ce02      	ldmia	r6!, {r1}
 800702c:	b28d      	uxth	r5, r1
 800702e:	19ed      	adds	r5, r5, r7
 8007030:	0c0f      	lsrs	r7, r1, #16
 8007032:	1429      	asrs	r1, r5, #16
 8007034:	1879      	adds	r1, r7, r1
 8007036:	140f      	asrs	r7, r1, #16
 8007038:	b2ad      	uxth	r5, r5
 800703a:	0409      	lsls	r1, r1, #16
 800703c:	430d      	orrs	r5, r1
 800703e:	4661      	mov	r1, ip
 8007040:	c120      	stmia	r1!, {r5}
 8007042:	468c      	mov	ip, r1
 8007044:	e7dd      	b.n	8007002 <__mdiff+0xda>
 8007046:	3801      	subs	r0, #1
 8007048:	e7e9      	b.n	800701e <__mdiff+0xf6>
 800704a:	46c0      	nop			; (mov r8, r8)
 800704c:	08008467 	.word	0x08008467
 8007050:	00000232 	.word	0x00000232
 8007054:	08008478 	.word	0x08008478

08007058 <__d2b>:
 8007058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800705a:	2101      	movs	r1, #1
 800705c:	0014      	movs	r4, r2
 800705e:	001e      	movs	r6, r3
 8007060:	9f08      	ldr	r7, [sp, #32]
 8007062:	f7ff fcc1 	bl	80069e8 <_Balloc>
 8007066:	1e05      	subs	r5, r0, #0
 8007068:	d105      	bne.n	8007076 <__d2b+0x1e>
 800706a:	0002      	movs	r2, r0
 800706c:	4b26      	ldr	r3, [pc, #152]	; (8007108 <__d2b+0xb0>)
 800706e:	4927      	ldr	r1, [pc, #156]	; (800710c <__d2b+0xb4>)
 8007070:	4827      	ldr	r0, [pc, #156]	; (8007110 <__d2b+0xb8>)
 8007072:	f000 fad7 	bl	8007624 <__assert_func>
 8007076:	0333      	lsls	r3, r6, #12
 8007078:	0076      	lsls	r6, r6, #1
 800707a:	0b1b      	lsrs	r3, r3, #12
 800707c:	0d76      	lsrs	r6, r6, #21
 800707e:	d124      	bne.n	80070ca <__d2b+0x72>
 8007080:	9301      	str	r3, [sp, #4]
 8007082:	2c00      	cmp	r4, #0
 8007084:	d027      	beq.n	80070d6 <__d2b+0x7e>
 8007086:	4668      	mov	r0, sp
 8007088:	9400      	str	r4, [sp, #0]
 800708a:	f7ff fd73 	bl	8006b74 <__lo0bits>
 800708e:	9c00      	ldr	r4, [sp, #0]
 8007090:	2800      	cmp	r0, #0
 8007092:	d01e      	beq.n	80070d2 <__d2b+0x7a>
 8007094:	9b01      	ldr	r3, [sp, #4]
 8007096:	2120      	movs	r1, #32
 8007098:	001a      	movs	r2, r3
 800709a:	1a09      	subs	r1, r1, r0
 800709c:	408a      	lsls	r2, r1
 800709e:	40c3      	lsrs	r3, r0
 80070a0:	4322      	orrs	r2, r4
 80070a2:	616a      	str	r2, [r5, #20]
 80070a4:	9301      	str	r3, [sp, #4]
 80070a6:	9c01      	ldr	r4, [sp, #4]
 80070a8:	61ac      	str	r4, [r5, #24]
 80070aa:	1e63      	subs	r3, r4, #1
 80070ac:	419c      	sbcs	r4, r3
 80070ae:	3401      	adds	r4, #1
 80070b0:	612c      	str	r4, [r5, #16]
 80070b2:	2e00      	cmp	r6, #0
 80070b4:	d018      	beq.n	80070e8 <__d2b+0x90>
 80070b6:	4b17      	ldr	r3, [pc, #92]	; (8007114 <__d2b+0xbc>)
 80070b8:	18f6      	adds	r6, r6, r3
 80070ba:	2335      	movs	r3, #53	; 0x35
 80070bc:	1836      	adds	r6, r6, r0
 80070be:	1a18      	subs	r0, r3, r0
 80070c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070c2:	603e      	str	r6, [r7, #0]
 80070c4:	6018      	str	r0, [r3, #0]
 80070c6:	0028      	movs	r0, r5
 80070c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070ca:	2280      	movs	r2, #128	; 0x80
 80070cc:	0352      	lsls	r2, r2, #13
 80070ce:	4313      	orrs	r3, r2
 80070d0:	e7d6      	b.n	8007080 <__d2b+0x28>
 80070d2:	616c      	str	r4, [r5, #20]
 80070d4:	e7e7      	b.n	80070a6 <__d2b+0x4e>
 80070d6:	a801      	add	r0, sp, #4
 80070d8:	f7ff fd4c 	bl	8006b74 <__lo0bits>
 80070dc:	2401      	movs	r4, #1
 80070de:	9b01      	ldr	r3, [sp, #4]
 80070e0:	612c      	str	r4, [r5, #16]
 80070e2:	616b      	str	r3, [r5, #20]
 80070e4:	3020      	adds	r0, #32
 80070e6:	e7e4      	b.n	80070b2 <__d2b+0x5a>
 80070e8:	4b0b      	ldr	r3, [pc, #44]	; (8007118 <__d2b+0xc0>)
 80070ea:	18c0      	adds	r0, r0, r3
 80070ec:	4b0b      	ldr	r3, [pc, #44]	; (800711c <__d2b+0xc4>)
 80070ee:	6038      	str	r0, [r7, #0]
 80070f0:	18e3      	adds	r3, r4, r3
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	18eb      	adds	r3, r5, r3
 80070f6:	6958      	ldr	r0, [r3, #20]
 80070f8:	f7ff fd22 	bl	8006b40 <__hi0bits>
 80070fc:	0164      	lsls	r4, r4, #5
 80070fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007100:	1a24      	subs	r4, r4, r0
 8007102:	601c      	str	r4, [r3, #0]
 8007104:	e7df      	b.n	80070c6 <__d2b+0x6e>
 8007106:	46c0      	nop			; (mov r8, r8)
 8007108:	08008467 	.word	0x08008467
 800710c:	0000030a 	.word	0x0000030a
 8007110:	08008478 	.word	0x08008478
 8007114:	fffffbcd 	.word	0xfffffbcd
 8007118:	fffffbce 	.word	0xfffffbce
 800711c:	3fffffff 	.word	0x3fffffff

08007120 <_calloc_r>:
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	0c13      	lsrs	r3, r2, #16
 8007124:	0c0d      	lsrs	r5, r1, #16
 8007126:	d11e      	bne.n	8007166 <_calloc_r+0x46>
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10c      	bne.n	8007146 <_calloc_r+0x26>
 800712c:	b289      	uxth	r1, r1
 800712e:	b294      	uxth	r4, r2
 8007130:	434c      	muls	r4, r1
 8007132:	0021      	movs	r1, r4
 8007134:	f000 f88c 	bl	8007250 <_malloc_r>
 8007138:	1e05      	subs	r5, r0, #0
 800713a:	d01b      	beq.n	8007174 <_calloc_r+0x54>
 800713c:	0022      	movs	r2, r4
 800713e:	2100      	movs	r1, #0
 8007140:	f7fe f8f4 	bl	800532c <memset>
 8007144:	e016      	b.n	8007174 <_calloc_r+0x54>
 8007146:	1c1d      	adds	r5, r3, #0
 8007148:	1c0b      	adds	r3, r1, #0
 800714a:	b292      	uxth	r2, r2
 800714c:	b289      	uxth	r1, r1
 800714e:	b29c      	uxth	r4, r3
 8007150:	4351      	muls	r1, r2
 8007152:	b2ab      	uxth	r3, r5
 8007154:	4363      	muls	r3, r4
 8007156:	0c0c      	lsrs	r4, r1, #16
 8007158:	191c      	adds	r4, r3, r4
 800715a:	0c22      	lsrs	r2, r4, #16
 800715c:	d107      	bne.n	800716e <_calloc_r+0x4e>
 800715e:	0424      	lsls	r4, r4, #16
 8007160:	b289      	uxth	r1, r1
 8007162:	430c      	orrs	r4, r1
 8007164:	e7e5      	b.n	8007132 <_calloc_r+0x12>
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <_calloc_r+0x4e>
 800716a:	1c13      	adds	r3, r2, #0
 800716c:	e7ed      	b.n	800714a <_calloc_r+0x2a>
 800716e:	230c      	movs	r3, #12
 8007170:	2500      	movs	r5, #0
 8007172:	6003      	str	r3, [r0, #0]
 8007174:	0028      	movs	r0, r5
 8007176:	bd70      	pop	{r4, r5, r6, pc}

08007178 <_free_r>:
 8007178:	b570      	push	{r4, r5, r6, lr}
 800717a:	0005      	movs	r5, r0
 800717c:	2900      	cmp	r1, #0
 800717e:	d010      	beq.n	80071a2 <_free_r+0x2a>
 8007180:	1f0c      	subs	r4, r1, #4
 8007182:	6823      	ldr	r3, [r4, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	da00      	bge.n	800718a <_free_r+0x12>
 8007188:	18e4      	adds	r4, r4, r3
 800718a:	0028      	movs	r0, r5
 800718c:	f000 fa9e 	bl	80076cc <__malloc_lock>
 8007190:	4a1d      	ldr	r2, [pc, #116]	; (8007208 <_free_r+0x90>)
 8007192:	6813      	ldr	r3, [r2, #0]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d105      	bne.n	80071a4 <_free_r+0x2c>
 8007198:	6063      	str	r3, [r4, #4]
 800719a:	6014      	str	r4, [r2, #0]
 800719c:	0028      	movs	r0, r5
 800719e:	f000 fa9d 	bl	80076dc <__malloc_unlock>
 80071a2:	bd70      	pop	{r4, r5, r6, pc}
 80071a4:	42a3      	cmp	r3, r4
 80071a6:	d908      	bls.n	80071ba <_free_r+0x42>
 80071a8:	6821      	ldr	r1, [r4, #0]
 80071aa:	1860      	adds	r0, r4, r1
 80071ac:	4283      	cmp	r3, r0
 80071ae:	d1f3      	bne.n	8007198 <_free_r+0x20>
 80071b0:	6818      	ldr	r0, [r3, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	1841      	adds	r1, r0, r1
 80071b6:	6021      	str	r1, [r4, #0]
 80071b8:	e7ee      	b.n	8007198 <_free_r+0x20>
 80071ba:	001a      	movs	r2, r3
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <_free_r+0x4e>
 80071c2:	42a3      	cmp	r3, r4
 80071c4:	d9f9      	bls.n	80071ba <_free_r+0x42>
 80071c6:	6811      	ldr	r1, [r2, #0]
 80071c8:	1850      	adds	r0, r2, r1
 80071ca:	42a0      	cmp	r0, r4
 80071cc:	d10b      	bne.n	80071e6 <_free_r+0x6e>
 80071ce:	6820      	ldr	r0, [r4, #0]
 80071d0:	1809      	adds	r1, r1, r0
 80071d2:	1850      	adds	r0, r2, r1
 80071d4:	6011      	str	r1, [r2, #0]
 80071d6:	4283      	cmp	r3, r0
 80071d8:	d1e0      	bne.n	800719c <_free_r+0x24>
 80071da:	6818      	ldr	r0, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	1841      	adds	r1, r0, r1
 80071e0:	6011      	str	r1, [r2, #0]
 80071e2:	6053      	str	r3, [r2, #4]
 80071e4:	e7da      	b.n	800719c <_free_r+0x24>
 80071e6:	42a0      	cmp	r0, r4
 80071e8:	d902      	bls.n	80071f0 <_free_r+0x78>
 80071ea:	230c      	movs	r3, #12
 80071ec:	602b      	str	r3, [r5, #0]
 80071ee:	e7d5      	b.n	800719c <_free_r+0x24>
 80071f0:	6821      	ldr	r1, [r4, #0]
 80071f2:	1860      	adds	r0, r4, r1
 80071f4:	4283      	cmp	r3, r0
 80071f6:	d103      	bne.n	8007200 <_free_r+0x88>
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	1841      	adds	r1, r0, r1
 80071fe:	6021      	str	r1, [r4, #0]
 8007200:	6063      	str	r3, [r4, #4]
 8007202:	6054      	str	r4, [r2, #4]
 8007204:	e7ca      	b.n	800719c <_free_r+0x24>
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	20000390 	.word	0x20000390

0800720c <sbrk_aligned>:
 800720c:	b570      	push	{r4, r5, r6, lr}
 800720e:	4e0f      	ldr	r6, [pc, #60]	; (800724c <sbrk_aligned+0x40>)
 8007210:	000d      	movs	r5, r1
 8007212:	6831      	ldr	r1, [r6, #0]
 8007214:	0004      	movs	r4, r0
 8007216:	2900      	cmp	r1, #0
 8007218:	d102      	bne.n	8007220 <sbrk_aligned+0x14>
 800721a:	f000 f9f1 	bl	8007600 <_sbrk_r>
 800721e:	6030      	str	r0, [r6, #0]
 8007220:	0029      	movs	r1, r5
 8007222:	0020      	movs	r0, r4
 8007224:	f000 f9ec 	bl	8007600 <_sbrk_r>
 8007228:	1c43      	adds	r3, r0, #1
 800722a:	d00a      	beq.n	8007242 <sbrk_aligned+0x36>
 800722c:	2303      	movs	r3, #3
 800722e:	1cc5      	adds	r5, r0, #3
 8007230:	439d      	bics	r5, r3
 8007232:	42a8      	cmp	r0, r5
 8007234:	d007      	beq.n	8007246 <sbrk_aligned+0x3a>
 8007236:	1a29      	subs	r1, r5, r0
 8007238:	0020      	movs	r0, r4
 800723a:	f000 f9e1 	bl	8007600 <_sbrk_r>
 800723e:	1c43      	adds	r3, r0, #1
 8007240:	d101      	bne.n	8007246 <sbrk_aligned+0x3a>
 8007242:	2501      	movs	r5, #1
 8007244:	426d      	negs	r5, r5
 8007246:	0028      	movs	r0, r5
 8007248:	bd70      	pop	{r4, r5, r6, pc}
 800724a:	46c0      	nop			; (mov r8, r8)
 800724c:	20000394 	.word	0x20000394

08007250 <_malloc_r>:
 8007250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007252:	2203      	movs	r2, #3
 8007254:	1ccb      	adds	r3, r1, #3
 8007256:	4393      	bics	r3, r2
 8007258:	3308      	adds	r3, #8
 800725a:	0006      	movs	r6, r0
 800725c:	001f      	movs	r7, r3
 800725e:	2b0c      	cmp	r3, #12
 8007260:	d232      	bcs.n	80072c8 <_malloc_r+0x78>
 8007262:	270c      	movs	r7, #12
 8007264:	42b9      	cmp	r1, r7
 8007266:	d831      	bhi.n	80072cc <_malloc_r+0x7c>
 8007268:	0030      	movs	r0, r6
 800726a:	f000 fa2f 	bl	80076cc <__malloc_lock>
 800726e:	4d32      	ldr	r5, [pc, #200]	; (8007338 <_malloc_r+0xe8>)
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	001c      	movs	r4, r3
 8007274:	2c00      	cmp	r4, #0
 8007276:	d12e      	bne.n	80072d6 <_malloc_r+0x86>
 8007278:	0039      	movs	r1, r7
 800727a:	0030      	movs	r0, r6
 800727c:	f7ff ffc6 	bl	800720c <sbrk_aligned>
 8007280:	0004      	movs	r4, r0
 8007282:	1c43      	adds	r3, r0, #1
 8007284:	d11e      	bne.n	80072c4 <_malloc_r+0x74>
 8007286:	682c      	ldr	r4, [r5, #0]
 8007288:	0025      	movs	r5, r4
 800728a:	2d00      	cmp	r5, #0
 800728c:	d14a      	bne.n	8007324 <_malloc_r+0xd4>
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	0029      	movs	r1, r5
 8007292:	18e3      	adds	r3, r4, r3
 8007294:	0030      	movs	r0, r6
 8007296:	9301      	str	r3, [sp, #4]
 8007298:	f000 f9b2 	bl	8007600 <_sbrk_r>
 800729c:	9b01      	ldr	r3, [sp, #4]
 800729e:	4283      	cmp	r3, r0
 80072a0:	d143      	bne.n	800732a <_malloc_r+0xda>
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	3703      	adds	r7, #3
 80072a6:	1aff      	subs	r7, r7, r3
 80072a8:	2303      	movs	r3, #3
 80072aa:	439f      	bics	r7, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	2f0c      	cmp	r7, #12
 80072b0:	d200      	bcs.n	80072b4 <_malloc_r+0x64>
 80072b2:	270c      	movs	r7, #12
 80072b4:	0039      	movs	r1, r7
 80072b6:	0030      	movs	r0, r6
 80072b8:	f7ff ffa8 	bl	800720c <sbrk_aligned>
 80072bc:	1c43      	adds	r3, r0, #1
 80072be:	d034      	beq.n	800732a <_malloc_r+0xda>
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	19df      	adds	r7, r3, r7
 80072c4:	6027      	str	r7, [r4, #0]
 80072c6:	e013      	b.n	80072f0 <_malloc_r+0xa0>
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	dacb      	bge.n	8007264 <_malloc_r+0x14>
 80072cc:	230c      	movs	r3, #12
 80072ce:	2500      	movs	r5, #0
 80072d0:	6033      	str	r3, [r6, #0]
 80072d2:	0028      	movs	r0, r5
 80072d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80072d6:	6822      	ldr	r2, [r4, #0]
 80072d8:	1bd1      	subs	r1, r2, r7
 80072da:	d420      	bmi.n	800731e <_malloc_r+0xce>
 80072dc:	290b      	cmp	r1, #11
 80072de:	d917      	bls.n	8007310 <_malloc_r+0xc0>
 80072e0:	19e2      	adds	r2, r4, r7
 80072e2:	6027      	str	r7, [r4, #0]
 80072e4:	42a3      	cmp	r3, r4
 80072e6:	d111      	bne.n	800730c <_malloc_r+0xbc>
 80072e8:	602a      	str	r2, [r5, #0]
 80072ea:	6863      	ldr	r3, [r4, #4]
 80072ec:	6011      	str	r1, [r2, #0]
 80072ee:	6053      	str	r3, [r2, #4]
 80072f0:	0030      	movs	r0, r6
 80072f2:	0025      	movs	r5, r4
 80072f4:	f000 f9f2 	bl	80076dc <__malloc_unlock>
 80072f8:	2207      	movs	r2, #7
 80072fa:	350b      	adds	r5, #11
 80072fc:	1d23      	adds	r3, r4, #4
 80072fe:	4395      	bics	r5, r2
 8007300:	1aea      	subs	r2, r5, r3
 8007302:	429d      	cmp	r5, r3
 8007304:	d0e5      	beq.n	80072d2 <_malloc_r+0x82>
 8007306:	1b5b      	subs	r3, r3, r5
 8007308:	50a3      	str	r3, [r4, r2]
 800730a:	e7e2      	b.n	80072d2 <_malloc_r+0x82>
 800730c:	605a      	str	r2, [r3, #4]
 800730e:	e7ec      	b.n	80072ea <_malloc_r+0x9a>
 8007310:	6862      	ldr	r2, [r4, #4]
 8007312:	42a3      	cmp	r3, r4
 8007314:	d101      	bne.n	800731a <_malloc_r+0xca>
 8007316:	602a      	str	r2, [r5, #0]
 8007318:	e7ea      	b.n	80072f0 <_malloc_r+0xa0>
 800731a:	605a      	str	r2, [r3, #4]
 800731c:	e7e8      	b.n	80072f0 <_malloc_r+0xa0>
 800731e:	0023      	movs	r3, r4
 8007320:	6864      	ldr	r4, [r4, #4]
 8007322:	e7a7      	b.n	8007274 <_malloc_r+0x24>
 8007324:	002c      	movs	r4, r5
 8007326:	686d      	ldr	r5, [r5, #4]
 8007328:	e7af      	b.n	800728a <_malloc_r+0x3a>
 800732a:	230c      	movs	r3, #12
 800732c:	0030      	movs	r0, r6
 800732e:	6033      	str	r3, [r6, #0]
 8007330:	f000 f9d4 	bl	80076dc <__malloc_unlock>
 8007334:	e7cd      	b.n	80072d2 <_malloc_r+0x82>
 8007336:	46c0      	nop			; (mov r8, r8)
 8007338:	20000390 	.word	0x20000390

0800733c <__ssputs_r>:
 800733c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800733e:	688e      	ldr	r6, [r1, #8]
 8007340:	b085      	sub	sp, #20
 8007342:	0007      	movs	r7, r0
 8007344:	000c      	movs	r4, r1
 8007346:	9203      	str	r2, [sp, #12]
 8007348:	9301      	str	r3, [sp, #4]
 800734a:	429e      	cmp	r6, r3
 800734c:	d83c      	bhi.n	80073c8 <__ssputs_r+0x8c>
 800734e:	2390      	movs	r3, #144	; 0x90
 8007350:	898a      	ldrh	r2, [r1, #12]
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	421a      	tst	r2, r3
 8007356:	d034      	beq.n	80073c2 <__ssputs_r+0x86>
 8007358:	6909      	ldr	r1, [r1, #16]
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	6960      	ldr	r0, [r4, #20]
 800735e:	1a5b      	subs	r3, r3, r1
 8007360:	9302      	str	r3, [sp, #8]
 8007362:	2303      	movs	r3, #3
 8007364:	4343      	muls	r3, r0
 8007366:	0fdd      	lsrs	r5, r3, #31
 8007368:	18ed      	adds	r5, r5, r3
 800736a:	9b01      	ldr	r3, [sp, #4]
 800736c:	9802      	ldr	r0, [sp, #8]
 800736e:	3301      	adds	r3, #1
 8007370:	181b      	adds	r3, r3, r0
 8007372:	106d      	asrs	r5, r5, #1
 8007374:	42ab      	cmp	r3, r5
 8007376:	d900      	bls.n	800737a <__ssputs_r+0x3e>
 8007378:	001d      	movs	r5, r3
 800737a:	0553      	lsls	r3, r2, #21
 800737c:	d532      	bpl.n	80073e4 <__ssputs_r+0xa8>
 800737e:	0029      	movs	r1, r5
 8007380:	0038      	movs	r0, r7
 8007382:	f7ff ff65 	bl	8007250 <_malloc_r>
 8007386:	1e06      	subs	r6, r0, #0
 8007388:	d109      	bne.n	800739e <__ssputs_r+0x62>
 800738a:	230c      	movs	r3, #12
 800738c:	603b      	str	r3, [r7, #0]
 800738e:	2340      	movs	r3, #64	; 0x40
 8007390:	2001      	movs	r0, #1
 8007392:	89a2      	ldrh	r2, [r4, #12]
 8007394:	4240      	negs	r0, r0
 8007396:	4313      	orrs	r3, r2
 8007398:	81a3      	strh	r3, [r4, #12]
 800739a:	b005      	add	sp, #20
 800739c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800739e:	9a02      	ldr	r2, [sp, #8]
 80073a0:	6921      	ldr	r1, [r4, #16]
 80073a2:	f7ff fb18 	bl	80069d6 <memcpy>
 80073a6:	89a3      	ldrh	r3, [r4, #12]
 80073a8:	4a14      	ldr	r2, [pc, #80]	; (80073fc <__ssputs_r+0xc0>)
 80073aa:	401a      	ands	r2, r3
 80073ac:	2380      	movs	r3, #128	; 0x80
 80073ae:	4313      	orrs	r3, r2
 80073b0:	81a3      	strh	r3, [r4, #12]
 80073b2:	9b02      	ldr	r3, [sp, #8]
 80073b4:	6126      	str	r6, [r4, #16]
 80073b6:	18f6      	adds	r6, r6, r3
 80073b8:	6026      	str	r6, [r4, #0]
 80073ba:	6165      	str	r5, [r4, #20]
 80073bc:	9e01      	ldr	r6, [sp, #4]
 80073be:	1aed      	subs	r5, r5, r3
 80073c0:	60a5      	str	r5, [r4, #8]
 80073c2:	9b01      	ldr	r3, [sp, #4]
 80073c4:	429e      	cmp	r6, r3
 80073c6:	d900      	bls.n	80073ca <__ssputs_r+0x8e>
 80073c8:	9e01      	ldr	r6, [sp, #4]
 80073ca:	0032      	movs	r2, r6
 80073cc:	9903      	ldr	r1, [sp, #12]
 80073ce:	6820      	ldr	r0, [r4, #0]
 80073d0:	f000 f968 	bl	80076a4 <memmove>
 80073d4:	68a3      	ldr	r3, [r4, #8]
 80073d6:	2000      	movs	r0, #0
 80073d8:	1b9b      	subs	r3, r3, r6
 80073da:	60a3      	str	r3, [r4, #8]
 80073dc:	6823      	ldr	r3, [r4, #0]
 80073de:	199e      	adds	r6, r3, r6
 80073e0:	6026      	str	r6, [r4, #0]
 80073e2:	e7da      	b.n	800739a <__ssputs_r+0x5e>
 80073e4:	002a      	movs	r2, r5
 80073e6:	0038      	movs	r0, r7
 80073e8:	f000 f980 	bl	80076ec <_realloc_r>
 80073ec:	1e06      	subs	r6, r0, #0
 80073ee:	d1e0      	bne.n	80073b2 <__ssputs_r+0x76>
 80073f0:	0038      	movs	r0, r7
 80073f2:	6921      	ldr	r1, [r4, #16]
 80073f4:	f7ff fec0 	bl	8007178 <_free_r>
 80073f8:	e7c7      	b.n	800738a <__ssputs_r+0x4e>
 80073fa:	46c0      	nop			; (mov r8, r8)
 80073fc:	fffffb7f 	.word	0xfffffb7f

08007400 <_svfiprintf_r>:
 8007400:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007402:	b0a1      	sub	sp, #132	; 0x84
 8007404:	9003      	str	r0, [sp, #12]
 8007406:	001d      	movs	r5, r3
 8007408:	898b      	ldrh	r3, [r1, #12]
 800740a:	000f      	movs	r7, r1
 800740c:	0016      	movs	r6, r2
 800740e:	061b      	lsls	r3, r3, #24
 8007410:	d511      	bpl.n	8007436 <_svfiprintf_r+0x36>
 8007412:	690b      	ldr	r3, [r1, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d10e      	bne.n	8007436 <_svfiprintf_r+0x36>
 8007418:	2140      	movs	r1, #64	; 0x40
 800741a:	f7ff ff19 	bl	8007250 <_malloc_r>
 800741e:	6038      	str	r0, [r7, #0]
 8007420:	6138      	str	r0, [r7, #16]
 8007422:	2800      	cmp	r0, #0
 8007424:	d105      	bne.n	8007432 <_svfiprintf_r+0x32>
 8007426:	230c      	movs	r3, #12
 8007428:	9a03      	ldr	r2, [sp, #12]
 800742a:	3801      	subs	r0, #1
 800742c:	6013      	str	r3, [r2, #0]
 800742e:	b021      	add	sp, #132	; 0x84
 8007430:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007432:	2340      	movs	r3, #64	; 0x40
 8007434:	617b      	str	r3, [r7, #20]
 8007436:	2300      	movs	r3, #0
 8007438:	ac08      	add	r4, sp, #32
 800743a:	6163      	str	r3, [r4, #20]
 800743c:	3320      	adds	r3, #32
 800743e:	7663      	strb	r3, [r4, #25]
 8007440:	3310      	adds	r3, #16
 8007442:	76a3      	strb	r3, [r4, #26]
 8007444:	9507      	str	r5, [sp, #28]
 8007446:	0035      	movs	r5, r6
 8007448:	782b      	ldrb	r3, [r5, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <_svfiprintf_r+0x52>
 800744e:	2b25      	cmp	r3, #37	; 0x25
 8007450:	d147      	bne.n	80074e2 <_svfiprintf_r+0xe2>
 8007452:	1bab      	subs	r3, r5, r6
 8007454:	9305      	str	r3, [sp, #20]
 8007456:	42b5      	cmp	r5, r6
 8007458:	d00c      	beq.n	8007474 <_svfiprintf_r+0x74>
 800745a:	0032      	movs	r2, r6
 800745c:	0039      	movs	r1, r7
 800745e:	9803      	ldr	r0, [sp, #12]
 8007460:	f7ff ff6c 	bl	800733c <__ssputs_r>
 8007464:	1c43      	adds	r3, r0, #1
 8007466:	d100      	bne.n	800746a <_svfiprintf_r+0x6a>
 8007468:	e0ae      	b.n	80075c8 <_svfiprintf_r+0x1c8>
 800746a:	6962      	ldr	r2, [r4, #20]
 800746c:	9b05      	ldr	r3, [sp, #20]
 800746e:	4694      	mov	ip, r2
 8007470:	4463      	add	r3, ip
 8007472:	6163      	str	r3, [r4, #20]
 8007474:	782b      	ldrb	r3, [r5, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d100      	bne.n	800747c <_svfiprintf_r+0x7c>
 800747a:	e0a5      	b.n	80075c8 <_svfiprintf_r+0x1c8>
 800747c:	2201      	movs	r2, #1
 800747e:	2300      	movs	r3, #0
 8007480:	4252      	negs	r2, r2
 8007482:	6062      	str	r2, [r4, #4]
 8007484:	a904      	add	r1, sp, #16
 8007486:	3254      	adds	r2, #84	; 0x54
 8007488:	1852      	adds	r2, r2, r1
 800748a:	1c6e      	adds	r6, r5, #1
 800748c:	6023      	str	r3, [r4, #0]
 800748e:	60e3      	str	r3, [r4, #12]
 8007490:	60a3      	str	r3, [r4, #8]
 8007492:	7013      	strb	r3, [r2, #0]
 8007494:	65a3      	str	r3, [r4, #88]	; 0x58
 8007496:	2205      	movs	r2, #5
 8007498:	7831      	ldrb	r1, [r6, #0]
 800749a:	4854      	ldr	r0, [pc, #336]	; (80075ec <_svfiprintf_r+0x1ec>)
 800749c:	f7ff fa90 	bl	80069c0 <memchr>
 80074a0:	1c75      	adds	r5, r6, #1
 80074a2:	2800      	cmp	r0, #0
 80074a4:	d11f      	bne.n	80074e6 <_svfiprintf_r+0xe6>
 80074a6:	6822      	ldr	r2, [r4, #0]
 80074a8:	06d3      	lsls	r3, r2, #27
 80074aa:	d504      	bpl.n	80074b6 <_svfiprintf_r+0xb6>
 80074ac:	2353      	movs	r3, #83	; 0x53
 80074ae:	a904      	add	r1, sp, #16
 80074b0:	185b      	adds	r3, r3, r1
 80074b2:	2120      	movs	r1, #32
 80074b4:	7019      	strb	r1, [r3, #0]
 80074b6:	0713      	lsls	r3, r2, #28
 80074b8:	d504      	bpl.n	80074c4 <_svfiprintf_r+0xc4>
 80074ba:	2353      	movs	r3, #83	; 0x53
 80074bc:	a904      	add	r1, sp, #16
 80074be:	185b      	adds	r3, r3, r1
 80074c0:	212b      	movs	r1, #43	; 0x2b
 80074c2:	7019      	strb	r1, [r3, #0]
 80074c4:	7833      	ldrb	r3, [r6, #0]
 80074c6:	2b2a      	cmp	r3, #42	; 0x2a
 80074c8:	d016      	beq.n	80074f8 <_svfiprintf_r+0xf8>
 80074ca:	0035      	movs	r5, r6
 80074cc:	2100      	movs	r1, #0
 80074ce:	200a      	movs	r0, #10
 80074d0:	68e3      	ldr	r3, [r4, #12]
 80074d2:	782a      	ldrb	r2, [r5, #0]
 80074d4:	1c6e      	adds	r6, r5, #1
 80074d6:	3a30      	subs	r2, #48	; 0x30
 80074d8:	2a09      	cmp	r2, #9
 80074da:	d94e      	bls.n	800757a <_svfiprintf_r+0x17a>
 80074dc:	2900      	cmp	r1, #0
 80074de:	d111      	bne.n	8007504 <_svfiprintf_r+0x104>
 80074e0:	e017      	b.n	8007512 <_svfiprintf_r+0x112>
 80074e2:	3501      	adds	r5, #1
 80074e4:	e7b0      	b.n	8007448 <_svfiprintf_r+0x48>
 80074e6:	4b41      	ldr	r3, [pc, #260]	; (80075ec <_svfiprintf_r+0x1ec>)
 80074e8:	6822      	ldr	r2, [r4, #0]
 80074ea:	1ac0      	subs	r0, r0, r3
 80074ec:	2301      	movs	r3, #1
 80074ee:	4083      	lsls	r3, r0
 80074f0:	4313      	orrs	r3, r2
 80074f2:	002e      	movs	r6, r5
 80074f4:	6023      	str	r3, [r4, #0]
 80074f6:	e7ce      	b.n	8007496 <_svfiprintf_r+0x96>
 80074f8:	9b07      	ldr	r3, [sp, #28]
 80074fa:	1d19      	adds	r1, r3, #4
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	9107      	str	r1, [sp, #28]
 8007500:	2b00      	cmp	r3, #0
 8007502:	db01      	blt.n	8007508 <_svfiprintf_r+0x108>
 8007504:	930b      	str	r3, [sp, #44]	; 0x2c
 8007506:	e004      	b.n	8007512 <_svfiprintf_r+0x112>
 8007508:	425b      	negs	r3, r3
 800750a:	60e3      	str	r3, [r4, #12]
 800750c:	2302      	movs	r3, #2
 800750e:	4313      	orrs	r3, r2
 8007510:	6023      	str	r3, [r4, #0]
 8007512:	782b      	ldrb	r3, [r5, #0]
 8007514:	2b2e      	cmp	r3, #46	; 0x2e
 8007516:	d10a      	bne.n	800752e <_svfiprintf_r+0x12e>
 8007518:	786b      	ldrb	r3, [r5, #1]
 800751a:	2b2a      	cmp	r3, #42	; 0x2a
 800751c:	d135      	bne.n	800758a <_svfiprintf_r+0x18a>
 800751e:	9b07      	ldr	r3, [sp, #28]
 8007520:	3502      	adds	r5, #2
 8007522:	1d1a      	adds	r2, r3, #4
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	9207      	str	r2, [sp, #28]
 8007528:	2b00      	cmp	r3, #0
 800752a:	db2b      	blt.n	8007584 <_svfiprintf_r+0x184>
 800752c:	9309      	str	r3, [sp, #36]	; 0x24
 800752e:	4e30      	ldr	r6, [pc, #192]	; (80075f0 <_svfiprintf_r+0x1f0>)
 8007530:	2203      	movs	r2, #3
 8007532:	0030      	movs	r0, r6
 8007534:	7829      	ldrb	r1, [r5, #0]
 8007536:	f7ff fa43 	bl	80069c0 <memchr>
 800753a:	2800      	cmp	r0, #0
 800753c:	d006      	beq.n	800754c <_svfiprintf_r+0x14c>
 800753e:	2340      	movs	r3, #64	; 0x40
 8007540:	1b80      	subs	r0, r0, r6
 8007542:	4083      	lsls	r3, r0
 8007544:	6822      	ldr	r2, [r4, #0]
 8007546:	3501      	adds	r5, #1
 8007548:	4313      	orrs	r3, r2
 800754a:	6023      	str	r3, [r4, #0]
 800754c:	7829      	ldrb	r1, [r5, #0]
 800754e:	2206      	movs	r2, #6
 8007550:	4828      	ldr	r0, [pc, #160]	; (80075f4 <_svfiprintf_r+0x1f4>)
 8007552:	1c6e      	adds	r6, r5, #1
 8007554:	7621      	strb	r1, [r4, #24]
 8007556:	f7ff fa33 	bl	80069c0 <memchr>
 800755a:	2800      	cmp	r0, #0
 800755c:	d03c      	beq.n	80075d8 <_svfiprintf_r+0x1d8>
 800755e:	4b26      	ldr	r3, [pc, #152]	; (80075f8 <_svfiprintf_r+0x1f8>)
 8007560:	2b00      	cmp	r3, #0
 8007562:	d125      	bne.n	80075b0 <_svfiprintf_r+0x1b0>
 8007564:	2207      	movs	r2, #7
 8007566:	9b07      	ldr	r3, [sp, #28]
 8007568:	3307      	adds	r3, #7
 800756a:	4393      	bics	r3, r2
 800756c:	3308      	adds	r3, #8
 800756e:	9307      	str	r3, [sp, #28]
 8007570:	6963      	ldr	r3, [r4, #20]
 8007572:	9a04      	ldr	r2, [sp, #16]
 8007574:	189b      	adds	r3, r3, r2
 8007576:	6163      	str	r3, [r4, #20]
 8007578:	e765      	b.n	8007446 <_svfiprintf_r+0x46>
 800757a:	4343      	muls	r3, r0
 800757c:	0035      	movs	r5, r6
 800757e:	2101      	movs	r1, #1
 8007580:	189b      	adds	r3, r3, r2
 8007582:	e7a6      	b.n	80074d2 <_svfiprintf_r+0xd2>
 8007584:	2301      	movs	r3, #1
 8007586:	425b      	negs	r3, r3
 8007588:	e7d0      	b.n	800752c <_svfiprintf_r+0x12c>
 800758a:	2300      	movs	r3, #0
 800758c:	200a      	movs	r0, #10
 800758e:	001a      	movs	r2, r3
 8007590:	3501      	adds	r5, #1
 8007592:	6063      	str	r3, [r4, #4]
 8007594:	7829      	ldrb	r1, [r5, #0]
 8007596:	1c6e      	adds	r6, r5, #1
 8007598:	3930      	subs	r1, #48	; 0x30
 800759a:	2909      	cmp	r1, #9
 800759c:	d903      	bls.n	80075a6 <_svfiprintf_r+0x1a6>
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d0c5      	beq.n	800752e <_svfiprintf_r+0x12e>
 80075a2:	9209      	str	r2, [sp, #36]	; 0x24
 80075a4:	e7c3      	b.n	800752e <_svfiprintf_r+0x12e>
 80075a6:	4342      	muls	r2, r0
 80075a8:	0035      	movs	r5, r6
 80075aa:	2301      	movs	r3, #1
 80075ac:	1852      	adds	r2, r2, r1
 80075ae:	e7f1      	b.n	8007594 <_svfiprintf_r+0x194>
 80075b0:	ab07      	add	r3, sp, #28
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	003a      	movs	r2, r7
 80075b6:	0021      	movs	r1, r4
 80075b8:	4b10      	ldr	r3, [pc, #64]	; (80075fc <_svfiprintf_r+0x1fc>)
 80075ba:	9803      	ldr	r0, [sp, #12]
 80075bc:	f7fd ff68 	bl	8005490 <_printf_float>
 80075c0:	9004      	str	r0, [sp, #16]
 80075c2:	9b04      	ldr	r3, [sp, #16]
 80075c4:	3301      	adds	r3, #1
 80075c6:	d1d3      	bne.n	8007570 <_svfiprintf_r+0x170>
 80075c8:	89bb      	ldrh	r3, [r7, #12]
 80075ca:	980d      	ldr	r0, [sp, #52]	; 0x34
 80075cc:	065b      	lsls	r3, r3, #25
 80075ce:	d400      	bmi.n	80075d2 <_svfiprintf_r+0x1d2>
 80075d0:	e72d      	b.n	800742e <_svfiprintf_r+0x2e>
 80075d2:	2001      	movs	r0, #1
 80075d4:	4240      	negs	r0, r0
 80075d6:	e72a      	b.n	800742e <_svfiprintf_r+0x2e>
 80075d8:	ab07      	add	r3, sp, #28
 80075da:	9300      	str	r3, [sp, #0]
 80075dc:	003a      	movs	r2, r7
 80075de:	0021      	movs	r1, r4
 80075e0:	4b06      	ldr	r3, [pc, #24]	; (80075fc <_svfiprintf_r+0x1fc>)
 80075e2:	9803      	ldr	r0, [sp, #12]
 80075e4:	f7fe fa06 	bl	80059f4 <_printf_i>
 80075e8:	e7ea      	b.n	80075c0 <_svfiprintf_r+0x1c0>
 80075ea:	46c0      	nop			; (mov r8, r8)
 80075ec:	080085d4 	.word	0x080085d4
 80075f0:	080085da 	.word	0x080085da
 80075f4:	080085de 	.word	0x080085de
 80075f8:	08005491 	.word	0x08005491
 80075fc:	0800733d 	.word	0x0800733d

08007600 <_sbrk_r>:
 8007600:	2300      	movs	r3, #0
 8007602:	b570      	push	{r4, r5, r6, lr}
 8007604:	4d06      	ldr	r5, [pc, #24]	; (8007620 <_sbrk_r+0x20>)
 8007606:	0004      	movs	r4, r0
 8007608:	0008      	movs	r0, r1
 800760a:	602b      	str	r3, [r5, #0]
 800760c:	f7fb f9e4 	bl	80029d8 <_sbrk>
 8007610:	1c43      	adds	r3, r0, #1
 8007612:	d103      	bne.n	800761c <_sbrk_r+0x1c>
 8007614:	682b      	ldr	r3, [r5, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d000      	beq.n	800761c <_sbrk_r+0x1c>
 800761a:	6023      	str	r3, [r4, #0]
 800761c:	bd70      	pop	{r4, r5, r6, pc}
 800761e:	46c0      	nop			; (mov r8, r8)
 8007620:	20000398 	.word	0x20000398

08007624 <__assert_func>:
 8007624:	b530      	push	{r4, r5, lr}
 8007626:	0014      	movs	r4, r2
 8007628:	001a      	movs	r2, r3
 800762a:	4b09      	ldr	r3, [pc, #36]	; (8007650 <__assert_func+0x2c>)
 800762c:	0005      	movs	r5, r0
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	b085      	sub	sp, #20
 8007632:	68d8      	ldr	r0, [r3, #12]
 8007634:	4b07      	ldr	r3, [pc, #28]	; (8007654 <__assert_func+0x30>)
 8007636:	2c00      	cmp	r4, #0
 8007638:	d101      	bne.n	800763e <__assert_func+0x1a>
 800763a:	4b07      	ldr	r3, [pc, #28]	; (8007658 <__assert_func+0x34>)
 800763c:	001c      	movs	r4, r3
 800763e:	9301      	str	r3, [sp, #4]
 8007640:	9100      	str	r1, [sp, #0]
 8007642:	002b      	movs	r3, r5
 8007644:	4905      	ldr	r1, [pc, #20]	; (800765c <__assert_func+0x38>)
 8007646:	9402      	str	r4, [sp, #8]
 8007648:	f000 f80a 	bl	8007660 <fiprintf>
 800764c:	f000 faba 	bl	8007bc4 <abort>
 8007650:	2000000c 	.word	0x2000000c
 8007654:	080085e5 	.word	0x080085e5
 8007658:	08008620 	.word	0x08008620
 800765c:	080085f2 	.word	0x080085f2

08007660 <fiprintf>:
 8007660:	b40e      	push	{r1, r2, r3}
 8007662:	b503      	push	{r0, r1, lr}
 8007664:	0001      	movs	r1, r0
 8007666:	ab03      	add	r3, sp, #12
 8007668:	4804      	ldr	r0, [pc, #16]	; (800767c <fiprintf+0x1c>)
 800766a:	cb04      	ldmia	r3!, {r2}
 800766c:	6800      	ldr	r0, [r0, #0]
 800766e:	9301      	str	r3, [sp, #4]
 8007670:	f000 f892 	bl	8007798 <_vfiprintf_r>
 8007674:	b002      	add	sp, #8
 8007676:	bc08      	pop	{r3}
 8007678:	b003      	add	sp, #12
 800767a:	4718      	bx	r3
 800767c:	2000000c 	.word	0x2000000c

08007680 <__ascii_mbtowc>:
 8007680:	b082      	sub	sp, #8
 8007682:	2900      	cmp	r1, #0
 8007684:	d100      	bne.n	8007688 <__ascii_mbtowc+0x8>
 8007686:	a901      	add	r1, sp, #4
 8007688:	1e10      	subs	r0, r2, #0
 800768a:	d006      	beq.n	800769a <__ascii_mbtowc+0x1a>
 800768c:	2b00      	cmp	r3, #0
 800768e:	d006      	beq.n	800769e <__ascii_mbtowc+0x1e>
 8007690:	7813      	ldrb	r3, [r2, #0]
 8007692:	600b      	str	r3, [r1, #0]
 8007694:	7810      	ldrb	r0, [r2, #0]
 8007696:	1e43      	subs	r3, r0, #1
 8007698:	4198      	sbcs	r0, r3
 800769a:	b002      	add	sp, #8
 800769c:	4770      	bx	lr
 800769e:	2002      	movs	r0, #2
 80076a0:	4240      	negs	r0, r0
 80076a2:	e7fa      	b.n	800769a <__ascii_mbtowc+0x1a>

080076a4 <memmove>:
 80076a4:	b510      	push	{r4, lr}
 80076a6:	4288      	cmp	r0, r1
 80076a8:	d902      	bls.n	80076b0 <memmove+0xc>
 80076aa:	188b      	adds	r3, r1, r2
 80076ac:	4298      	cmp	r0, r3
 80076ae:	d303      	bcc.n	80076b8 <memmove+0x14>
 80076b0:	2300      	movs	r3, #0
 80076b2:	e007      	b.n	80076c4 <memmove+0x20>
 80076b4:	5c8b      	ldrb	r3, [r1, r2]
 80076b6:	5483      	strb	r3, [r0, r2]
 80076b8:	3a01      	subs	r2, #1
 80076ba:	d2fb      	bcs.n	80076b4 <memmove+0x10>
 80076bc:	bd10      	pop	{r4, pc}
 80076be:	5ccc      	ldrb	r4, [r1, r3]
 80076c0:	54c4      	strb	r4, [r0, r3]
 80076c2:	3301      	adds	r3, #1
 80076c4:	429a      	cmp	r2, r3
 80076c6:	d1fa      	bne.n	80076be <memmove+0x1a>
 80076c8:	e7f8      	b.n	80076bc <memmove+0x18>
	...

080076cc <__malloc_lock>:
 80076cc:	b510      	push	{r4, lr}
 80076ce:	4802      	ldr	r0, [pc, #8]	; (80076d8 <__malloc_lock+0xc>)
 80076d0:	f000 fc4f 	bl	8007f72 <__retarget_lock_acquire_recursive>
 80076d4:	bd10      	pop	{r4, pc}
 80076d6:	46c0      	nop			; (mov r8, r8)
 80076d8:	2000039c 	.word	0x2000039c

080076dc <__malloc_unlock>:
 80076dc:	b510      	push	{r4, lr}
 80076de:	4802      	ldr	r0, [pc, #8]	; (80076e8 <__malloc_unlock+0xc>)
 80076e0:	f000 fc48 	bl	8007f74 <__retarget_lock_release_recursive>
 80076e4:	bd10      	pop	{r4, pc}
 80076e6:	46c0      	nop			; (mov r8, r8)
 80076e8:	2000039c 	.word	0x2000039c

080076ec <_realloc_r>:
 80076ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076ee:	0007      	movs	r7, r0
 80076f0:	000e      	movs	r6, r1
 80076f2:	0014      	movs	r4, r2
 80076f4:	2900      	cmp	r1, #0
 80076f6:	d105      	bne.n	8007704 <_realloc_r+0x18>
 80076f8:	0011      	movs	r1, r2
 80076fa:	f7ff fda9 	bl	8007250 <_malloc_r>
 80076fe:	0005      	movs	r5, r0
 8007700:	0028      	movs	r0, r5
 8007702:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007704:	2a00      	cmp	r2, #0
 8007706:	d103      	bne.n	8007710 <_realloc_r+0x24>
 8007708:	f7ff fd36 	bl	8007178 <_free_r>
 800770c:	0025      	movs	r5, r4
 800770e:	e7f7      	b.n	8007700 <_realloc_r+0x14>
 8007710:	f000 fc9e 	bl	8008050 <_malloc_usable_size_r>
 8007714:	9001      	str	r0, [sp, #4]
 8007716:	4284      	cmp	r4, r0
 8007718:	d803      	bhi.n	8007722 <_realloc_r+0x36>
 800771a:	0035      	movs	r5, r6
 800771c:	0843      	lsrs	r3, r0, #1
 800771e:	42a3      	cmp	r3, r4
 8007720:	d3ee      	bcc.n	8007700 <_realloc_r+0x14>
 8007722:	0021      	movs	r1, r4
 8007724:	0038      	movs	r0, r7
 8007726:	f7ff fd93 	bl	8007250 <_malloc_r>
 800772a:	1e05      	subs	r5, r0, #0
 800772c:	d0e8      	beq.n	8007700 <_realloc_r+0x14>
 800772e:	9b01      	ldr	r3, [sp, #4]
 8007730:	0022      	movs	r2, r4
 8007732:	429c      	cmp	r4, r3
 8007734:	d900      	bls.n	8007738 <_realloc_r+0x4c>
 8007736:	001a      	movs	r2, r3
 8007738:	0031      	movs	r1, r6
 800773a:	0028      	movs	r0, r5
 800773c:	f7ff f94b 	bl	80069d6 <memcpy>
 8007740:	0031      	movs	r1, r6
 8007742:	0038      	movs	r0, r7
 8007744:	f7ff fd18 	bl	8007178 <_free_r>
 8007748:	e7da      	b.n	8007700 <_realloc_r+0x14>

0800774a <__sfputc_r>:
 800774a:	6893      	ldr	r3, [r2, #8]
 800774c:	b510      	push	{r4, lr}
 800774e:	3b01      	subs	r3, #1
 8007750:	6093      	str	r3, [r2, #8]
 8007752:	2b00      	cmp	r3, #0
 8007754:	da04      	bge.n	8007760 <__sfputc_r+0x16>
 8007756:	6994      	ldr	r4, [r2, #24]
 8007758:	42a3      	cmp	r3, r4
 800775a:	db07      	blt.n	800776c <__sfputc_r+0x22>
 800775c:	290a      	cmp	r1, #10
 800775e:	d005      	beq.n	800776c <__sfputc_r+0x22>
 8007760:	6813      	ldr	r3, [r2, #0]
 8007762:	1c58      	adds	r0, r3, #1
 8007764:	6010      	str	r0, [r2, #0]
 8007766:	7019      	strb	r1, [r3, #0]
 8007768:	0008      	movs	r0, r1
 800776a:	bd10      	pop	{r4, pc}
 800776c:	f000 f94e 	bl	8007a0c <__swbuf_r>
 8007770:	0001      	movs	r1, r0
 8007772:	e7f9      	b.n	8007768 <__sfputc_r+0x1e>

08007774 <__sfputs_r>:
 8007774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007776:	0006      	movs	r6, r0
 8007778:	000f      	movs	r7, r1
 800777a:	0014      	movs	r4, r2
 800777c:	18d5      	adds	r5, r2, r3
 800777e:	42ac      	cmp	r4, r5
 8007780:	d101      	bne.n	8007786 <__sfputs_r+0x12>
 8007782:	2000      	movs	r0, #0
 8007784:	e007      	b.n	8007796 <__sfputs_r+0x22>
 8007786:	7821      	ldrb	r1, [r4, #0]
 8007788:	003a      	movs	r2, r7
 800778a:	0030      	movs	r0, r6
 800778c:	f7ff ffdd 	bl	800774a <__sfputc_r>
 8007790:	3401      	adds	r4, #1
 8007792:	1c43      	adds	r3, r0, #1
 8007794:	d1f3      	bne.n	800777e <__sfputs_r+0xa>
 8007796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007798 <_vfiprintf_r>:
 8007798:	b5f0      	push	{r4, r5, r6, r7, lr}
 800779a:	b0a1      	sub	sp, #132	; 0x84
 800779c:	0006      	movs	r6, r0
 800779e:	000c      	movs	r4, r1
 80077a0:	001f      	movs	r7, r3
 80077a2:	9203      	str	r2, [sp, #12]
 80077a4:	2800      	cmp	r0, #0
 80077a6:	d004      	beq.n	80077b2 <_vfiprintf_r+0x1a>
 80077a8:	6983      	ldr	r3, [r0, #24]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <_vfiprintf_r+0x1a>
 80077ae:	f000 fb3f 	bl	8007e30 <__sinit>
 80077b2:	4b8e      	ldr	r3, [pc, #568]	; (80079ec <_vfiprintf_r+0x254>)
 80077b4:	429c      	cmp	r4, r3
 80077b6:	d11c      	bne.n	80077f2 <_vfiprintf_r+0x5a>
 80077b8:	6874      	ldr	r4, [r6, #4]
 80077ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077bc:	07db      	lsls	r3, r3, #31
 80077be:	d405      	bmi.n	80077cc <_vfiprintf_r+0x34>
 80077c0:	89a3      	ldrh	r3, [r4, #12]
 80077c2:	059b      	lsls	r3, r3, #22
 80077c4:	d402      	bmi.n	80077cc <_vfiprintf_r+0x34>
 80077c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077c8:	f000 fbd3 	bl	8007f72 <__retarget_lock_acquire_recursive>
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	071b      	lsls	r3, r3, #28
 80077d0:	d502      	bpl.n	80077d8 <_vfiprintf_r+0x40>
 80077d2:	6923      	ldr	r3, [r4, #16]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d11d      	bne.n	8007814 <_vfiprintf_r+0x7c>
 80077d8:	0021      	movs	r1, r4
 80077da:	0030      	movs	r0, r6
 80077dc:	f000 f97a 	bl	8007ad4 <__swsetup_r>
 80077e0:	2800      	cmp	r0, #0
 80077e2:	d017      	beq.n	8007814 <_vfiprintf_r+0x7c>
 80077e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077e6:	07db      	lsls	r3, r3, #31
 80077e8:	d50d      	bpl.n	8007806 <_vfiprintf_r+0x6e>
 80077ea:	2001      	movs	r0, #1
 80077ec:	4240      	negs	r0, r0
 80077ee:	b021      	add	sp, #132	; 0x84
 80077f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077f2:	4b7f      	ldr	r3, [pc, #508]	; (80079f0 <_vfiprintf_r+0x258>)
 80077f4:	429c      	cmp	r4, r3
 80077f6:	d101      	bne.n	80077fc <_vfiprintf_r+0x64>
 80077f8:	68b4      	ldr	r4, [r6, #8]
 80077fa:	e7de      	b.n	80077ba <_vfiprintf_r+0x22>
 80077fc:	4b7d      	ldr	r3, [pc, #500]	; (80079f4 <_vfiprintf_r+0x25c>)
 80077fe:	429c      	cmp	r4, r3
 8007800:	d1db      	bne.n	80077ba <_vfiprintf_r+0x22>
 8007802:	68f4      	ldr	r4, [r6, #12]
 8007804:	e7d9      	b.n	80077ba <_vfiprintf_r+0x22>
 8007806:	89a3      	ldrh	r3, [r4, #12]
 8007808:	059b      	lsls	r3, r3, #22
 800780a:	d4ee      	bmi.n	80077ea <_vfiprintf_r+0x52>
 800780c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800780e:	f000 fbb1 	bl	8007f74 <__retarget_lock_release_recursive>
 8007812:	e7ea      	b.n	80077ea <_vfiprintf_r+0x52>
 8007814:	2300      	movs	r3, #0
 8007816:	ad08      	add	r5, sp, #32
 8007818:	616b      	str	r3, [r5, #20]
 800781a:	3320      	adds	r3, #32
 800781c:	766b      	strb	r3, [r5, #25]
 800781e:	3310      	adds	r3, #16
 8007820:	76ab      	strb	r3, [r5, #26]
 8007822:	9707      	str	r7, [sp, #28]
 8007824:	9f03      	ldr	r7, [sp, #12]
 8007826:	783b      	ldrb	r3, [r7, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d001      	beq.n	8007830 <_vfiprintf_r+0x98>
 800782c:	2b25      	cmp	r3, #37	; 0x25
 800782e:	d14e      	bne.n	80078ce <_vfiprintf_r+0x136>
 8007830:	9b03      	ldr	r3, [sp, #12]
 8007832:	1afb      	subs	r3, r7, r3
 8007834:	9305      	str	r3, [sp, #20]
 8007836:	9b03      	ldr	r3, [sp, #12]
 8007838:	429f      	cmp	r7, r3
 800783a:	d00d      	beq.n	8007858 <_vfiprintf_r+0xc0>
 800783c:	9b05      	ldr	r3, [sp, #20]
 800783e:	0021      	movs	r1, r4
 8007840:	0030      	movs	r0, r6
 8007842:	9a03      	ldr	r2, [sp, #12]
 8007844:	f7ff ff96 	bl	8007774 <__sfputs_r>
 8007848:	1c43      	adds	r3, r0, #1
 800784a:	d100      	bne.n	800784e <_vfiprintf_r+0xb6>
 800784c:	e0b5      	b.n	80079ba <_vfiprintf_r+0x222>
 800784e:	696a      	ldr	r2, [r5, #20]
 8007850:	9b05      	ldr	r3, [sp, #20]
 8007852:	4694      	mov	ip, r2
 8007854:	4463      	add	r3, ip
 8007856:	616b      	str	r3, [r5, #20]
 8007858:	783b      	ldrb	r3, [r7, #0]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d100      	bne.n	8007860 <_vfiprintf_r+0xc8>
 800785e:	e0ac      	b.n	80079ba <_vfiprintf_r+0x222>
 8007860:	2201      	movs	r2, #1
 8007862:	1c7b      	adds	r3, r7, #1
 8007864:	9303      	str	r3, [sp, #12]
 8007866:	2300      	movs	r3, #0
 8007868:	4252      	negs	r2, r2
 800786a:	606a      	str	r2, [r5, #4]
 800786c:	a904      	add	r1, sp, #16
 800786e:	3254      	adds	r2, #84	; 0x54
 8007870:	1852      	adds	r2, r2, r1
 8007872:	602b      	str	r3, [r5, #0]
 8007874:	60eb      	str	r3, [r5, #12]
 8007876:	60ab      	str	r3, [r5, #8]
 8007878:	7013      	strb	r3, [r2, #0]
 800787a:	65ab      	str	r3, [r5, #88]	; 0x58
 800787c:	9b03      	ldr	r3, [sp, #12]
 800787e:	2205      	movs	r2, #5
 8007880:	7819      	ldrb	r1, [r3, #0]
 8007882:	485d      	ldr	r0, [pc, #372]	; (80079f8 <_vfiprintf_r+0x260>)
 8007884:	f7ff f89c 	bl	80069c0 <memchr>
 8007888:	9b03      	ldr	r3, [sp, #12]
 800788a:	1c5f      	adds	r7, r3, #1
 800788c:	2800      	cmp	r0, #0
 800788e:	d120      	bne.n	80078d2 <_vfiprintf_r+0x13a>
 8007890:	682a      	ldr	r2, [r5, #0]
 8007892:	06d3      	lsls	r3, r2, #27
 8007894:	d504      	bpl.n	80078a0 <_vfiprintf_r+0x108>
 8007896:	2353      	movs	r3, #83	; 0x53
 8007898:	a904      	add	r1, sp, #16
 800789a:	185b      	adds	r3, r3, r1
 800789c:	2120      	movs	r1, #32
 800789e:	7019      	strb	r1, [r3, #0]
 80078a0:	0713      	lsls	r3, r2, #28
 80078a2:	d504      	bpl.n	80078ae <_vfiprintf_r+0x116>
 80078a4:	2353      	movs	r3, #83	; 0x53
 80078a6:	a904      	add	r1, sp, #16
 80078a8:	185b      	adds	r3, r3, r1
 80078aa:	212b      	movs	r1, #43	; 0x2b
 80078ac:	7019      	strb	r1, [r3, #0]
 80078ae:	9b03      	ldr	r3, [sp, #12]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b2a      	cmp	r3, #42	; 0x2a
 80078b4:	d016      	beq.n	80078e4 <_vfiprintf_r+0x14c>
 80078b6:	2100      	movs	r1, #0
 80078b8:	68eb      	ldr	r3, [r5, #12]
 80078ba:	9f03      	ldr	r7, [sp, #12]
 80078bc:	783a      	ldrb	r2, [r7, #0]
 80078be:	1c78      	adds	r0, r7, #1
 80078c0:	3a30      	subs	r2, #48	; 0x30
 80078c2:	4684      	mov	ip, r0
 80078c4:	2a09      	cmp	r2, #9
 80078c6:	d94f      	bls.n	8007968 <_vfiprintf_r+0x1d0>
 80078c8:	2900      	cmp	r1, #0
 80078ca:	d111      	bne.n	80078f0 <_vfiprintf_r+0x158>
 80078cc:	e017      	b.n	80078fe <_vfiprintf_r+0x166>
 80078ce:	3701      	adds	r7, #1
 80078d0:	e7a9      	b.n	8007826 <_vfiprintf_r+0x8e>
 80078d2:	4b49      	ldr	r3, [pc, #292]	; (80079f8 <_vfiprintf_r+0x260>)
 80078d4:	682a      	ldr	r2, [r5, #0]
 80078d6:	1ac0      	subs	r0, r0, r3
 80078d8:	2301      	movs	r3, #1
 80078da:	4083      	lsls	r3, r0
 80078dc:	4313      	orrs	r3, r2
 80078de:	602b      	str	r3, [r5, #0]
 80078e0:	9703      	str	r7, [sp, #12]
 80078e2:	e7cb      	b.n	800787c <_vfiprintf_r+0xe4>
 80078e4:	9b07      	ldr	r3, [sp, #28]
 80078e6:	1d19      	adds	r1, r3, #4
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	9107      	str	r1, [sp, #28]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	db01      	blt.n	80078f4 <_vfiprintf_r+0x15c>
 80078f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80078f2:	e004      	b.n	80078fe <_vfiprintf_r+0x166>
 80078f4:	425b      	negs	r3, r3
 80078f6:	60eb      	str	r3, [r5, #12]
 80078f8:	2302      	movs	r3, #2
 80078fa:	4313      	orrs	r3, r2
 80078fc:	602b      	str	r3, [r5, #0]
 80078fe:	783b      	ldrb	r3, [r7, #0]
 8007900:	2b2e      	cmp	r3, #46	; 0x2e
 8007902:	d10a      	bne.n	800791a <_vfiprintf_r+0x182>
 8007904:	787b      	ldrb	r3, [r7, #1]
 8007906:	2b2a      	cmp	r3, #42	; 0x2a
 8007908:	d137      	bne.n	800797a <_vfiprintf_r+0x1e2>
 800790a:	9b07      	ldr	r3, [sp, #28]
 800790c:	3702      	adds	r7, #2
 800790e:	1d1a      	adds	r2, r3, #4
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	9207      	str	r2, [sp, #28]
 8007914:	2b00      	cmp	r3, #0
 8007916:	db2d      	blt.n	8007974 <_vfiprintf_r+0x1dc>
 8007918:	9309      	str	r3, [sp, #36]	; 0x24
 800791a:	2203      	movs	r2, #3
 800791c:	7839      	ldrb	r1, [r7, #0]
 800791e:	4837      	ldr	r0, [pc, #220]	; (80079fc <_vfiprintf_r+0x264>)
 8007920:	f7ff f84e 	bl	80069c0 <memchr>
 8007924:	2800      	cmp	r0, #0
 8007926:	d007      	beq.n	8007938 <_vfiprintf_r+0x1a0>
 8007928:	4b34      	ldr	r3, [pc, #208]	; (80079fc <_vfiprintf_r+0x264>)
 800792a:	682a      	ldr	r2, [r5, #0]
 800792c:	1ac0      	subs	r0, r0, r3
 800792e:	2340      	movs	r3, #64	; 0x40
 8007930:	4083      	lsls	r3, r0
 8007932:	4313      	orrs	r3, r2
 8007934:	3701      	adds	r7, #1
 8007936:	602b      	str	r3, [r5, #0]
 8007938:	7839      	ldrb	r1, [r7, #0]
 800793a:	1c7b      	adds	r3, r7, #1
 800793c:	2206      	movs	r2, #6
 800793e:	4830      	ldr	r0, [pc, #192]	; (8007a00 <_vfiprintf_r+0x268>)
 8007940:	9303      	str	r3, [sp, #12]
 8007942:	7629      	strb	r1, [r5, #24]
 8007944:	f7ff f83c 	bl	80069c0 <memchr>
 8007948:	2800      	cmp	r0, #0
 800794a:	d045      	beq.n	80079d8 <_vfiprintf_r+0x240>
 800794c:	4b2d      	ldr	r3, [pc, #180]	; (8007a04 <_vfiprintf_r+0x26c>)
 800794e:	2b00      	cmp	r3, #0
 8007950:	d127      	bne.n	80079a2 <_vfiprintf_r+0x20a>
 8007952:	2207      	movs	r2, #7
 8007954:	9b07      	ldr	r3, [sp, #28]
 8007956:	3307      	adds	r3, #7
 8007958:	4393      	bics	r3, r2
 800795a:	3308      	adds	r3, #8
 800795c:	9307      	str	r3, [sp, #28]
 800795e:	696b      	ldr	r3, [r5, #20]
 8007960:	9a04      	ldr	r2, [sp, #16]
 8007962:	189b      	adds	r3, r3, r2
 8007964:	616b      	str	r3, [r5, #20]
 8007966:	e75d      	b.n	8007824 <_vfiprintf_r+0x8c>
 8007968:	210a      	movs	r1, #10
 800796a:	434b      	muls	r3, r1
 800796c:	4667      	mov	r7, ip
 800796e:	189b      	adds	r3, r3, r2
 8007970:	3909      	subs	r1, #9
 8007972:	e7a3      	b.n	80078bc <_vfiprintf_r+0x124>
 8007974:	2301      	movs	r3, #1
 8007976:	425b      	negs	r3, r3
 8007978:	e7ce      	b.n	8007918 <_vfiprintf_r+0x180>
 800797a:	2300      	movs	r3, #0
 800797c:	001a      	movs	r2, r3
 800797e:	3701      	adds	r7, #1
 8007980:	606b      	str	r3, [r5, #4]
 8007982:	7839      	ldrb	r1, [r7, #0]
 8007984:	1c78      	adds	r0, r7, #1
 8007986:	3930      	subs	r1, #48	; 0x30
 8007988:	4684      	mov	ip, r0
 800798a:	2909      	cmp	r1, #9
 800798c:	d903      	bls.n	8007996 <_vfiprintf_r+0x1fe>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d0c3      	beq.n	800791a <_vfiprintf_r+0x182>
 8007992:	9209      	str	r2, [sp, #36]	; 0x24
 8007994:	e7c1      	b.n	800791a <_vfiprintf_r+0x182>
 8007996:	230a      	movs	r3, #10
 8007998:	435a      	muls	r2, r3
 800799a:	4667      	mov	r7, ip
 800799c:	1852      	adds	r2, r2, r1
 800799e:	3b09      	subs	r3, #9
 80079a0:	e7ef      	b.n	8007982 <_vfiprintf_r+0x1ea>
 80079a2:	ab07      	add	r3, sp, #28
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	0022      	movs	r2, r4
 80079a8:	0029      	movs	r1, r5
 80079aa:	0030      	movs	r0, r6
 80079ac:	4b16      	ldr	r3, [pc, #88]	; (8007a08 <_vfiprintf_r+0x270>)
 80079ae:	f7fd fd6f 	bl	8005490 <_printf_float>
 80079b2:	9004      	str	r0, [sp, #16]
 80079b4:	9b04      	ldr	r3, [sp, #16]
 80079b6:	3301      	adds	r3, #1
 80079b8:	d1d1      	bne.n	800795e <_vfiprintf_r+0x1c6>
 80079ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80079bc:	07db      	lsls	r3, r3, #31
 80079be:	d405      	bmi.n	80079cc <_vfiprintf_r+0x234>
 80079c0:	89a3      	ldrh	r3, [r4, #12]
 80079c2:	059b      	lsls	r3, r3, #22
 80079c4:	d402      	bmi.n	80079cc <_vfiprintf_r+0x234>
 80079c6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80079c8:	f000 fad4 	bl	8007f74 <__retarget_lock_release_recursive>
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	065b      	lsls	r3, r3, #25
 80079d0:	d500      	bpl.n	80079d4 <_vfiprintf_r+0x23c>
 80079d2:	e70a      	b.n	80077ea <_vfiprintf_r+0x52>
 80079d4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80079d6:	e70a      	b.n	80077ee <_vfiprintf_r+0x56>
 80079d8:	ab07      	add	r3, sp, #28
 80079da:	9300      	str	r3, [sp, #0]
 80079dc:	0022      	movs	r2, r4
 80079de:	0029      	movs	r1, r5
 80079e0:	0030      	movs	r0, r6
 80079e2:	4b09      	ldr	r3, [pc, #36]	; (8007a08 <_vfiprintf_r+0x270>)
 80079e4:	f7fe f806 	bl	80059f4 <_printf_i>
 80079e8:	e7e3      	b.n	80079b2 <_vfiprintf_r+0x21a>
 80079ea:	46c0      	nop			; (mov r8, r8)
 80079ec:	0800874c 	.word	0x0800874c
 80079f0:	0800876c 	.word	0x0800876c
 80079f4:	0800872c 	.word	0x0800872c
 80079f8:	080085d4 	.word	0x080085d4
 80079fc:	080085da 	.word	0x080085da
 8007a00:	080085de 	.word	0x080085de
 8007a04:	08005491 	.word	0x08005491
 8007a08:	08007775 	.word	0x08007775

08007a0c <__swbuf_r>:
 8007a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a0e:	0005      	movs	r5, r0
 8007a10:	000e      	movs	r6, r1
 8007a12:	0014      	movs	r4, r2
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d004      	beq.n	8007a22 <__swbuf_r+0x16>
 8007a18:	6983      	ldr	r3, [r0, #24]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <__swbuf_r+0x16>
 8007a1e:	f000 fa07 	bl	8007e30 <__sinit>
 8007a22:	4b22      	ldr	r3, [pc, #136]	; (8007aac <__swbuf_r+0xa0>)
 8007a24:	429c      	cmp	r4, r3
 8007a26:	d12e      	bne.n	8007a86 <__swbuf_r+0x7a>
 8007a28:	686c      	ldr	r4, [r5, #4]
 8007a2a:	69a3      	ldr	r3, [r4, #24]
 8007a2c:	60a3      	str	r3, [r4, #8]
 8007a2e:	89a3      	ldrh	r3, [r4, #12]
 8007a30:	071b      	lsls	r3, r3, #28
 8007a32:	d532      	bpl.n	8007a9a <__swbuf_r+0x8e>
 8007a34:	6923      	ldr	r3, [r4, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d02f      	beq.n	8007a9a <__swbuf_r+0x8e>
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	6922      	ldr	r2, [r4, #16]
 8007a3e:	b2f7      	uxtb	r7, r6
 8007a40:	1a98      	subs	r0, r3, r2
 8007a42:	6963      	ldr	r3, [r4, #20]
 8007a44:	b2f6      	uxtb	r6, r6
 8007a46:	4283      	cmp	r3, r0
 8007a48:	dc05      	bgt.n	8007a56 <__swbuf_r+0x4a>
 8007a4a:	0021      	movs	r1, r4
 8007a4c:	0028      	movs	r0, r5
 8007a4e:	f000 f94d 	bl	8007cec <_fflush_r>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d127      	bne.n	8007aa6 <__swbuf_r+0x9a>
 8007a56:	68a3      	ldr	r3, [r4, #8]
 8007a58:	3001      	adds	r0, #1
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	60a3      	str	r3, [r4, #8]
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	6022      	str	r2, [r4, #0]
 8007a64:	701f      	strb	r7, [r3, #0]
 8007a66:	6963      	ldr	r3, [r4, #20]
 8007a68:	4283      	cmp	r3, r0
 8007a6a:	d004      	beq.n	8007a76 <__swbuf_r+0x6a>
 8007a6c:	89a3      	ldrh	r3, [r4, #12]
 8007a6e:	07db      	lsls	r3, r3, #31
 8007a70:	d507      	bpl.n	8007a82 <__swbuf_r+0x76>
 8007a72:	2e0a      	cmp	r6, #10
 8007a74:	d105      	bne.n	8007a82 <__swbuf_r+0x76>
 8007a76:	0021      	movs	r1, r4
 8007a78:	0028      	movs	r0, r5
 8007a7a:	f000 f937 	bl	8007cec <_fflush_r>
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d111      	bne.n	8007aa6 <__swbuf_r+0x9a>
 8007a82:	0030      	movs	r0, r6
 8007a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a86:	4b0a      	ldr	r3, [pc, #40]	; (8007ab0 <__swbuf_r+0xa4>)
 8007a88:	429c      	cmp	r4, r3
 8007a8a:	d101      	bne.n	8007a90 <__swbuf_r+0x84>
 8007a8c:	68ac      	ldr	r4, [r5, #8]
 8007a8e:	e7cc      	b.n	8007a2a <__swbuf_r+0x1e>
 8007a90:	4b08      	ldr	r3, [pc, #32]	; (8007ab4 <__swbuf_r+0xa8>)
 8007a92:	429c      	cmp	r4, r3
 8007a94:	d1c9      	bne.n	8007a2a <__swbuf_r+0x1e>
 8007a96:	68ec      	ldr	r4, [r5, #12]
 8007a98:	e7c7      	b.n	8007a2a <__swbuf_r+0x1e>
 8007a9a:	0021      	movs	r1, r4
 8007a9c:	0028      	movs	r0, r5
 8007a9e:	f000 f819 	bl	8007ad4 <__swsetup_r>
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d0c9      	beq.n	8007a3a <__swbuf_r+0x2e>
 8007aa6:	2601      	movs	r6, #1
 8007aa8:	4276      	negs	r6, r6
 8007aaa:	e7ea      	b.n	8007a82 <__swbuf_r+0x76>
 8007aac:	0800874c 	.word	0x0800874c
 8007ab0:	0800876c 	.word	0x0800876c
 8007ab4:	0800872c 	.word	0x0800872c

08007ab8 <__ascii_wctomb>:
 8007ab8:	0003      	movs	r3, r0
 8007aba:	1e08      	subs	r0, r1, #0
 8007abc:	d005      	beq.n	8007aca <__ascii_wctomb+0x12>
 8007abe:	2aff      	cmp	r2, #255	; 0xff
 8007ac0:	d904      	bls.n	8007acc <__ascii_wctomb+0x14>
 8007ac2:	228a      	movs	r2, #138	; 0x8a
 8007ac4:	2001      	movs	r0, #1
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	4240      	negs	r0, r0
 8007aca:	4770      	bx	lr
 8007acc:	2001      	movs	r0, #1
 8007ace:	700a      	strb	r2, [r1, #0]
 8007ad0:	e7fb      	b.n	8007aca <__ascii_wctomb+0x12>
	...

08007ad4 <__swsetup_r>:
 8007ad4:	4b37      	ldr	r3, [pc, #220]	; (8007bb4 <__swsetup_r+0xe0>)
 8007ad6:	b570      	push	{r4, r5, r6, lr}
 8007ad8:	681d      	ldr	r5, [r3, #0]
 8007ada:	0006      	movs	r6, r0
 8007adc:	000c      	movs	r4, r1
 8007ade:	2d00      	cmp	r5, #0
 8007ae0:	d005      	beq.n	8007aee <__swsetup_r+0x1a>
 8007ae2:	69ab      	ldr	r3, [r5, #24]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d102      	bne.n	8007aee <__swsetup_r+0x1a>
 8007ae8:	0028      	movs	r0, r5
 8007aea:	f000 f9a1 	bl	8007e30 <__sinit>
 8007aee:	4b32      	ldr	r3, [pc, #200]	; (8007bb8 <__swsetup_r+0xe4>)
 8007af0:	429c      	cmp	r4, r3
 8007af2:	d10f      	bne.n	8007b14 <__swsetup_r+0x40>
 8007af4:	686c      	ldr	r4, [r5, #4]
 8007af6:	230c      	movs	r3, #12
 8007af8:	5ee2      	ldrsh	r2, [r4, r3]
 8007afa:	b293      	uxth	r3, r2
 8007afc:	0711      	lsls	r1, r2, #28
 8007afe:	d42d      	bmi.n	8007b5c <__swsetup_r+0x88>
 8007b00:	06d9      	lsls	r1, r3, #27
 8007b02:	d411      	bmi.n	8007b28 <__swsetup_r+0x54>
 8007b04:	2309      	movs	r3, #9
 8007b06:	2001      	movs	r0, #1
 8007b08:	6033      	str	r3, [r6, #0]
 8007b0a:	3337      	adds	r3, #55	; 0x37
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	81a3      	strh	r3, [r4, #12]
 8007b10:	4240      	negs	r0, r0
 8007b12:	bd70      	pop	{r4, r5, r6, pc}
 8007b14:	4b29      	ldr	r3, [pc, #164]	; (8007bbc <__swsetup_r+0xe8>)
 8007b16:	429c      	cmp	r4, r3
 8007b18:	d101      	bne.n	8007b1e <__swsetup_r+0x4a>
 8007b1a:	68ac      	ldr	r4, [r5, #8]
 8007b1c:	e7eb      	b.n	8007af6 <__swsetup_r+0x22>
 8007b1e:	4b28      	ldr	r3, [pc, #160]	; (8007bc0 <__swsetup_r+0xec>)
 8007b20:	429c      	cmp	r4, r3
 8007b22:	d1e8      	bne.n	8007af6 <__swsetup_r+0x22>
 8007b24:	68ec      	ldr	r4, [r5, #12]
 8007b26:	e7e6      	b.n	8007af6 <__swsetup_r+0x22>
 8007b28:	075b      	lsls	r3, r3, #29
 8007b2a:	d513      	bpl.n	8007b54 <__swsetup_r+0x80>
 8007b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b2e:	2900      	cmp	r1, #0
 8007b30:	d008      	beq.n	8007b44 <__swsetup_r+0x70>
 8007b32:	0023      	movs	r3, r4
 8007b34:	3344      	adds	r3, #68	; 0x44
 8007b36:	4299      	cmp	r1, r3
 8007b38:	d002      	beq.n	8007b40 <__swsetup_r+0x6c>
 8007b3a:	0030      	movs	r0, r6
 8007b3c:	f7ff fb1c 	bl	8007178 <_free_r>
 8007b40:	2300      	movs	r3, #0
 8007b42:	6363      	str	r3, [r4, #52]	; 0x34
 8007b44:	2224      	movs	r2, #36	; 0x24
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	4393      	bics	r3, r2
 8007b4a:	81a3      	strh	r3, [r4, #12]
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	6063      	str	r3, [r4, #4]
 8007b50:	6923      	ldr	r3, [r4, #16]
 8007b52:	6023      	str	r3, [r4, #0]
 8007b54:	2308      	movs	r3, #8
 8007b56:	89a2      	ldrh	r2, [r4, #12]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	81a3      	strh	r3, [r4, #12]
 8007b5c:	6923      	ldr	r3, [r4, #16]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10b      	bne.n	8007b7a <__swsetup_r+0xa6>
 8007b62:	21a0      	movs	r1, #160	; 0xa0
 8007b64:	2280      	movs	r2, #128	; 0x80
 8007b66:	89a3      	ldrh	r3, [r4, #12]
 8007b68:	0089      	lsls	r1, r1, #2
 8007b6a:	0092      	lsls	r2, r2, #2
 8007b6c:	400b      	ands	r3, r1
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d003      	beq.n	8007b7a <__swsetup_r+0xa6>
 8007b72:	0021      	movs	r1, r4
 8007b74:	0030      	movs	r0, r6
 8007b76:	f000 fa27 	bl	8007fc8 <__smakebuf_r>
 8007b7a:	220c      	movs	r2, #12
 8007b7c:	5ea3      	ldrsh	r3, [r4, r2]
 8007b7e:	2001      	movs	r0, #1
 8007b80:	001a      	movs	r2, r3
 8007b82:	b299      	uxth	r1, r3
 8007b84:	4002      	ands	r2, r0
 8007b86:	4203      	tst	r3, r0
 8007b88:	d00f      	beq.n	8007baa <__swsetup_r+0xd6>
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	60a2      	str	r2, [r4, #8]
 8007b8e:	6962      	ldr	r2, [r4, #20]
 8007b90:	4252      	negs	r2, r2
 8007b92:	61a2      	str	r2, [r4, #24]
 8007b94:	2000      	movs	r0, #0
 8007b96:	6922      	ldr	r2, [r4, #16]
 8007b98:	4282      	cmp	r2, r0
 8007b9a:	d1ba      	bne.n	8007b12 <__swsetup_r+0x3e>
 8007b9c:	060a      	lsls	r2, r1, #24
 8007b9e:	d5b8      	bpl.n	8007b12 <__swsetup_r+0x3e>
 8007ba0:	2240      	movs	r2, #64	; 0x40
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	81a3      	strh	r3, [r4, #12]
 8007ba6:	3801      	subs	r0, #1
 8007ba8:	e7b3      	b.n	8007b12 <__swsetup_r+0x3e>
 8007baa:	0788      	lsls	r0, r1, #30
 8007bac:	d400      	bmi.n	8007bb0 <__swsetup_r+0xdc>
 8007bae:	6962      	ldr	r2, [r4, #20]
 8007bb0:	60a2      	str	r2, [r4, #8]
 8007bb2:	e7ef      	b.n	8007b94 <__swsetup_r+0xc0>
 8007bb4:	2000000c 	.word	0x2000000c
 8007bb8:	0800874c 	.word	0x0800874c
 8007bbc:	0800876c 	.word	0x0800876c
 8007bc0:	0800872c 	.word	0x0800872c

08007bc4 <abort>:
 8007bc4:	2006      	movs	r0, #6
 8007bc6:	b510      	push	{r4, lr}
 8007bc8:	f000 fa74 	bl	80080b4 <raise>
 8007bcc:	2001      	movs	r0, #1
 8007bce:	f7fa fe91 	bl	80028f4 <_exit>
	...

08007bd4 <__sflush_r>:
 8007bd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bd6:	898b      	ldrh	r3, [r1, #12]
 8007bd8:	0005      	movs	r5, r0
 8007bda:	000c      	movs	r4, r1
 8007bdc:	071a      	lsls	r2, r3, #28
 8007bde:	d45f      	bmi.n	8007ca0 <__sflush_r+0xcc>
 8007be0:	684a      	ldr	r2, [r1, #4]
 8007be2:	2a00      	cmp	r2, #0
 8007be4:	dc04      	bgt.n	8007bf0 <__sflush_r+0x1c>
 8007be6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8007be8:	2a00      	cmp	r2, #0
 8007bea:	dc01      	bgt.n	8007bf0 <__sflush_r+0x1c>
 8007bec:	2000      	movs	r0, #0
 8007bee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007bf0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007bf2:	2f00      	cmp	r7, #0
 8007bf4:	d0fa      	beq.n	8007bec <__sflush_r+0x18>
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	2180      	movs	r1, #128	; 0x80
 8007bfa:	682e      	ldr	r6, [r5, #0]
 8007bfc:	602a      	str	r2, [r5, #0]
 8007bfe:	001a      	movs	r2, r3
 8007c00:	0149      	lsls	r1, r1, #5
 8007c02:	400a      	ands	r2, r1
 8007c04:	420b      	tst	r3, r1
 8007c06:	d034      	beq.n	8007c72 <__sflush_r+0x9e>
 8007c08:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007c0a:	89a3      	ldrh	r3, [r4, #12]
 8007c0c:	075b      	lsls	r3, r3, #29
 8007c0e:	d506      	bpl.n	8007c1e <__sflush_r+0x4a>
 8007c10:	6863      	ldr	r3, [r4, #4]
 8007c12:	1ac0      	subs	r0, r0, r3
 8007c14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d001      	beq.n	8007c1e <__sflush_r+0x4a>
 8007c1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007c1c:	1ac0      	subs	r0, r0, r3
 8007c1e:	0002      	movs	r2, r0
 8007c20:	6a21      	ldr	r1, [r4, #32]
 8007c22:	2300      	movs	r3, #0
 8007c24:	0028      	movs	r0, r5
 8007c26:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8007c28:	47b8      	blx	r7
 8007c2a:	89a1      	ldrh	r1, [r4, #12]
 8007c2c:	1c43      	adds	r3, r0, #1
 8007c2e:	d106      	bne.n	8007c3e <__sflush_r+0x6a>
 8007c30:	682b      	ldr	r3, [r5, #0]
 8007c32:	2b1d      	cmp	r3, #29
 8007c34:	d831      	bhi.n	8007c9a <__sflush_r+0xc6>
 8007c36:	4a2c      	ldr	r2, [pc, #176]	; (8007ce8 <__sflush_r+0x114>)
 8007c38:	40da      	lsrs	r2, r3
 8007c3a:	07d3      	lsls	r3, r2, #31
 8007c3c:	d52d      	bpl.n	8007c9a <__sflush_r+0xc6>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	6063      	str	r3, [r4, #4]
 8007c42:	6923      	ldr	r3, [r4, #16]
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	04cb      	lsls	r3, r1, #19
 8007c48:	d505      	bpl.n	8007c56 <__sflush_r+0x82>
 8007c4a:	1c43      	adds	r3, r0, #1
 8007c4c:	d102      	bne.n	8007c54 <__sflush_r+0x80>
 8007c4e:	682b      	ldr	r3, [r5, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d100      	bne.n	8007c56 <__sflush_r+0x82>
 8007c54:	6560      	str	r0, [r4, #84]	; 0x54
 8007c56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c58:	602e      	str	r6, [r5, #0]
 8007c5a:	2900      	cmp	r1, #0
 8007c5c:	d0c6      	beq.n	8007bec <__sflush_r+0x18>
 8007c5e:	0023      	movs	r3, r4
 8007c60:	3344      	adds	r3, #68	; 0x44
 8007c62:	4299      	cmp	r1, r3
 8007c64:	d002      	beq.n	8007c6c <__sflush_r+0x98>
 8007c66:	0028      	movs	r0, r5
 8007c68:	f7ff fa86 	bl	8007178 <_free_r>
 8007c6c:	2000      	movs	r0, #0
 8007c6e:	6360      	str	r0, [r4, #52]	; 0x34
 8007c70:	e7bd      	b.n	8007bee <__sflush_r+0x1a>
 8007c72:	2301      	movs	r3, #1
 8007c74:	0028      	movs	r0, r5
 8007c76:	6a21      	ldr	r1, [r4, #32]
 8007c78:	47b8      	blx	r7
 8007c7a:	1c43      	adds	r3, r0, #1
 8007c7c:	d1c5      	bne.n	8007c0a <__sflush_r+0x36>
 8007c7e:	682b      	ldr	r3, [r5, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d0c2      	beq.n	8007c0a <__sflush_r+0x36>
 8007c84:	2b1d      	cmp	r3, #29
 8007c86:	d001      	beq.n	8007c8c <__sflush_r+0xb8>
 8007c88:	2b16      	cmp	r3, #22
 8007c8a:	d101      	bne.n	8007c90 <__sflush_r+0xbc>
 8007c8c:	602e      	str	r6, [r5, #0]
 8007c8e:	e7ad      	b.n	8007bec <__sflush_r+0x18>
 8007c90:	2340      	movs	r3, #64	; 0x40
 8007c92:	89a2      	ldrh	r2, [r4, #12]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	81a3      	strh	r3, [r4, #12]
 8007c98:	e7a9      	b.n	8007bee <__sflush_r+0x1a>
 8007c9a:	2340      	movs	r3, #64	; 0x40
 8007c9c:	430b      	orrs	r3, r1
 8007c9e:	e7fa      	b.n	8007c96 <__sflush_r+0xc2>
 8007ca0:	690f      	ldr	r7, [r1, #16]
 8007ca2:	2f00      	cmp	r7, #0
 8007ca4:	d0a2      	beq.n	8007bec <__sflush_r+0x18>
 8007ca6:	680a      	ldr	r2, [r1, #0]
 8007ca8:	600f      	str	r7, [r1, #0]
 8007caa:	1bd2      	subs	r2, r2, r7
 8007cac:	9201      	str	r2, [sp, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	079b      	lsls	r3, r3, #30
 8007cb2:	d100      	bne.n	8007cb6 <__sflush_r+0xe2>
 8007cb4:	694a      	ldr	r2, [r1, #20]
 8007cb6:	60a2      	str	r2, [r4, #8]
 8007cb8:	9b01      	ldr	r3, [sp, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	dc00      	bgt.n	8007cc0 <__sflush_r+0xec>
 8007cbe:	e795      	b.n	8007bec <__sflush_r+0x18>
 8007cc0:	003a      	movs	r2, r7
 8007cc2:	0028      	movs	r0, r5
 8007cc4:	9b01      	ldr	r3, [sp, #4]
 8007cc6:	6a21      	ldr	r1, [r4, #32]
 8007cc8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007cca:	47b0      	blx	r6
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	dc06      	bgt.n	8007cde <__sflush_r+0x10a>
 8007cd0:	2340      	movs	r3, #64	; 0x40
 8007cd2:	2001      	movs	r0, #1
 8007cd4:	89a2      	ldrh	r2, [r4, #12]
 8007cd6:	4240      	negs	r0, r0
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	81a3      	strh	r3, [r4, #12]
 8007cdc:	e787      	b.n	8007bee <__sflush_r+0x1a>
 8007cde:	9b01      	ldr	r3, [sp, #4]
 8007ce0:	183f      	adds	r7, r7, r0
 8007ce2:	1a1b      	subs	r3, r3, r0
 8007ce4:	9301      	str	r3, [sp, #4]
 8007ce6:	e7e7      	b.n	8007cb8 <__sflush_r+0xe4>
 8007ce8:	20400001 	.word	0x20400001

08007cec <_fflush_r>:
 8007cec:	690b      	ldr	r3, [r1, #16]
 8007cee:	b570      	push	{r4, r5, r6, lr}
 8007cf0:	0005      	movs	r5, r0
 8007cf2:	000c      	movs	r4, r1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d102      	bne.n	8007cfe <_fflush_r+0x12>
 8007cf8:	2500      	movs	r5, #0
 8007cfa:	0028      	movs	r0, r5
 8007cfc:	bd70      	pop	{r4, r5, r6, pc}
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d004      	beq.n	8007d0c <_fflush_r+0x20>
 8007d02:	6983      	ldr	r3, [r0, #24]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d101      	bne.n	8007d0c <_fflush_r+0x20>
 8007d08:	f000 f892 	bl	8007e30 <__sinit>
 8007d0c:	4b14      	ldr	r3, [pc, #80]	; (8007d60 <_fflush_r+0x74>)
 8007d0e:	429c      	cmp	r4, r3
 8007d10:	d11b      	bne.n	8007d4a <_fflush_r+0x5e>
 8007d12:	686c      	ldr	r4, [r5, #4]
 8007d14:	220c      	movs	r2, #12
 8007d16:	5ea3      	ldrsh	r3, [r4, r2]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d0ed      	beq.n	8007cf8 <_fflush_r+0xc>
 8007d1c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007d1e:	07d2      	lsls	r2, r2, #31
 8007d20:	d404      	bmi.n	8007d2c <_fflush_r+0x40>
 8007d22:	059b      	lsls	r3, r3, #22
 8007d24:	d402      	bmi.n	8007d2c <_fflush_r+0x40>
 8007d26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d28:	f000 f923 	bl	8007f72 <__retarget_lock_acquire_recursive>
 8007d2c:	0028      	movs	r0, r5
 8007d2e:	0021      	movs	r1, r4
 8007d30:	f7ff ff50 	bl	8007bd4 <__sflush_r>
 8007d34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d36:	0005      	movs	r5, r0
 8007d38:	07db      	lsls	r3, r3, #31
 8007d3a:	d4de      	bmi.n	8007cfa <_fflush_r+0xe>
 8007d3c:	89a3      	ldrh	r3, [r4, #12]
 8007d3e:	059b      	lsls	r3, r3, #22
 8007d40:	d4db      	bmi.n	8007cfa <_fflush_r+0xe>
 8007d42:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d44:	f000 f916 	bl	8007f74 <__retarget_lock_release_recursive>
 8007d48:	e7d7      	b.n	8007cfa <_fflush_r+0xe>
 8007d4a:	4b06      	ldr	r3, [pc, #24]	; (8007d64 <_fflush_r+0x78>)
 8007d4c:	429c      	cmp	r4, r3
 8007d4e:	d101      	bne.n	8007d54 <_fflush_r+0x68>
 8007d50:	68ac      	ldr	r4, [r5, #8]
 8007d52:	e7df      	b.n	8007d14 <_fflush_r+0x28>
 8007d54:	4b04      	ldr	r3, [pc, #16]	; (8007d68 <_fflush_r+0x7c>)
 8007d56:	429c      	cmp	r4, r3
 8007d58:	d1dc      	bne.n	8007d14 <_fflush_r+0x28>
 8007d5a:	68ec      	ldr	r4, [r5, #12]
 8007d5c:	e7da      	b.n	8007d14 <_fflush_r+0x28>
 8007d5e:	46c0      	nop			; (mov r8, r8)
 8007d60:	0800874c 	.word	0x0800874c
 8007d64:	0800876c 	.word	0x0800876c
 8007d68:	0800872c 	.word	0x0800872c

08007d6c <std>:
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	b510      	push	{r4, lr}
 8007d70:	0004      	movs	r4, r0
 8007d72:	6003      	str	r3, [r0, #0]
 8007d74:	6043      	str	r3, [r0, #4]
 8007d76:	6083      	str	r3, [r0, #8]
 8007d78:	8181      	strh	r1, [r0, #12]
 8007d7a:	6643      	str	r3, [r0, #100]	; 0x64
 8007d7c:	0019      	movs	r1, r3
 8007d7e:	81c2      	strh	r2, [r0, #14]
 8007d80:	6103      	str	r3, [r0, #16]
 8007d82:	6143      	str	r3, [r0, #20]
 8007d84:	6183      	str	r3, [r0, #24]
 8007d86:	2208      	movs	r2, #8
 8007d88:	305c      	adds	r0, #92	; 0x5c
 8007d8a:	f7fd facf 	bl	800532c <memset>
 8007d8e:	4b05      	ldr	r3, [pc, #20]	; (8007da4 <std+0x38>)
 8007d90:	6224      	str	r4, [r4, #32]
 8007d92:	6263      	str	r3, [r4, #36]	; 0x24
 8007d94:	4b04      	ldr	r3, [pc, #16]	; (8007da8 <std+0x3c>)
 8007d96:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d98:	4b04      	ldr	r3, [pc, #16]	; (8007dac <std+0x40>)
 8007d9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d9c:	4b04      	ldr	r3, [pc, #16]	; (8007db0 <std+0x44>)
 8007d9e:	6323      	str	r3, [r4, #48]	; 0x30
 8007da0:	bd10      	pop	{r4, pc}
 8007da2:	46c0      	nop			; (mov r8, r8)
 8007da4:	080080f5 	.word	0x080080f5
 8007da8:	0800811d 	.word	0x0800811d
 8007dac:	08008155 	.word	0x08008155
 8007db0:	08008181 	.word	0x08008181

08007db4 <_cleanup_r>:
 8007db4:	b510      	push	{r4, lr}
 8007db6:	4902      	ldr	r1, [pc, #8]	; (8007dc0 <_cleanup_r+0xc>)
 8007db8:	f000 f8ba 	bl	8007f30 <_fwalk_reent>
 8007dbc:	bd10      	pop	{r4, pc}
 8007dbe:	46c0      	nop			; (mov r8, r8)
 8007dc0:	08007ced 	.word	0x08007ced

08007dc4 <__sfmoreglue>:
 8007dc4:	b570      	push	{r4, r5, r6, lr}
 8007dc6:	2568      	movs	r5, #104	; 0x68
 8007dc8:	1e4a      	subs	r2, r1, #1
 8007dca:	4355      	muls	r5, r2
 8007dcc:	000e      	movs	r6, r1
 8007dce:	0029      	movs	r1, r5
 8007dd0:	3174      	adds	r1, #116	; 0x74
 8007dd2:	f7ff fa3d 	bl	8007250 <_malloc_r>
 8007dd6:	1e04      	subs	r4, r0, #0
 8007dd8:	d008      	beq.n	8007dec <__sfmoreglue+0x28>
 8007dda:	2100      	movs	r1, #0
 8007ddc:	002a      	movs	r2, r5
 8007dde:	6001      	str	r1, [r0, #0]
 8007de0:	6046      	str	r6, [r0, #4]
 8007de2:	300c      	adds	r0, #12
 8007de4:	60a0      	str	r0, [r4, #8]
 8007de6:	3268      	adds	r2, #104	; 0x68
 8007de8:	f7fd faa0 	bl	800532c <memset>
 8007dec:	0020      	movs	r0, r4
 8007dee:	bd70      	pop	{r4, r5, r6, pc}

08007df0 <__sfp_lock_acquire>:
 8007df0:	b510      	push	{r4, lr}
 8007df2:	4802      	ldr	r0, [pc, #8]	; (8007dfc <__sfp_lock_acquire+0xc>)
 8007df4:	f000 f8bd 	bl	8007f72 <__retarget_lock_acquire_recursive>
 8007df8:	bd10      	pop	{r4, pc}
 8007dfa:	46c0      	nop			; (mov r8, r8)
 8007dfc:	2000039d 	.word	0x2000039d

08007e00 <__sfp_lock_release>:
 8007e00:	b510      	push	{r4, lr}
 8007e02:	4802      	ldr	r0, [pc, #8]	; (8007e0c <__sfp_lock_release+0xc>)
 8007e04:	f000 f8b6 	bl	8007f74 <__retarget_lock_release_recursive>
 8007e08:	bd10      	pop	{r4, pc}
 8007e0a:	46c0      	nop			; (mov r8, r8)
 8007e0c:	2000039d 	.word	0x2000039d

08007e10 <__sinit_lock_acquire>:
 8007e10:	b510      	push	{r4, lr}
 8007e12:	4802      	ldr	r0, [pc, #8]	; (8007e1c <__sinit_lock_acquire+0xc>)
 8007e14:	f000 f8ad 	bl	8007f72 <__retarget_lock_acquire_recursive>
 8007e18:	bd10      	pop	{r4, pc}
 8007e1a:	46c0      	nop			; (mov r8, r8)
 8007e1c:	2000039e 	.word	0x2000039e

08007e20 <__sinit_lock_release>:
 8007e20:	b510      	push	{r4, lr}
 8007e22:	4802      	ldr	r0, [pc, #8]	; (8007e2c <__sinit_lock_release+0xc>)
 8007e24:	f000 f8a6 	bl	8007f74 <__retarget_lock_release_recursive>
 8007e28:	bd10      	pop	{r4, pc}
 8007e2a:	46c0      	nop			; (mov r8, r8)
 8007e2c:	2000039e 	.word	0x2000039e

08007e30 <__sinit>:
 8007e30:	b513      	push	{r0, r1, r4, lr}
 8007e32:	0004      	movs	r4, r0
 8007e34:	f7ff ffec 	bl	8007e10 <__sinit_lock_acquire>
 8007e38:	69a3      	ldr	r3, [r4, #24]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d002      	beq.n	8007e44 <__sinit+0x14>
 8007e3e:	f7ff ffef 	bl	8007e20 <__sinit_lock_release>
 8007e42:	bd13      	pop	{r0, r1, r4, pc}
 8007e44:	64a3      	str	r3, [r4, #72]	; 0x48
 8007e46:	64e3      	str	r3, [r4, #76]	; 0x4c
 8007e48:	6523      	str	r3, [r4, #80]	; 0x50
 8007e4a:	4b13      	ldr	r3, [pc, #76]	; (8007e98 <__sinit+0x68>)
 8007e4c:	4a13      	ldr	r2, [pc, #76]	; (8007e9c <__sinit+0x6c>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	62a2      	str	r2, [r4, #40]	; 0x28
 8007e52:	9301      	str	r3, [sp, #4]
 8007e54:	42a3      	cmp	r3, r4
 8007e56:	d101      	bne.n	8007e5c <__sinit+0x2c>
 8007e58:	2301      	movs	r3, #1
 8007e5a:	61a3      	str	r3, [r4, #24]
 8007e5c:	0020      	movs	r0, r4
 8007e5e:	f000 f81f 	bl	8007ea0 <__sfp>
 8007e62:	6060      	str	r0, [r4, #4]
 8007e64:	0020      	movs	r0, r4
 8007e66:	f000 f81b 	bl	8007ea0 <__sfp>
 8007e6a:	60a0      	str	r0, [r4, #8]
 8007e6c:	0020      	movs	r0, r4
 8007e6e:	f000 f817 	bl	8007ea0 <__sfp>
 8007e72:	2200      	movs	r2, #0
 8007e74:	2104      	movs	r1, #4
 8007e76:	60e0      	str	r0, [r4, #12]
 8007e78:	6860      	ldr	r0, [r4, #4]
 8007e7a:	f7ff ff77 	bl	8007d6c <std>
 8007e7e:	2201      	movs	r2, #1
 8007e80:	2109      	movs	r1, #9
 8007e82:	68a0      	ldr	r0, [r4, #8]
 8007e84:	f7ff ff72 	bl	8007d6c <std>
 8007e88:	2202      	movs	r2, #2
 8007e8a:	2112      	movs	r1, #18
 8007e8c:	68e0      	ldr	r0, [r4, #12]
 8007e8e:	f7ff ff6d 	bl	8007d6c <std>
 8007e92:	2301      	movs	r3, #1
 8007e94:	61a3      	str	r3, [r4, #24]
 8007e96:	e7d2      	b.n	8007e3e <__sinit+0xe>
 8007e98:	080083b0 	.word	0x080083b0
 8007e9c:	08007db5 	.word	0x08007db5

08007ea0 <__sfp>:
 8007ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ea2:	0007      	movs	r7, r0
 8007ea4:	f7ff ffa4 	bl	8007df0 <__sfp_lock_acquire>
 8007ea8:	4b1f      	ldr	r3, [pc, #124]	; (8007f28 <__sfp+0x88>)
 8007eaa:	681e      	ldr	r6, [r3, #0]
 8007eac:	69b3      	ldr	r3, [r6, #24]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d102      	bne.n	8007eb8 <__sfp+0x18>
 8007eb2:	0030      	movs	r0, r6
 8007eb4:	f7ff ffbc 	bl	8007e30 <__sinit>
 8007eb8:	3648      	adds	r6, #72	; 0x48
 8007eba:	68b4      	ldr	r4, [r6, #8]
 8007ebc:	6873      	ldr	r3, [r6, #4]
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	d504      	bpl.n	8007ecc <__sfp+0x2c>
 8007ec2:	6833      	ldr	r3, [r6, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d022      	beq.n	8007f0e <__sfp+0x6e>
 8007ec8:	6836      	ldr	r6, [r6, #0]
 8007eca:	e7f6      	b.n	8007eba <__sfp+0x1a>
 8007ecc:	220c      	movs	r2, #12
 8007ece:	5ea5      	ldrsh	r5, [r4, r2]
 8007ed0:	2d00      	cmp	r5, #0
 8007ed2:	d11a      	bne.n	8007f0a <__sfp+0x6a>
 8007ed4:	0020      	movs	r0, r4
 8007ed6:	4b15      	ldr	r3, [pc, #84]	; (8007f2c <__sfp+0x8c>)
 8007ed8:	3058      	adds	r0, #88	; 0x58
 8007eda:	60e3      	str	r3, [r4, #12]
 8007edc:	6665      	str	r5, [r4, #100]	; 0x64
 8007ede:	f000 f847 	bl	8007f70 <__retarget_lock_init_recursive>
 8007ee2:	f7ff ff8d 	bl	8007e00 <__sfp_lock_release>
 8007ee6:	0020      	movs	r0, r4
 8007ee8:	2208      	movs	r2, #8
 8007eea:	0029      	movs	r1, r5
 8007eec:	6025      	str	r5, [r4, #0]
 8007eee:	60a5      	str	r5, [r4, #8]
 8007ef0:	6065      	str	r5, [r4, #4]
 8007ef2:	6125      	str	r5, [r4, #16]
 8007ef4:	6165      	str	r5, [r4, #20]
 8007ef6:	61a5      	str	r5, [r4, #24]
 8007ef8:	305c      	adds	r0, #92	; 0x5c
 8007efa:	f7fd fa17 	bl	800532c <memset>
 8007efe:	6365      	str	r5, [r4, #52]	; 0x34
 8007f00:	63a5      	str	r5, [r4, #56]	; 0x38
 8007f02:	64a5      	str	r5, [r4, #72]	; 0x48
 8007f04:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007f06:	0020      	movs	r0, r4
 8007f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f0a:	3468      	adds	r4, #104	; 0x68
 8007f0c:	e7d7      	b.n	8007ebe <__sfp+0x1e>
 8007f0e:	2104      	movs	r1, #4
 8007f10:	0038      	movs	r0, r7
 8007f12:	f7ff ff57 	bl	8007dc4 <__sfmoreglue>
 8007f16:	1e04      	subs	r4, r0, #0
 8007f18:	6030      	str	r0, [r6, #0]
 8007f1a:	d1d5      	bne.n	8007ec8 <__sfp+0x28>
 8007f1c:	f7ff ff70 	bl	8007e00 <__sfp_lock_release>
 8007f20:	230c      	movs	r3, #12
 8007f22:	603b      	str	r3, [r7, #0]
 8007f24:	e7ef      	b.n	8007f06 <__sfp+0x66>
 8007f26:	46c0      	nop			; (mov r8, r8)
 8007f28:	080083b0 	.word	0x080083b0
 8007f2c:	ffff0001 	.word	0xffff0001

08007f30 <_fwalk_reent>:
 8007f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f32:	0004      	movs	r4, r0
 8007f34:	0006      	movs	r6, r0
 8007f36:	2700      	movs	r7, #0
 8007f38:	9101      	str	r1, [sp, #4]
 8007f3a:	3448      	adds	r4, #72	; 0x48
 8007f3c:	6863      	ldr	r3, [r4, #4]
 8007f3e:	68a5      	ldr	r5, [r4, #8]
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	9b00      	ldr	r3, [sp, #0]
 8007f44:	3b01      	subs	r3, #1
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	d504      	bpl.n	8007f54 <_fwalk_reent+0x24>
 8007f4a:	6824      	ldr	r4, [r4, #0]
 8007f4c:	2c00      	cmp	r4, #0
 8007f4e:	d1f5      	bne.n	8007f3c <_fwalk_reent+0xc>
 8007f50:	0038      	movs	r0, r7
 8007f52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007f54:	89ab      	ldrh	r3, [r5, #12]
 8007f56:	2b01      	cmp	r3, #1
 8007f58:	d908      	bls.n	8007f6c <_fwalk_reent+0x3c>
 8007f5a:	220e      	movs	r2, #14
 8007f5c:	5eab      	ldrsh	r3, [r5, r2]
 8007f5e:	3301      	adds	r3, #1
 8007f60:	d004      	beq.n	8007f6c <_fwalk_reent+0x3c>
 8007f62:	0029      	movs	r1, r5
 8007f64:	0030      	movs	r0, r6
 8007f66:	9b01      	ldr	r3, [sp, #4]
 8007f68:	4798      	blx	r3
 8007f6a:	4307      	orrs	r7, r0
 8007f6c:	3568      	adds	r5, #104	; 0x68
 8007f6e:	e7e8      	b.n	8007f42 <_fwalk_reent+0x12>

08007f70 <__retarget_lock_init_recursive>:
 8007f70:	4770      	bx	lr

08007f72 <__retarget_lock_acquire_recursive>:
 8007f72:	4770      	bx	lr

08007f74 <__retarget_lock_release_recursive>:
 8007f74:	4770      	bx	lr
	...

08007f78 <__swhatbuf_r>:
 8007f78:	b570      	push	{r4, r5, r6, lr}
 8007f7a:	000e      	movs	r6, r1
 8007f7c:	001d      	movs	r5, r3
 8007f7e:	230e      	movs	r3, #14
 8007f80:	5ec9      	ldrsh	r1, [r1, r3]
 8007f82:	0014      	movs	r4, r2
 8007f84:	b096      	sub	sp, #88	; 0x58
 8007f86:	2900      	cmp	r1, #0
 8007f88:	da08      	bge.n	8007f9c <__swhatbuf_r+0x24>
 8007f8a:	220c      	movs	r2, #12
 8007f8c:	5eb3      	ldrsh	r3, [r6, r2]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	602a      	str	r2, [r5, #0]
 8007f92:	061b      	lsls	r3, r3, #24
 8007f94:	d411      	bmi.n	8007fba <__swhatbuf_r+0x42>
 8007f96:	2380      	movs	r3, #128	; 0x80
 8007f98:	00db      	lsls	r3, r3, #3
 8007f9a:	e00f      	b.n	8007fbc <__swhatbuf_r+0x44>
 8007f9c:	466a      	mov	r2, sp
 8007f9e:	f000 f91b 	bl	80081d8 <_fstat_r>
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	dbf1      	blt.n	8007f8a <__swhatbuf_r+0x12>
 8007fa6:	23f0      	movs	r3, #240	; 0xf0
 8007fa8:	9901      	ldr	r1, [sp, #4]
 8007faa:	021b      	lsls	r3, r3, #8
 8007fac:	4019      	ands	r1, r3
 8007fae:	4b05      	ldr	r3, [pc, #20]	; (8007fc4 <__swhatbuf_r+0x4c>)
 8007fb0:	18c9      	adds	r1, r1, r3
 8007fb2:	424b      	negs	r3, r1
 8007fb4:	4159      	adcs	r1, r3
 8007fb6:	6029      	str	r1, [r5, #0]
 8007fb8:	e7ed      	b.n	8007f96 <__swhatbuf_r+0x1e>
 8007fba:	2340      	movs	r3, #64	; 0x40
 8007fbc:	2000      	movs	r0, #0
 8007fbe:	6023      	str	r3, [r4, #0]
 8007fc0:	b016      	add	sp, #88	; 0x58
 8007fc2:	bd70      	pop	{r4, r5, r6, pc}
 8007fc4:	ffffe000 	.word	0xffffe000

08007fc8 <__smakebuf_r>:
 8007fc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fca:	2602      	movs	r6, #2
 8007fcc:	898b      	ldrh	r3, [r1, #12]
 8007fce:	0005      	movs	r5, r0
 8007fd0:	000c      	movs	r4, r1
 8007fd2:	4233      	tst	r3, r6
 8007fd4:	d006      	beq.n	8007fe4 <__smakebuf_r+0x1c>
 8007fd6:	0023      	movs	r3, r4
 8007fd8:	3347      	adds	r3, #71	; 0x47
 8007fda:	6023      	str	r3, [r4, #0]
 8007fdc:	6123      	str	r3, [r4, #16]
 8007fde:	2301      	movs	r3, #1
 8007fe0:	6163      	str	r3, [r4, #20]
 8007fe2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8007fe4:	466a      	mov	r2, sp
 8007fe6:	ab01      	add	r3, sp, #4
 8007fe8:	f7ff ffc6 	bl	8007f78 <__swhatbuf_r>
 8007fec:	9900      	ldr	r1, [sp, #0]
 8007fee:	0007      	movs	r7, r0
 8007ff0:	0028      	movs	r0, r5
 8007ff2:	f7ff f92d 	bl	8007250 <_malloc_r>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	d108      	bne.n	800800c <__smakebuf_r+0x44>
 8007ffa:	220c      	movs	r2, #12
 8007ffc:	5ea3      	ldrsh	r3, [r4, r2]
 8007ffe:	059a      	lsls	r2, r3, #22
 8008000:	d4ef      	bmi.n	8007fe2 <__smakebuf_r+0x1a>
 8008002:	2203      	movs	r2, #3
 8008004:	4393      	bics	r3, r2
 8008006:	431e      	orrs	r6, r3
 8008008:	81a6      	strh	r6, [r4, #12]
 800800a:	e7e4      	b.n	8007fd6 <__smakebuf_r+0xe>
 800800c:	4b0f      	ldr	r3, [pc, #60]	; (800804c <__smakebuf_r+0x84>)
 800800e:	62ab      	str	r3, [r5, #40]	; 0x28
 8008010:	2380      	movs	r3, #128	; 0x80
 8008012:	89a2      	ldrh	r2, [r4, #12]
 8008014:	6020      	str	r0, [r4, #0]
 8008016:	4313      	orrs	r3, r2
 8008018:	81a3      	strh	r3, [r4, #12]
 800801a:	9b00      	ldr	r3, [sp, #0]
 800801c:	6120      	str	r0, [r4, #16]
 800801e:	6163      	str	r3, [r4, #20]
 8008020:	9b01      	ldr	r3, [sp, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00d      	beq.n	8008042 <__smakebuf_r+0x7a>
 8008026:	0028      	movs	r0, r5
 8008028:	230e      	movs	r3, #14
 800802a:	5ee1      	ldrsh	r1, [r4, r3]
 800802c:	f000 f8e6 	bl	80081fc <_isatty_r>
 8008030:	2800      	cmp	r0, #0
 8008032:	d006      	beq.n	8008042 <__smakebuf_r+0x7a>
 8008034:	2203      	movs	r2, #3
 8008036:	89a3      	ldrh	r3, [r4, #12]
 8008038:	4393      	bics	r3, r2
 800803a:	001a      	movs	r2, r3
 800803c:	2301      	movs	r3, #1
 800803e:	4313      	orrs	r3, r2
 8008040:	81a3      	strh	r3, [r4, #12]
 8008042:	89a0      	ldrh	r0, [r4, #12]
 8008044:	4307      	orrs	r7, r0
 8008046:	81a7      	strh	r7, [r4, #12]
 8008048:	e7cb      	b.n	8007fe2 <__smakebuf_r+0x1a>
 800804a:	46c0      	nop			; (mov r8, r8)
 800804c:	08007db5 	.word	0x08007db5

08008050 <_malloc_usable_size_r>:
 8008050:	1f0b      	subs	r3, r1, #4
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	1f18      	subs	r0, r3, #4
 8008056:	2b00      	cmp	r3, #0
 8008058:	da01      	bge.n	800805e <_malloc_usable_size_r+0xe>
 800805a:	580b      	ldr	r3, [r1, r0]
 800805c:	18c0      	adds	r0, r0, r3
 800805e:	4770      	bx	lr

08008060 <_raise_r>:
 8008060:	b570      	push	{r4, r5, r6, lr}
 8008062:	0004      	movs	r4, r0
 8008064:	000d      	movs	r5, r1
 8008066:	291f      	cmp	r1, #31
 8008068:	d904      	bls.n	8008074 <_raise_r+0x14>
 800806a:	2316      	movs	r3, #22
 800806c:	6003      	str	r3, [r0, #0]
 800806e:	2001      	movs	r0, #1
 8008070:	4240      	negs	r0, r0
 8008072:	bd70      	pop	{r4, r5, r6, pc}
 8008074:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8008076:	2b00      	cmp	r3, #0
 8008078:	d004      	beq.n	8008084 <_raise_r+0x24>
 800807a:	008a      	lsls	r2, r1, #2
 800807c:	189b      	adds	r3, r3, r2
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	2a00      	cmp	r2, #0
 8008082:	d108      	bne.n	8008096 <_raise_r+0x36>
 8008084:	0020      	movs	r0, r4
 8008086:	f000 f831 	bl	80080ec <_getpid_r>
 800808a:	002a      	movs	r2, r5
 800808c:	0001      	movs	r1, r0
 800808e:	0020      	movs	r0, r4
 8008090:	f000 f81a 	bl	80080c8 <_kill_r>
 8008094:	e7ed      	b.n	8008072 <_raise_r+0x12>
 8008096:	2000      	movs	r0, #0
 8008098:	2a01      	cmp	r2, #1
 800809a:	d0ea      	beq.n	8008072 <_raise_r+0x12>
 800809c:	1c51      	adds	r1, r2, #1
 800809e:	d103      	bne.n	80080a8 <_raise_r+0x48>
 80080a0:	2316      	movs	r3, #22
 80080a2:	3001      	adds	r0, #1
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	e7e4      	b.n	8008072 <_raise_r+0x12>
 80080a8:	2400      	movs	r4, #0
 80080aa:	0028      	movs	r0, r5
 80080ac:	601c      	str	r4, [r3, #0]
 80080ae:	4790      	blx	r2
 80080b0:	0020      	movs	r0, r4
 80080b2:	e7de      	b.n	8008072 <_raise_r+0x12>

080080b4 <raise>:
 80080b4:	b510      	push	{r4, lr}
 80080b6:	4b03      	ldr	r3, [pc, #12]	; (80080c4 <raise+0x10>)
 80080b8:	0001      	movs	r1, r0
 80080ba:	6818      	ldr	r0, [r3, #0]
 80080bc:	f7ff ffd0 	bl	8008060 <_raise_r>
 80080c0:	bd10      	pop	{r4, pc}
 80080c2:	46c0      	nop			; (mov r8, r8)
 80080c4:	2000000c 	.word	0x2000000c

080080c8 <_kill_r>:
 80080c8:	2300      	movs	r3, #0
 80080ca:	b570      	push	{r4, r5, r6, lr}
 80080cc:	4d06      	ldr	r5, [pc, #24]	; (80080e8 <_kill_r+0x20>)
 80080ce:	0004      	movs	r4, r0
 80080d0:	0008      	movs	r0, r1
 80080d2:	0011      	movs	r1, r2
 80080d4:	602b      	str	r3, [r5, #0]
 80080d6:	f7fa fbfd 	bl	80028d4 <_kill>
 80080da:	1c43      	adds	r3, r0, #1
 80080dc:	d103      	bne.n	80080e6 <_kill_r+0x1e>
 80080de:	682b      	ldr	r3, [r5, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d000      	beq.n	80080e6 <_kill_r+0x1e>
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	bd70      	pop	{r4, r5, r6, pc}
 80080e8:	20000398 	.word	0x20000398

080080ec <_getpid_r>:
 80080ec:	b510      	push	{r4, lr}
 80080ee:	f7fa fbeb 	bl	80028c8 <_getpid>
 80080f2:	bd10      	pop	{r4, pc}

080080f4 <__sread>:
 80080f4:	b570      	push	{r4, r5, r6, lr}
 80080f6:	000c      	movs	r4, r1
 80080f8:	250e      	movs	r5, #14
 80080fa:	5f49      	ldrsh	r1, [r1, r5]
 80080fc:	f000 f8a4 	bl	8008248 <_read_r>
 8008100:	2800      	cmp	r0, #0
 8008102:	db03      	blt.n	800810c <__sread+0x18>
 8008104:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008106:	181b      	adds	r3, r3, r0
 8008108:	6563      	str	r3, [r4, #84]	; 0x54
 800810a:	bd70      	pop	{r4, r5, r6, pc}
 800810c:	89a3      	ldrh	r3, [r4, #12]
 800810e:	4a02      	ldr	r2, [pc, #8]	; (8008118 <__sread+0x24>)
 8008110:	4013      	ands	r3, r2
 8008112:	81a3      	strh	r3, [r4, #12]
 8008114:	e7f9      	b.n	800810a <__sread+0x16>
 8008116:	46c0      	nop			; (mov r8, r8)
 8008118:	ffffefff 	.word	0xffffefff

0800811c <__swrite>:
 800811c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811e:	001f      	movs	r7, r3
 8008120:	898b      	ldrh	r3, [r1, #12]
 8008122:	0005      	movs	r5, r0
 8008124:	000c      	movs	r4, r1
 8008126:	0016      	movs	r6, r2
 8008128:	05db      	lsls	r3, r3, #23
 800812a:	d505      	bpl.n	8008138 <__swrite+0x1c>
 800812c:	230e      	movs	r3, #14
 800812e:	5ec9      	ldrsh	r1, [r1, r3]
 8008130:	2200      	movs	r2, #0
 8008132:	2302      	movs	r3, #2
 8008134:	f000 f874 	bl	8008220 <_lseek_r>
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	4a05      	ldr	r2, [pc, #20]	; (8008150 <__swrite+0x34>)
 800813c:	0028      	movs	r0, r5
 800813e:	4013      	ands	r3, r2
 8008140:	81a3      	strh	r3, [r4, #12]
 8008142:	0032      	movs	r2, r6
 8008144:	230e      	movs	r3, #14
 8008146:	5ee1      	ldrsh	r1, [r4, r3]
 8008148:	003b      	movs	r3, r7
 800814a:	f000 f81f 	bl	800818c <_write_r>
 800814e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008150:	ffffefff 	.word	0xffffefff

08008154 <__sseek>:
 8008154:	b570      	push	{r4, r5, r6, lr}
 8008156:	000c      	movs	r4, r1
 8008158:	250e      	movs	r5, #14
 800815a:	5f49      	ldrsh	r1, [r1, r5]
 800815c:	f000 f860 	bl	8008220 <_lseek_r>
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	1c42      	adds	r2, r0, #1
 8008164:	d103      	bne.n	800816e <__sseek+0x1a>
 8008166:	4a05      	ldr	r2, [pc, #20]	; (800817c <__sseek+0x28>)
 8008168:	4013      	ands	r3, r2
 800816a:	81a3      	strh	r3, [r4, #12]
 800816c:	bd70      	pop	{r4, r5, r6, pc}
 800816e:	2280      	movs	r2, #128	; 0x80
 8008170:	0152      	lsls	r2, r2, #5
 8008172:	4313      	orrs	r3, r2
 8008174:	81a3      	strh	r3, [r4, #12]
 8008176:	6560      	str	r0, [r4, #84]	; 0x54
 8008178:	e7f8      	b.n	800816c <__sseek+0x18>
 800817a:	46c0      	nop			; (mov r8, r8)
 800817c:	ffffefff 	.word	0xffffefff

08008180 <__sclose>:
 8008180:	b510      	push	{r4, lr}
 8008182:	230e      	movs	r3, #14
 8008184:	5ec9      	ldrsh	r1, [r1, r3]
 8008186:	f000 f815 	bl	80081b4 <_close_r>
 800818a:	bd10      	pop	{r4, pc}

0800818c <_write_r>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	0004      	movs	r4, r0
 8008190:	0008      	movs	r0, r1
 8008192:	0011      	movs	r1, r2
 8008194:	001a      	movs	r2, r3
 8008196:	2300      	movs	r3, #0
 8008198:	4d05      	ldr	r5, [pc, #20]	; (80081b0 <_write_r+0x24>)
 800819a:	602b      	str	r3, [r5, #0]
 800819c:	f7fa fbd3 	bl	8002946 <_write>
 80081a0:	1c43      	adds	r3, r0, #1
 80081a2:	d103      	bne.n	80081ac <_write_r+0x20>
 80081a4:	682b      	ldr	r3, [r5, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d000      	beq.n	80081ac <_write_r+0x20>
 80081aa:	6023      	str	r3, [r4, #0]
 80081ac:	bd70      	pop	{r4, r5, r6, pc}
 80081ae:	46c0      	nop			; (mov r8, r8)
 80081b0:	20000398 	.word	0x20000398

080081b4 <_close_r>:
 80081b4:	2300      	movs	r3, #0
 80081b6:	b570      	push	{r4, r5, r6, lr}
 80081b8:	4d06      	ldr	r5, [pc, #24]	; (80081d4 <_close_r+0x20>)
 80081ba:	0004      	movs	r4, r0
 80081bc:	0008      	movs	r0, r1
 80081be:	602b      	str	r3, [r5, #0]
 80081c0:	f7fa fbdd 	bl	800297e <_close>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d103      	bne.n	80081d0 <_close_r+0x1c>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d000      	beq.n	80081d0 <_close_r+0x1c>
 80081ce:	6023      	str	r3, [r4, #0]
 80081d0:	bd70      	pop	{r4, r5, r6, pc}
 80081d2:	46c0      	nop			; (mov r8, r8)
 80081d4:	20000398 	.word	0x20000398

080081d8 <_fstat_r>:
 80081d8:	2300      	movs	r3, #0
 80081da:	b570      	push	{r4, r5, r6, lr}
 80081dc:	4d06      	ldr	r5, [pc, #24]	; (80081f8 <_fstat_r+0x20>)
 80081de:	0004      	movs	r4, r0
 80081e0:	0008      	movs	r0, r1
 80081e2:	0011      	movs	r1, r2
 80081e4:	602b      	str	r3, [r5, #0]
 80081e6:	f7fa fbd4 	bl	8002992 <_fstat>
 80081ea:	1c43      	adds	r3, r0, #1
 80081ec:	d103      	bne.n	80081f6 <_fstat_r+0x1e>
 80081ee:	682b      	ldr	r3, [r5, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d000      	beq.n	80081f6 <_fstat_r+0x1e>
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	bd70      	pop	{r4, r5, r6, pc}
 80081f8:	20000398 	.word	0x20000398

080081fc <_isatty_r>:
 80081fc:	2300      	movs	r3, #0
 80081fe:	b570      	push	{r4, r5, r6, lr}
 8008200:	4d06      	ldr	r5, [pc, #24]	; (800821c <_isatty_r+0x20>)
 8008202:	0004      	movs	r4, r0
 8008204:	0008      	movs	r0, r1
 8008206:	602b      	str	r3, [r5, #0]
 8008208:	f7fa fbd1 	bl	80029ae <_isatty>
 800820c:	1c43      	adds	r3, r0, #1
 800820e:	d103      	bne.n	8008218 <_isatty_r+0x1c>
 8008210:	682b      	ldr	r3, [r5, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d000      	beq.n	8008218 <_isatty_r+0x1c>
 8008216:	6023      	str	r3, [r4, #0]
 8008218:	bd70      	pop	{r4, r5, r6, pc}
 800821a:	46c0      	nop			; (mov r8, r8)
 800821c:	20000398 	.word	0x20000398

08008220 <_lseek_r>:
 8008220:	b570      	push	{r4, r5, r6, lr}
 8008222:	0004      	movs	r4, r0
 8008224:	0008      	movs	r0, r1
 8008226:	0011      	movs	r1, r2
 8008228:	001a      	movs	r2, r3
 800822a:	2300      	movs	r3, #0
 800822c:	4d05      	ldr	r5, [pc, #20]	; (8008244 <_lseek_r+0x24>)
 800822e:	602b      	str	r3, [r5, #0]
 8008230:	f7fa fbc6 	bl	80029c0 <_lseek>
 8008234:	1c43      	adds	r3, r0, #1
 8008236:	d103      	bne.n	8008240 <_lseek_r+0x20>
 8008238:	682b      	ldr	r3, [r5, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d000      	beq.n	8008240 <_lseek_r+0x20>
 800823e:	6023      	str	r3, [r4, #0]
 8008240:	bd70      	pop	{r4, r5, r6, pc}
 8008242:	46c0      	nop			; (mov r8, r8)
 8008244:	20000398 	.word	0x20000398

08008248 <_read_r>:
 8008248:	b570      	push	{r4, r5, r6, lr}
 800824a:	0004      	movs	r4, r0
 800824c:	0008      	movs	r0, r1
 800824e:	0011      	movs	r1, r2
 8008250:	001a      	movs	r2, r3
 8008252:	2300      	movs	r3, #0
 8008254:	4d05      	ldr	r5, [pc, #20]	; (800826c <_read_r+0x24>)
 8008256:	602b      	str	r3, [r5, #0]
 8008258:	f7fa fb58 	bl	800290c <_read>
 800825c:	1c43      	adds	r3, r0, #1
 800825e:	d103      	bne.n	8008268 <_read_r+0x20>
 8008260:	682b      	ldr	r3, [r5, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d000      	beq.n	8008268 <_read_r+0x20>
 8008266:	6023      	str	r3, [r4, #0]
 8008268:	bd70      	pop	{r4, r5, r6, pc}
 800826a:	46c0      	nop			; (mov r8, r8)
 800826c:	20000398 	.word	0x20000398

08008270 <_init>:
 8008270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008272:	46c0      	nop			; (mov r8, r8)
 8008274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008276:	bc08      	pop	{r3}
 8008278:	469e      	mov	lr, r3
 800827a:	4770      	bx	lr

0800827c <_fini>:
 800827c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800827e:	46c0      	nop			; (mov r8, r8)
 8008280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008282:	bc08      	pop	{r3}
 8008284:	469e      	mov	lr, r3
 8008286:	4770      	bx	lr
